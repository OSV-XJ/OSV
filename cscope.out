cscope 15 $HOME/hgj/osv               0000544357
	@boot/apm.c

19 
	~"code16gcc.h
"

20 
	~"boŸ.h
"

23 
	$quîy_≠m_bios
()

25 
u16
 
ax
, 
bx
, 
cx
, 
dx
, 
di
;

26 
u32
 
ebx
, 
esi
;

27 
u8
 
îr
;

30 
ax
 = 0x5300;

31 
bx
 = 
cx
 = 0;

32 
asm
 volatile("pushl %%ebp ; int $0x15 ;Öopl %%ebp ; setc %0"

33 : "=d" (
îr
), "+a" (
ax
), "+b" (
bx
), "+c" (
cx
)

36 i‡(
îr
)

39 i‡(
bx
 != 0x504d)

42 i‡(!(
cx
 & 0x02))

46 
ax
 = 0x5304;

47 
bx
 = 0;

48 
asm
 volatile("pushl %%ebp ; int $0x15 ;Öopl %%ebp"

49 : "+a" (
ax
), "+b" (
bx
)

53 
ebx
 = 
esi
 = 0;

54 
cx
 = 
dx
 = 
di
 = 0;

57 
asm
 volatile("pushl %%ebp ; int $0x15 ;Öopl %%ebp ; setc %6"

58 : "˜" (
ax
), "+b" (
ebx
), "+c" (
cx
), "+d" (
dx
),

59 "+S" (
esi
), "+D" (
di
), "=m" (
îr
)

62 
boŸ_∑øms
.
≠m_bios_öfo
.
c£g
 = 
ax
;

63 
boŸ_∑øms
.
≠m_bios_öfo
.
off£t
 = 
ebx
;

64 
boŸ_∑øms
.
≠m_bios_öfo
.
c£g_16
 = 
cx
;

65 
boŸ_∑øms
.
≠m_bios_öfo
.
d£g
 = 
dx
;

66 
boŸ_∑øms
.
≠m_bios_öfo
.
c£g_Àn
 = (
u16
)
esi
;

67 
boŸ_∑øms
.
≠m_bios_öfo
.
c£g_16_Àn
 = 
esi
 >> 16;

68 
boŸ_∑øms
.
≠m_bios_öfo
.
d£g_Àn
 = 
di
;

70 i‡(
îr
)

76 
ax
 = 0x5300;

77 
bx
 = 
cx
 = 0;

78 
asm
 volatile("pushl %%ebp ; int $0x15 ;Öopl %%ebp ; setc %0"

79 : "=d" (
îr
), "+a" (
ax
), "+b" (
bx
), "+c" (
cx
)

82 i‡(
îr
 || 
bx
 != 0x504d) {

84 
ax
 = 0x5304;

85 
bx
 = 0;

86 
asm
 volatile("pushl %%ebp ; int $0x15 ;Öopl %%ebp"

87 : "+a" (
ax
), "+b" (
bx
)

92 
boŸ_∑øms
.
≠m_bios_öfo
.
vîsi⁄
 = 
ax
;

93 
boŸ_∑øms
.
≠m_bios_öfo
.
Êags
 = 
cx
;

95 
	}
}

	@boot/apm_bios.h

1 #i‚de‡
_LINUX_APM_H


2 
	#_LINUX_APM_H


	)

19 
	~<öc/ty≥s.h
>

21 
	t≠m_evít_t
;

22 
	t≠m_evítöfo_t
;

24 
	s≠m_bios_öfo
 {

25 
__u16
 
	mvîsi⁄
;

26 
__u16
 
	mc£g
;

27 
__u32
 
	moff£t
;

28 
__u16
 
	mc£g_16
;

29 
__u16
 
	md£g
;

30 
__u16
 
	mÊags
;

31 
__u16
 
	mc£g_Àn
;

32 
__u16
 
	mc£g_16_Àn
;

33 
__u16
 
	md£g_Àn
;

36 #ifde‡
__KERNEL__


38 
	#APM_CS
 (
GDT_ENTRY_APMBIOS_BASE
 * 8)

	)

39 
	#APM_CS_16
 (
APM_CS
 + 8)

	)

40 
	#APM_DS
 (
APM_CS_16
 + 8)

	)

43 
	#APM_16_BIT_SUPPORT
 0x0001

	)

44 
	#APM_32_BIT_SUPPORT
 0x0002

	)

45 
	#APM_IDLE_SLOWS_CLOCK
 0x0004

	)

46 
	#APM_BIOS_DISABLED
 0x0008

	)

47 
	#APM_BIOS_DISENGAGED
 0x0010

	)

52 
	s≠m_öfo
 {

53 
≠m_bios_öfo
 
	mbios
;

54 
	mc⁄√˘i⁄_vîsi⁄
;

55 
	mgë_powî_°©us_brokí
;

56 
	mgë_powî_°©us_swabömöuãs
;

57 
	mÆlow_öts
;

58 
	mf‹bid_idÀ
;

59 
	mªÆmode_powî_off
;

60 
	mdißbÀd
;

66 
	#APM_FUNC_INST_CHECK
 0x5300

	)

67 
	#APM_FUNC_REAL_CONN
 0x5301

	)

68 
	#APM_FUNC_16BIT_CONN
 0x5302

	)

69 
	#APM_FUNC_32BIT_CONN
 0x5303

	)

70 
	#APM_FUNC_DISCONN
 0x5304

	)

71 
	#APM_FUNC_IDLE
 0x5305

	)

72 
	#APM_FUNC_BUSY
 0x5306

	)

73 
	#APM_FUNC_SET_STATE
 0x5307

	)

74 
	#APM_FUNC_ENABLE_PM
 0x5308

	)

75 
	#APM_FUNC_RESTORE_BIOS
 0x5309

	)

76 
	#APM_FUNC_GET_STATUS
 0x530a

	)

77 
	#APM_FUNC_GET_EVENT
 0x530b

	)

78 
	#APM_FUNC_GET_STATE
 0x530c

	)

79 
	#APM_FUNC_ENABLE_DEV_PM
 0x530d

	)

80 
	#APM_FUNC_VERSION
 0x530e

	)

81 
	#APM_FUNC_ENGAGE_PM
 0x530f

	)

82 
	#APM_FUNC_GET_CAP
 0x5310

	)

83 
	#APM_FUNC_RESUME_TIMER
 0x5311

	)

84 
	#APM_FUNC_RESUME_ON_RING
 0x5312

	)

85 
	#APM_FUNC_TIMER
 0x5313

	)

90 
	#APM_FUNC_DISABLE_TIMER
 0

	)

91 
	#APM_FUNC_GET_TIMER
 1

	)

92 
	#APM_FUNC_SET_TIMER
 2

	)

97 
	#APM_FUNC_DISABLE_RING
 0

	)

98 
	#APM_FUNC_ENABLE_RING
 1

	)

99 
	#APM_FUNC_GET_RING
 2

	)

104 
	#APM_FUNC_TIMER_DISABLE
 0

	)

105 
	#APM_FUNC_TIMER_ENABLE
 1

	)

106 
	#APM_FUNC_TIMER_GET
 2

	)

111 
≠m_öfo
ápm_info;

118 
	#APM_STATE_READY
 0x0000

	)

119 
	#APM_STATE_STANDBY
 0x0001

	)

120 
	#APM_STATE_SUSPEND
 0x0002

	)

121 
	#APM_STATE_OFF
 0x0003

	)

122 
	#APM_STATE_BUSY
 0x0004

	)

123 
	#APM_STATE_REJECT
 0x0005

	)

124 
	#APM_STATE_OEM_SYS
 0x0020

	)

125 
	#APM_STATE_OEM_DEV
 0x0040

	)

127 
	#APM_STATE_DISABLE
 0x0000

	)

128 
	#APM_STATE_ENABLE
 0x0001

	)

130 
	#APM_STATE_DISENGAGE
 0x0000

	)

131 
	#APM_STATE_ENGAGE
 0x0001

	)

136 
	#APM_SYS_STANDBY
 0x0001

	)

137 
	#APM_SYS_SUSPEND
 0x0002

	)

138 
	#APM_NORMAL_RESUME
 0x0003

	)

139 
	#APM_CRITICAL_RESUME
 0x0004

	)

140 
	#APM_LOW_BATTERY
 0x0005

	)

141 
	#APM_POWER_STATUS_CHANGE
 0x0006

	)

142 
	#APM_UPDATE_TIME
 0x0007

	)

143 
	#APM_CRITICAL_SUSPEND
 0x0008

	)

144 
	#APM_USER_STANDBY
 0x0009

	)

145 
	#APM_USER_SUSPEND
 0x000a

	)

146 
	#APM_STANDBY_RESUME
 0x000b

	)

147 
	#APM_CAPABILITY_CHANGE
 0x000c

	)

152 
	#APM_SUCCESS
 0x00

	)

153 
	#APM_DISABLED
 0x01

	)

154 
	#APM_CONNECTED
 0x02

	)

155 
	#APM_NOT_CONNECTED
 0x03

	)

156 
	#APM_16_CONNECTED
 0x05

	)

157 
	#APM_16_UNSUPPORTED
 0x06

	)

158 
	#APM_32_CONNECTED
 0x07

	)

159 
	#APM_32_UNSUPPORTED
 0x08

	)

160 
	#APM_BAD_DEVICE
 0x09

	)

161 
	#APM_BAD_PARAM
 0x0a

	)

162 
	#APM_NOT_ENGAGED
 0x0b

	)

163 
	#APM_BAD_FUNCTION
 0x0c

	)

164 
	#APM_RESUME_DISABLED
 0x0d

	)

165 
	#APM_NO_ERROR
 0x53

	)

166 
	#APM_BAD_STATE
 0x60

	)

167 
	#APM_NO_EVENTS
 0x80

	)

168 
	#APM_NOT_PRESENT
 0x86

	)

173 
	#APM_DEVICE_BIOS
 0x0000

	)

174 
	#APM_DEVICE_ALL
 0x0001

	)

175 
	#APM_DEVICE_DISPLAY
 0x0100

	)

176 
	#APM_DEVICE_STORAGE
 0x0200

	)

177 
	#APM_DEVICE_PARALLEL
 0x0300

	)

178 
	#APM_DEVICE_SERIAL
 0x0400

	)

179 
	#APM_DEVICE_NETWORK
 0x0500

	)

180 
	#APM_DEVICE_PCMCIA
 0x0600

	)

181 
	#APM_DEVICE_BATTERY
 0x8000

	)

182 
	#APM_DEVICE_OEM
 0xe000

	)

183 
	#APM_DEVICE_OLD_ALL
 0xffff

	)

184 
	#APM_DEVICE_CLASS
 0x00ff

	)

185 
	#APM_DEVICE_MASK
 0xff00

	)

187 #ifde‡
__KERNEL__


191 
	#APM_DEVICE_BALL
 ((
≠m_öfo
.
c⁄√˘i⁄_vîsi⁄
 > 0x0100) ? \

192 
APM_DEVICE_ALL
 : 
APM_DEVICE_OLD_ALL
)

	)

198 
	#APM_MAX_BATTERIES
 2

	)

203 
	#APM_CAP_GLOBAL_STANDBY
 0x0001

	)

204 
	#APM_CAP_GLOBAL_SUSPEND
 0x0002

	)

205 
	#APM_CAP_RESUME_STANDBY_TIMER
 0x0004

	)

206 
	#APM_CAP_RESUME_SUSPEND_TIMER
 0x0008

	)

207 
	#APM_CAP_RESUME_STANDBY_RING
 0x0010

	)

208 
	#APM_CAP_RESUME_SUSPEND_RING
 0x0020

	)

209 
	#APM_CAP_RESUME_STANDBY_PCMCIA
 0x0040

	)

210 
	#APM_CAP_RESUME_SUSPEND_PCMCIA
 0x0080

	)

215 
	~<boŸ/io˘l.h
>

217 
	#APM_IOC_STANDBY
 
	`_IO
('A', 1)

	)

218 
	#APM_IOC_SUSPEND
 
	`_IO
('A', 2)

	)

	@boot/boot.h

16 
	~"code16gcc.h
"

17 
	~<öc/ty≥s.h
>

18 
	~<°d¨g.h
>

19 
	~<boŸ/edd.h
>

20 
	~<boŸ/boŸ∑øm.h
>

22 #i‚de‡
BOOT_BOOT_H


23 
	#BOOT_BOOT_H


	)

25 
	#STACK_SIZE
 512

	)

27 
	#ARRAY_SIZE
(
x
Ë((xË/ (*(x)))

	)

33 
	#BUILD_BUG_ON
(
c⁄dôi⁄
Ë(()([1 - 2*!!(c⁄dôi⁄)]))

	)

38 
£tup_hódî
 
hdr
;

39 
boŸ_∑øms
 boot_params;

42 
ölöe
 
	$outb
(
u8
 
v
, 
u16
 
p‹t
)

44 
asm
 vﬁ©ûe("outb %0,%1" : : "a" (
v
), "dN" (
p‹t
));

45 
	}
}

46 
ölöe
 
u8
 
	$öb
(
u16
 
p‹t
)

48 
u8
 
v
;

49 
asm
 vﬁ©ûe("öb %1,%0" : "˜" (
v
Ë: "dN" (
p‹t
));

50  
v
;

51 
	}
}

53 
ölöe
 
	$outw
(
u16
 
v
, u16 
p‹t
)

55 
asm
 vﬁ©ûe("outw %0,%1" : : "a" (
v
), "dN" (
p‹t
));

56 
	}
}

57 
ölöe
 
u16
 
	$öw
(
u16
 
p‹t
)

59 
u16
 
v
;

60 
asm
 vﬁ©ûe("öw %1,%0" : "˜" (
v
Ë: "dN" (
p‹t
));

61  
v
;

62 
	}
}

64 
ölöe
 
	$oué
(
u32
 
v
, 
u16
 
p‹t
)

66 
asm
 vﬁ©ûe("oué %0,%1" : : "a" (
v
), "dN" (
p‹t
));

67 
	}
}

68 
ölöe
 
u32
 
	$öl
(
u32
 
p‹t
)

70 
u32
 
v
;

71 
asm
 vﬁ©ûe("ö»%1,%0" : "˜" (
v
Ë: "dN" (
p‹t
));

72  
v
;

73 
	}
}

75 
ölöe
 
	$io_dñay
()

77 c⁄° 
u16
 
DELAY_PORT
 = 0x80;

78 
asm
 vﬁ©ûe("outb %%Æ,%0" : : "dN" (
DELAY_PORT
));

79 
	}
}

83 
ölöe
 
u16
 
	$ds
()

85 
u16
 
£g
;

86 
	`asm
("movw %%ds,%0" : "Ùm" (
£g
));

87  
£g
;

88 
	}
}

90 
ölöe
 
	$£t_fs
(
u16
 
£g
)

92 
asm
 vﬁ©ûe("movw %0,%%fs" : : "rm" (
£g
));

93 
	}
}

94 
ölöe
 
u16
 
	$fs
()

96 
u16
 
£g
;

97 
asm
 vﬁ©ûe("movw %%fs,%0" : "Ùm" (
£g
));

98  
£g
;

99 
	}
}

101 
ölöe
 
	$£t_gs
(
u16
 
£g
)

103 
asm
 vﬁ©ûe("movw %0,%%gs" : : "rm" (
£g
));

104 
	}
}

105 
ölöe
 
u16
 
	$gs
()

107 
u16
 
£g
;

108 
asm
 vﬁ©ûe("movw %%gs,%0" : "Ùm" (
£g
));

109  
£g
;

110 
	}
}

112 
	taddr_t
;

114 
ölöe
 
u8
 
	$rdfs8
(
addr_t
 
addr
)

116 
u8
 
v
;

117 
asm
 vﬁ©ûe("movb %%fs:%1,%0" : "=q" (
v
Ë: "m" (*(
u8
 *)
addr
));

118  
v
;

119 
	}
}

120 
ölöe
 
u16
 
	$rdfs16
(
addr_t
 
addr
)

122 
u16
 
v
;

123 
asm
 vﬁ©ûe("movw %%fs:%1,%0" : "=q" (
v
Ë: "m" (*(
u16
 *)
addr
));

124  
v
;

125 
	}
}

126 
ölöe
 
u32
 
	$rdfs32
(
addr_t
 
addr
)

128 
u32
 
v
;

129 
asm
 vﬁ©ûe("mov»%%fs:%1,%0" : "=q" (
v
Ë: "m" (*(
u32
 *)
addr
));

130  
v
;

131 
	}
}

133 
ölöe
 
	$wrfs8
(
u8
 
v
, 
addr_t
 
addr
)

135 
asm
 vﬁ©ûe("movb %1,%%fs:%0" : "+m" (*(
u8
 *)
addr
Ë: "r" (
v
));

136 
	}
}

137 
ölöe
 
	$wrfs16
(
u16
 
v
, 
addr_t
 
addr
)

139 
asm
 vﬁ©ûe("movw %1,%%fs:%0" : "+m" (*(
u16
 *)
addr
Ë: "r" (
v
));

140 
	}
}

141 
ölöe
 
	$wrfs32
(
u32
 
v
, 
addr_t
 
addr
)

143 
asm
 vﬁ©ûe("mov»%1,%%fs:%0" : "+m" (*(
u32
 *)
addr
Ë: "r" (
v
));

144 
	}
}

146 
ölöe
 
u8
 
	$rdgs8
(
addr_t
 
addr
)

148 
u8
 
v
;

149 
asm
 vﬁ©ûe("movb %%gs:%1,%0" : "Ù" (
v
Ë: "m" (*(
u8
 *)
addr
));

150  
v
;

151 
	}
}

152 
ölöe
 
u16
 
	$rdgs16
(
addr_t
 
addr
)

154 
u16
 
v
;

155 
asm
 vﬁ©ûe("movw %%gs:%1,%0" : "Ù" (
v
Ë: "m" (*(
u16
 *)
addr
));

156  
v
;

157 
	}
}

158 
ölöe
 
u32
 
	$rdgs32
(
addr_t
 
addr
)

160 
u32
 
v
;

161 
asm
 vﬁ©ûe("mov»%%gs:%1,%0" : "Ù" (
v
Ë: "m" (*(
u32
 *)
addr
));

162  
v
;

163 
	}
}

165 
ölöe
 
	$wrgs8
(
u8
 
v
, 
addr_t
 
addr
)

167 
asm
 vﬁ©ûe("movb %1,%%gs:%0" : "+m" (*(
u8
 *)
addr
Ë: "r" (
v
));

168 
	}
}

169 
ölöe
 
	$wrgs16
(
u16
 
v
, 
addr_t
 
addr
)

171 
asm
 vﬁ©ûe("movw %1,%%gs:%0" : "+m" (*(
u16
 *)
addr
Ë: "r" (
v
));

172 
	}
}

173 
ölöe
 
	$wrgs32
(
u32
 
v
, 
addr_t
 
addr
)

175 
asm
 vﬁ©ûe("mov»%1,%%gs:%0" : "+m" (*(
u32
 *)
addr
Ë: "r" (
v
));

176 
	}
}

179 
ölöe
 
	$memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
)

181 
u8
 
diff
;

182 
	`asm
("repe; cmpsb; setnz %0"

183 : "=qm" (
diff
), "+D" (
s1
), "+S" (
s2
), "+c" (
Àn
));

184  
diff
;

185 
	}
}

187 
ölöe
 
	$memcmp_fs
(c⁄° *
s1
, 
addr_t
 
s2
, 
size_t
 
Àn
)

189 
u8
 
diff
;

190 
asm
 volatile("fs;Ñepe; cmpsb; setnz %0"

191 : "=qm" (
diff
), "+D" (
s1
), "+S" (
s2
), "+c" (
Àn
));

192  
diff
;

193 
	}
}

194 
ölöe
 
	$memcmp_gs
(c⁄° *
s1
, 
addr_t
 
s2
, 
size_t
 
Àn
)

196 
u8
 
diff
;

197 
asm
 volatile("gs;Ñepe; cmpsb; setnz %0"

198 : "=qm" (
diff
), "+D" (
s1
), "+S" (
s2
), "+c" (
Àn
));

199  
diff
;

200 
	}
}

202 
ölöe
 
	$isdigô
(
ch
)

204  (
ch
 >= '0') && (ch <= '9');

205 
	}
}

208 
_íd
[];

209 *
HEAP
;

210 *
hóp_íd
;

211 
	#RESET_HEAP
(Ë((*)–
HEAP
 = 
_íd
 ))

	)

212 
ölöe
 *
	$__gë_hóp
(
size_t
 
s
, size_à
a
, size_à
n
)

214 *
tmp
;

216 
HEAP
 = (*)(((
size_t
)HEAP+(
a
-1)) & ~(a-1));

217 
tmp
 = 
HEAP
;

218 
HEAP
 +
s
*
n
;

219  
tmp
;

220 
	}
}

221 
	#GET_HEAP
(
ty≥
, 
n
Ë(—y≥ *)
	`__gë_hóp
(—y≥),
	`__Æignof__
—y≥),“)))

	)

223 
__ölöe__
 
	$hóp_‰ì
(
size_t
 
n
)

225  ()(
hóp_íd
-
HEAP
Ë>()
n
;

226 
	}
}

230 
	$c›y_to_fs
(
addr_t
 
d°
, *
§c
, 
size_t
 
Àn
)
	`__©åibuã__
((
	`ªg∑rm
(3)));

231 *
	$c›y_‰om_fs
(*
d°
, 
addr_t
 
§c
, 
size_t
 
Àn
)
	`__©åibuã__
((
	`ªg∑rm
(3)));

232 
	$c›y_to_gs
(
addr_t
 
d°
, *
§c
, 
size_t
 
Àn
)
	`__©åibuã__
((
	`ªg∑rm
(3)));

233 *
	$c›y_‰om_gs
(*
d°
, 
addr_t
 
§c
, 
size_t
 
Àn
)
	`__©åibuã__
((
	`ªg∑rm
(3)));

234 *
	$mem˝y
(*
d°
, *
§c
, 
size_t
 
Àngth
)
	`__©åibuã__
((
	`ªg∑rm
(3)));

235 *
	$mem£t
(*
d°
, 
c
, 
size_t
 
Àngth
)
	`__©åibuã__
((
	`ªg∑rm
(3)));

238 
	`puts
(const *);

239 
	`putch¨
();

240 
	`gëch¨
();

241 
	`kbd_Êush
();

242 
	`gëch¨_timeout
();

245 
	`°rcmp
(c⁄° *
°r1
, c⁄° *
°r2
);

246 
size_t
 
	`°∫Àn
(c⁄° *
s
, size_à
maxÀn
);

247 
	`©ou
(c⁄° *
s
);

250 
	`•rötf
(*
buf
, c⁄° *
fmt
, ...);

251 
	`v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

252 
	`¥ötf
(c⁄° *
fmt
, ...);

256 
	`quîy_≠m_bios
();

259 
	`cmdlöe_föd_›ti⁄
(c⁄° *
›ti⁄
, *
buf„r
, 
bufsize
);

262 
	`quîy_edd
();

265 
	`dëe˘_mem‹y
();

268 
	`quîy_mˇ
();

271 
	`£t_video
();

274 
	`veß_°‹e_edid
();

277 
	`quîy_voyagî
();

280 #i‚de‡
_ASM_BOOT_H


281 
	#_ASM_BOOT_H


	)

284 
	#DEF_INITSEG
 0x9000

	)

285 
	#DEF_SYSSEG
 0x1000

	)

286 
	#DEF_SETUPSEG
 0x9020

	)

287 
	#DEF_SYSSIZE
 0x7F00

	)

290 
	#NORMAL_VGA
 0xfff‡

	)

291 
	#EXTENDED_VGA
 0xff„

	)

292 
	#ASK_VGA
 0xfffd

	)

295 
	#LOAD_PHYSICAL_ADDR
 ((
CONFIG_PHYSICAL_START
 \

296 + (
CONFIG_PHYSICAL_ALIGN
 - 1)) \

297 & ~(
CONFIG_PHYSICAL_ALIGN
 - 1))

	)

	@boot/bootparam.h

1 #i‚de‡
_ASM_BOOTPARAM_H


2 
	#_ASM_BOOTPARAM_H


	)

4 
	~<öc/ty≥s.h
>

5 
	~<boŸ/s¸ìn_öfo.h
>

6 
	~<boŸ/≠m_bios.h
>

7 
	~<boŸ/edd.h
>

8 
	~<öc/e820.h
>

9 
	~<boŸ/i°.h
>

10 
	~<boŸ/edid.h
>

12 
	s£tup_hódî
 {

13 
__u8
 
	m£tup_£˘s
;

14 
__u16
 
	mroŸ_Êags
;

15 
__u32
 
	msyssize
;

16 
__u16
 
	møm_size
;

17 
	#RAMDISK_IMAGE_START_MASK
 0x07FF

	)

18 
	#RAMDISK_PROMPT_FLAG
 0x8000

	)

19 
	#RAMDISK_LOAD_FLAG
 0x4000

	)

20 
__u16
 
	mvid_mode
;

21 
__u16
 
	mroŸ_dev
;

22 
__u16
 
	mboŸ_Êag
;

23 
__u16
 
	mjump
;

24 
__u32
 
	mhódî
;

25 
__u16
 
	mvîsi⁄
;

26 
__u32
 
	mªÆmode_swtch
;

27 
__u16
 
	m°¨t_sys
;

28 
__u16
 
	mkî√l_vîsi⁄
;

29 
__u8
 
	mty≥_of_lﬂdî
;

30 
__u8
 
	mlﬂdÊags
;

31 
	#LOADED_HIGH
 (1<<0)

	)

32 
	#KEEP_SEGMENTS
 (1<<6)

	)

33 
	#CAN_USE_HEAP
 (1<<7)

	)

34 
__u16
 
	m£tup_move_size
;

35 
__u32
 
	mcode32_°¨t
;

36 
__u32
 
	mømdisk_image
;

37 
__u32
 
	mømdisk_size
;

38 
__u32
 
	mboŸ£˘_kludge
;

39 
__u16
 
	mhóp_íd_±r
;

40 
__u16
 
	m_∑d1
;

41 
__u32
 
	mcmd_löe_±r
;

42 
__u32
 
	möôrd_addr_max
;

43 
__u32
 
	mkî√l_Æignmít
;

44 
__u8
 
	mªloˇèbÀ_kî√l
;

45 
__u8
 
	m_∑d2
[3];

46 
__u32
 
	mcmdlöe_size
;

47 
__u32
 
	mh¨dw¨e_sub¨ch
;

48 
__u64
 
	mh¨dw¨e_sub¨ch_d©a
;

49 } 
__©åibuã__
((
∑cked
));

51 
	ssys_desc_èbÀ
 {

52 
__u16
 
	mÀngth
;

53 
__u8
 
	mèbÀ
[14];

56 
	sefi_öfo
 {

57 
__u32
 
	m_∑d1
;

58 
__u32
 
	mefi_sy°ab
;

59 
__u32
 
	mefi_memdesc_size
;

60 
__u32
 
	mefi_memdesc_vîsi⁄
;

61 
__u32
 
	mefi_memm≠
;

62 
__u32
 
	mefi_memm≠_size
;

63 
__u32
 
	m_∑d2
[2];

67 
	sboŸ_∑øms
 {

68 
s¸ìn_öfo
 
	ms¸ìn_öfo
;

69 
≠m_bios_öfo
 
	m≠m_bios_öfo
;

70 
__u8
 
	m_∑d2
[12];

71 
i°_öfo
 
	mi°_öfo
;

72 
__u8
 
	m_∑d3
[16];

73 
__u8
 
	mhd0_öfo
[16];

74 
__u8
 
	mhd1_öfo
[16];

75 
sys_desc_èbÀ
 
	msys_desc_èbÀ
;

76 
__u8
 
	m_∑d4
[144];

77 
edid_öfo
 
	medid_öfo
;

78 
efi_öfo
 
	mefi_öfo
;

79 
__u32
 
	mÆt_mem_k
;

80 
__u32
 
	ms¸©ch
;

81 
__u8
 
	me820_íåõs
;

82 
__u8
 
	meddbuf_íåõs
;

83 
__u8
 
	medd_mbr_sig_buf_íåõs
;

84 
__u8
 
	m_∑d6
[6];

85 
£tup_hódî
 
	mhdr
;

86 
__u8
 
	m_∑d7
[0x290-0x1f1-(
£tup_hódî
)];

87 
__u32
 
	medd_mbr_sig_buf„r
[
EDD_MBR_SIG_MAX
];

88 
e820íåy
 
	me820_m≠
[
E820MAX
];

89 
__u8
 
	m_∑d8
[48];

90 
edd_öfo
 
	meddbuf
[
EDDMAXNR
];

91 
__u8
 
	m_∑d9
[276];

92 } 
__©åibuã__
((
∑cked
));

	@boot/code16gcc.h

15 #i‚de‡
__ASSEMBLY__


16 
__asm
(".code16gcc");

	@boot/csetup.c

1 
	~<öc/x86.h
>

2 
	~<öc/boŸ1.h
>

3 
	~<boŸ/code16gcc.h
>

5 
sysx_öfo
 
	gsysx_öfo
;

22 
	$íabÀ_a20_Á°
()

24 
uöt8_t
 
p‹t_a
;

26 
p‹t_a
 = 
	`öb
(0x92);

27 
p‹t_a
 |= 0x02;

28 
p‹t_a
 &= ~0x01;

29 
	`outb
(0x92, 
p‹t_a
);

30 
	}
}

32 
	$ã°
()

35 
	}
}

38 
	$dëe˘_mem‹y_e820
()

40 
cou¡
 = 0;

41 
uöt32_t
 
√xt
 = 0;

42 
uöt32_t
 
size
, 
id
;

43 
uöt8_t
 
îr
;

44 
e820íåy
 *
desc
 = 
sysx_öfo
.
e820_m≠
;

47 
size
 = (
e820íåy
);

52 
__asm
 volatile("int $0x15; setc %0"

53 : "=d" (
îr
), "+b" (
√xt
), "˜" (
id
), "+c" (
size
),

54 "=m" (*
desc
)

55 : "D" (
desc
), "d" (
SMAP
), "a" (0xe820));

62 i‡(
id
 !
SMAP
) {

63 
cou¡
 = 0;

67 i‡(
îr
)

70 
cou¡
++;

71 
desc
++;

72 } 
√xt
 && 
cou¡
 < 
E820MAX
);

74 
sysx_öfo
.
e820_√¡s
 = 
cou¡
;

75 
	}
}

78 
	$dëe˘_mem‹y_e801
()

80 
uöt16_t
 
ax
, 
bx
, 
cx
, 
dx
;

81 
uöt8_t
 
îr
;

83 
bx
 = 
cx
 = 
dx
 = 0;

84 
ax
 = 0xe801;

85 
__asm
 volatile("stc; int $0x15; cli; setc %0"

86 : "=m" (
îr
), "+a" (
ax
), "+b" (
bx
), "+c" (
cx
), "+d" (
dx
));

88 i‡(
îr
 || 
cx
 > 15*1024) {

89 
cx
 = 0;

90 
dx
 = 0;

97 
sysx_öfo
.
extmem_kb
 = (
cx
 =15*1024Ë? (
dx
 << 6)+cx : cx;

98 
	}
}

101 
	$c£tup
()

107 
uöt16_t
 
i
 = 0; i < (
sysx_öfo
); i++)

108 ((
uöt8_t
 *Ë&
sysx_öfo
)[
i
] = 0;

110 
uöt32_t
 
cmd_löe_±r
;

111 
	`íabÀ_a20_Á°
();

112 
	`dëe˘_mem‹y_e820
();

113 
	`dëe˘_mem‹y_e801
();

118 
sysx_öfo
.
cmdlöe
 = 
cmd_löe_±r
;

119 
__asm
 volatile("movw $(0x0200 + '0'), %fs:(0x02)");

120 
	}
}

	@boot/diskboot.c

1 
	~<öc/x86.h
>

2 
	~<öc/boŸ.h
>

3 
	~<öc/ñf32.h
>

4 
	~<öc/ñf64.h
>

26 
	#ELF_EHDR
 
Elf64_Ehdr


	)

27 
	#ELF_PHDR
 
Elf64_Phdr


	)

28 
	#ELF_MACH
 
ELF_MACH_AMD64


	)

30 
	#SECTSIZE
 512

	)

31 
	#ELFHDR
 ((
ELF_EHDR
 *) 0x100000)

32 
	#ELFOFF
 0

	)

35 
	$waôdisk
()

38 (
	`öb
(0x1F7) & 0xC0) != 0x40)

40 
	}
}

43 
	$ªad£˘
(*
d°
, 
uöt32_t
 
off£t
)

46 
	`waôdisk
();

48 
	`outb
(0x1F2, 1);

49 
	`outb
(0x1F3, 
off£t
);

50 
	`outb
(0x1F4, 
off£t
 >> 8);

51 
	`outb
(0x1F5, 
off£t
 >> 16);

52 
	`outb
(0x1F6, (
off£t
 >> 24) | 0xE0);

53 
	`outb
(0x1F7, 0x20);

56 
	`waôdisk
();

59 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
 / 4);

60 
	}
}

65 
	$ªad£g
(
uöt32_t
 
va
, uöt32_à
cou¡
, uöt32_à
off£t
)

67 
uöt32_t
 
íd_va
;

69 
va
 &= 0xFFFFFF;

70 
íd_va
 = 
va
 + 
cou¡
;

73 
va
 &~(
SECTSIZE
 - 1);

76 
off£t
 = (off£à/ 
SECTSIZE
) + 12;

81 
va
 < 
íd_va
) {

82 
	`ªad£˘
((
uöt8_t
 *Ë
va
, 
off£t
);

83 
va
 +
SECTSIZE
;

84 
off£t
++;

86 
	}
}

89 
	$boŸmaö
(
uöt32_t
 
kîn_£c
)

91 
ELF_PHDR
 *
ph
;

92 
i
;

94 
	`ªad£g
((
uöt32_t
Ë0x100000, 
SECTSIZE
 * (
kîn_£c
), 
ELFOFF
);

96 
	`__asm__
("ljmp $0x8,$0x101000"::);

98 
	`ªad£g
((
uöt32_t
Ë
ELFHDR
, 
SECTSIZE
 * 8, 
ELFOFF
);

100 i‡(
ELFHDR
->
e_magic
 !
ELF_MAGIC_LE
 ||

101 
ELFHDR
->
e_machöe
 !
ELF_MACH_AMD64
)

102 
bad
;

105 
ph
 = (
ELF_PHDR
 *Ë((
uöt8_t
 *Ë
ELFHDR
 + ELFHDR->
e_phoff
);

106 
i
 = 
ELFHDR
->
e_phnum
; i != 0; i--) {

107 
	`ªad£g
(
ph
->
p_vaddr
,Öh->
p_memsz
,Öh->
p_off£t
 + 
ELFOFF
);

108 
ph
 = (
ELF_PHDR
 *Ë((
uöt8_t
 *Ëph + 
ELFHDR
->
e_phítsize
);

115 
uöt32_t
 
ecx
 = 
ELFHDR
->
e_íåy
 & 0xFFFFFF;

116 
	`__asm__
("jm∞*%%ecx": :"c"(
ecx
));

118 
bad
:

119 
	`outw
(0x8A00, 0x8A00);

120 
	`outw
(0x8A00, 0x8AE0);

123 
	}
}

	@boot/edd.c

16 
	~"code16gcc.h
"

17 
	~"boŸ.h
"

18 
	~<boŸ/edd.h
>

19 
	~<öc/ty≥s.h
>

24 
	$ªad_mbr
(
u8
 
devno
, *
buf
)

26 
u16
 
ax
, 
bx
, 
cx
, 
dx
;

28 
ax
 = 0x0201;

29 
cx
 = 0x0001;

30 
dx
 = 
devno
;

31 
bx
 = (
size_t
)
buf
;

32 
asm
 volatile("pushfl; stc; int $0x13; setc %%al;Öopfl"

33 : "+a" (
ax
), "+c" (
cx
), "+d" (
dx
), "+b" (
bx
)

36  -(
u8
)
ax
;

37 
	}
}

39 
u32
 
	$ªad_mbr_sig
(
u8
 
devno
, 
edd_öfo
 *
ei
, 
u32
 *
mbrsig
)

41 
£˘‹_size
;

42 *
mbrbuf_±r
, *
mbrbuf_íd
;

43 
u32
 
buf_ba£
, 
mbr_ba£
;

44 
_íd
[];

46 
£˘‹_size
 = 
ei
->
∑øms
.
byãs_≥r_£˘‹
;

47 i‡(!
£˘‹_size
)

48 
£˘‹_size
 = 512;

51 
buf_ba£
 = (
	`ds
(Ë<< 4Ë+ (
u32
)&
_íd
;

52 
mbr_ba£
 = (
buf_ba£
+
£˘‹_size
-1) & ~(sector_size-1);

53 
mbrbuf_±r
 = 
_íd
 + (
mbr_ba£
-
buf_ba£
);

54 
mbrbuf_íd
 = 
mbrbuf_±r
 + 
£˘‹_size
;

57 i‡(!(
boŸ_∑øms
.
hdr
.
lﬂdÊags
 & 
CAN_USE_HEAP
))

59 i‡(
mbrbuf_íd
 > (*)(
size_t
)
boŸ_∑øms
.
hdr
.
hóp_íd_±r
)

62 i‡(
	`ªad_mbr
(
devno
, 
mbrbuf_±r
))

65 *
mbrsig
 = *(
u32
 *)&
mbrbuf_±r
[
EDD_MBR_SIG_OFFSET
];

67 
	}
}

69 
	$gë_edd_öfo
(
u8
 
devno
, 
edd_öfo
 *
ei
)

71 
u16
 
ax
, 
bx
, 
cx
, 
dx
, 
di
;

73 
	`mem£t
(
ei
, 0, (
edd_öfo
));

78 
ax
 = 0x4100;

79 
bx
 = 
EDDMAGIC1
;

80 
dx
 = 
devno
;

83 
	`asm
("pushfl; stc; int $0x13; setc %%al;Öopfl"

84 : "+a" (
ax
), "+b" (
bx
), "=c" (
cx
), "+d" (
dx
)

87 i‡((
u8
)
ax
)

90 i‡(
bx
 !
EDDMAGIC2
)

93 
ei
->
devi˚
 = 
devno
;

94 
ei
->
vîsi⁄
 = 
ax
 >> 8;

95 
ei
->
öãrÁ˚_suµ‹t
 = 
cx
;

99 
ei
->
∑øms
.
Àngth
 = (ei->params);

100 
ax
 = 0x4800;

101 
dx
 = 
devno
;

102 
	`asm
("pushfl; int $0x13;Öopfl"

103 : "+a" (
ax
), "+d" (
dx
), "=m" (
ei
->
∑øms
)

104 : "S" (&
ei
->
∑øms
)

110 
ax
 = 0x0800;

111 
dx
 = 
devno
;

112 
di
 = 0;

113 
	`asm
("pushw %%es; "

117 : "+a" (
ax
), "=b" (
bx
), "=c" (
cx
), "+d" (
dx
), "+D" (
di
)

120 i‡((
u8
)
ax
 == 0) {

121 
ei
->
Àgacy_max_cylödî
 = (
cx
 >> 8) + ((cx & 0xc0) << 2);

122 
ei
->
Àgacy_max_hód
 = 
dx
 >> 8;

123 
ei
->
Àgacy_£˘‹s_≥r_åack
 = 
cx
 & 0x3f;

127 
	}
}

129 
	$quîy_edd
()

131 
edd¨g
[8];

132 
do_mbr
 = 1;

133 #ifde‡
CONFIG_EDD_OFF


134 
do_edd
 = 0;

136 
do_edd
 = 1;

138 
devno
;

139 
edd_öfo
 
ei
, *
edp
;

140 
u32
 *
mbΩå
;

142 
do_edd
 = 1;

144 
edp
 = 
boŸ_∑øms
.
eddbuf
;

145 
mbΩå
 = 
boŸ_∑øms
.
edd_mbr_sig_buf„r
;

147 i‡(!
do_edd
)

150 
devno
 = 0x80; devnÿ< 0x80+
EDD_MBR_SIG_MAX
; devno++) {

155 
	`gë_edd_öfo
(
devno
, &
ei
);

157 i‡(
boŸ_∑øms
.
eddbuf_íåõs
 < 
EDDMAXNR
) {

158 
	`mem˝y
(
edp
, &
ei
, Éi);

159 
edp
++;

160 
boŸ_∑øms
.
eddbuf_íåõs
++;

163 i‡(
do_mbr
 && !
	`ªad_mbr_sig
(
devno
, &
ei
, 
mbΩå
++))

164 
boŸ_∑øms
.
edd_mbr_sig_buf_íåõs
 = 
devno
-0x80+1;

166 
	}
}

	@boot/edd.h

31 
	~<öc/ty≥s.h
>

34 #i‚de‡
_LINUX_EDD_H


35 
	#_LINUX_EDD_H


	)

37 
	#EDDNR
 0x1e9

	)

39 
	#EDDBUF
 0xd00

	)

40 
	#EDDMAXNR
 6

	)

41 
	#EDDEXTSIZE
 8

	)

42 
	#EDDPARMSIZE
 74

	)

43 
	#CHECKEXTENSIONSPRESENT
 0x41

	)

44 
	#GETDEVICEPARAMETERS
 0x48

	)

45 
	#LEGACYGETDEVICEPARAMETERS
 0x08

	)

46 
	#EDDMAGIC1
 0x55AA

	)

47 
	#EDDMAGIC2
 0xAA55

	)

50 
	#READ_SECTORS
 0x02

	)

51 
	#EDD_MBR_SIG_OFFSET
 0x1B8

	)

52 
	#EDD_MBR_SIG_BUF
 0x290

	)

53 
	#EDD_MBR_SIG_MAX
 16

	)

54 
	#EDD_MBR_SIG_NR_BUF
 0x1ó

	)

57 #i‚de‡
__ASSEMBLY__


59 
	#EDD_EXT_FIXED_DISK_ACCESS
 (1 << 0)

	)

60 
	#EDD_EXT_DEVICE_LOCKING_AND_EJECTING
 (1 << 1)

	)

61 
	#EDD_EXT_ENHANCED_DISK_DRIVE_SUPPORT
 (1 << 2)

	)

62 
	#EDD_EXT_64BIT_EXTENSIONS
 (1 << 3)

	)

64 
	#EDD_INFO_DMA_BOUNDARY_ERROR_TRANSPARENT
 (1 << 0)

	)

65 
	#EDD_INFO_GEOMETRY_VALID
 (1 << 1)

	)

66 
	#EDD_INFO_REMOVABLE
 (1 << 2)

	)

67 
	#EDD_INFO_WRITE_VERIFY
 (1 << 3)

	)

68 
	#EDD_INFO_MEDIA_CHANGE_NOTIFICATION
 (1 << 4)

	)

69 
	#EDD_INFO_LOCKABLE
 (1 << 5)

	)

70 
	#EDD_INFO_NO_MEDIA_PRESENT
 (1 << 6)

	)

71 
	#EDD_INFO_USE_INT13_FN50
 (1 << 7)

	)

73 
	sedd_devi˚_∑øms
 {

74 
__u16
 
	mÀngth
;

75 
__u16
 
	möfo_Êags
;

76 
__u32
 
	mnum_deÁu…_cylödîs
;

77 
__u32
 
	mnum_deÁu…_hóds
;

78 
__u32
 
	m£˘‹s_≥r_åack
;

79 
__u64
 
	mnumbî_of_£˘‹s
;

80 
__u16
 
	mbyãs_≥r_£˘‹
;

81 
__u32
 
	md±e_±r
;

82 
__u16
 
	mkey
;

83 
__u8
 
	mdevi˚_∑th_öfo_Àngth
;

84 
__u8
 
	mª£rved2
;

85 
__u16
 
	mª£rved3
;

86 
__u8
 
	mho°_bus_ty≥
[4];

87 
__u8
 
	möãrÁ˚_ty≥
[8];

90 
__u16
 
	mba£_addªss
;

91 
__u16
 
	mª£rved1
;

92 
__u32
 
	mª£rved2
;

93 } 
__©åibuã__
 ((
∑cked
)Ë
	miß
;

95 
__u8
 
	mbus
;

96 
__u8
 
	m¶Ÿ
;

97 
__u8
 
	mfun˘i⁄
;

98 
__u8
 
	mch™√l
;

99 
__u32
 
	mª£rved
;

100 } 
__©åibuã__
 ((
∑cked
)Ë
	mpci
;

103 
__u64
 
	mª£rved
;

104 } 
__©åibuã__
 ((
∑cked
)Ë
	mibnd
;

106 
__u64
 
	mª£rved
;

107 } 
__©åibuã__
 ((
∑cked
)Ë
	mx¥s
;

109 
__u64
 
	mª£rved
;

110 } 
__©åibuã__
 ((
∑cked
)Ë
	mhçt
;

112 
__u64
 
	mª£rved
;

113 } 
__©åibuã__
 ((
∑cked
)Ë
	munknown
;

114 } 
	möãrÁ˚_∑th
;

117 
__u8
 
	mdevi˚
;

118 
__u8
 
	mª£rved1
;

119 
__u16
 
	mª£rved2
;

120 
__u32
 
	mª£rved3
;

121 
__u64
 
	mª£rved4
;

122 } 
__©åibuã__
 ((
∑cked
)Ë
	m©a
;

124 
__u8
 
	mdevi˚
;

125 
__u8
 
	mlun
;

126 
__u8
 
	mª£rved1
;

127 
__u8
 
	mª£rved2
;

128 
__u32
 
	mª£rved3
;

129 
__u64
 
	mª£rved4
;

130 } 
__©åibuã__
 ((
∑cked
)Ë
	m©≠i
;

132 
__u16
 
	mid
;

133 
__u64
 
	mlun
;

134 
__u16
 
	mª£rved1
;

135 
__u32
 
	mª£rved2
;

136 } 
__©åibuã__
 ((
∑cked
)Ë
	mscsi
;

138 
__u64
 
	m£rül_numbî
;

139 
__u64
 
	mª£rved
;

140 } 
__©åibuã__
 ((
∑cked
)Ë
	musb
;

142 
__u64
 
	meui
;

143 
__u64
 
	mª£rved
;

144 } 
__©åibuã__
 ((
∑cked
)Ë
	mi1394
;

146 
__u64
 
	mwwid
;

147 
__u64
 
	mlun
;

148 } 
__©åibuã__
 ((
∑cked
)Ë
	mfibª
;

150 
__u64
 
	midítôy_èg
;

151 
__u64
 
	mª£rved
;

152 } 
__©åibuã__
 ((
∑cked
)Ë
	mi2o
;

154 
__u32
 
	m¨øy_numbî
;

155 
__u32
 
	mª£rved1
;

156 
__u64
 
	mª£rved2
;

157 } 
__©åibuã__
 ((
∑cked
)Ë
	møid
;

159 
__u8
 
	mdevi˚
;

160 
__u8
 
	mª£rved1
;

161 
__u16
 
	mª£rved2
;

162 
__u32
 
	mª£rved3
;

163 
__u64
 
	mª£rved4
;

164 } 
__©åibuã__
 ((
∑cked
)Ë
	mßè
;

166 
__u64
 
	mª£rved1
;

167 
__u64
 
	mª£rved2
;

168 } 
__©åibuã__
 ((
∑cked
)Ë
	munknown
;

169 } 
	mdevi˚_∑th
;

170 
__u8
 
	mª£rved4
;

171 
__u8
 
	mchecksum
;

172 } 
__©åibuã__
 ((
∑cked
));

174 
	sedd_öfo
 {

175 
__u8
 
	mdevi˚
;

176 
__u8
 
	mvîsi⁄
;

177 
__u16
 
	möãrÁ˚_suµ‹t
;

178 
__u16
 
	mÀgacy_max_cylödî
;

179 
__u8
 
	mÀgacy_max_hód
;

180 
__u8
 
	mÀgacy_£˘‹s_≥r_åack
;

181 
edd_devi˚_∑øms
 
	m∑øms
;

182 } 
__©åibuã__
 ((
∑cked
));

184 
	sedd
 {

185 
	mmbr_sig«tuª
[
EDD_MBR_SIG_MAX
];

186 
edd_öfo
 
	medd_öfo
[
EDDMAXNR
];

187 
	mmbr_sig«tuª_ƒ
;

188 
	medd_öfo_ƒ
;

191 #ifde‡
__KERNEL__


192 
edd
Édd;

	@boot/edid.h

1 #i‚de‡
__löux_video_edid_h__


2 
	#__löux_video_edid_h__


	)

5 
	sedid_öfo
 {

6 
	mdummy
[128];

9 
edid_öfo
Édid_info;

	@boot/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

24 
	#_IOC_SIZEBITS
 14

	)

25 
	#_IOC_DIRBITS
 2

	)

27 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

28 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

29 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

30 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

32 
	#_IOC_NRSHIFT
 0

	)

33 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

34 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

35 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

40 
	#_IOC_NONE
 0U

	)

41 
	#_IOC_WRITE
 1U

	)

42 
	#_IOC_READ
 2U

	)

44 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

45 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

46 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

47 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

48 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

51 
__övÆid_size_¨gumít_f‹_IOC
;

52 
	#_IOC_TYPECHECK
(
t
) \

53 (((
t
) == (t[1]) && \

54 (
t
Ë< (1 << 
_IOC_SIZEBITS
)) ? \

55 (
t
Ë: 
__övÆid_size_¨gumít_f‹_IOC
)

	)

58 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

59 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

60 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

61 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

62 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

63 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

64 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

67 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

68 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

69 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

70 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

74 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

75 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

76 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

77 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

78 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@boot/ist.h

1 #i‚de‡
_ASM_IST_H


2 
	#_ASM_IST_H


	)

20 
	~<öc/ty≥s.h
>

22 
	si°_öfo
 {

23 
__u32
 
	msig«tuª
;

24 
__u32
 
	mcomm™d
;

25 
__u32
 
	mevít
;

26 
__u32
 
	m≥rf_Àvñ
;

30 
i°_öfo
 ist_info;

	@boot/linux_param.c

16 
	~"code16gcc.h
"

17 
	~"boŸ.h
"

19 
boŸ_∑øms
 boŸ_∑øm†
__©åibuã__
((
Æig√d
(16)));

21 *
	gHEAP
 = 
_íd
;

22 *
	ghóp_íd
 = 
_íd
;

24 
	#OLD_CL_MAGIC
 0xA33F

	)

25 
	#OLD_CL_ADDRESS
 0x020

	)

26 
	#NEW_CL_POINTER
 0x228

	)

67 
	$keybﬂrd_£t_ª≥©
()

69 
u16
 
ax
 = 0x0305;

70 
u16
 
bx
 = 0;

71 
asm
 volatile("int $0x16"

72 : "+a" (
ax
), "+b" (
bx
)

74 
	}
}

79 
	$quîy_i°
()

81 
	`asm
("int $0x15"

82 : "˜" (
boŸ_∑øms
.
i°_öfo
.
sig«tuª
),

83 "=b" (
boŸ_∑øms
.
i°_öfo
.
comm™d
),

84 "=c" (
boŸ_∑øms
.
i°_öfo
.
evít
),

85 "=d" (
boŸ_∑øms
.
i°_öfo
.
≥rf_Àvñ
)

88 
	}
}

93 
	$£t_bios_mode
()

95 
u32
 
óx
, 
ebx
;

97 
óx
 = 0xec00;

98 
ebx
 = 2;

99 
asm
 volatile("int $0x15"

100 : "+a" (
óx
), "+b" (
ebx
)

102 
	}
}

104 
	$gë_∑øms
()

117 
svm_sig
[];

119 if(
svm_sig
[0] == '^')

121 
	`¥ötf
("i'm guest\n");

125 
uöt16_t
 
i
 = 0; i < (
boŸ_∑øms
); i ++)

126 ((
uöt8_t
 *Ë&
boŸ_∑øms
)[
i
] = 0;

129 
	`£t_bios_mode
();

131 
	`keybﬂrd_£t_ª≥©
();

134 
	`dëe˘_mem‹y
();

137 
	`quîy_i°
();

140 
	`£t_video
();

143 
	`quîy_mˇ
();

146 
	`quîy_≠m_bios
();

149 
	`quîy_voyagî
();

152 
	`quîy_edd
();

156 
	}
}

	@boot/main.c

1 
	~<öc/ty≥s.h
>

2 
	~<öc/x86.h
>

3 
	~<öc/ñf32.h
>

4 
	~<öc/ñf64.h
>

38 
	#SECTSIZE
 512

	)

39 
	#ELFHDR
 ((
Elf
 *) 0x10000)

40 

	)

41 
ªad£˘
(*, 
uöt32_t
);

42 
ªad£g
(
uöt32_t
, uint32_t, uint32_t);

45 
	$boŸmaö
()

47 
Proghdr
 *
ph
, *
ïh
;

50 
	`ªad£g
((
uöt32_t
Ë
ELFHDR
, 
SECTSIZE
*8, 0);

53 i‡(
ELFHDR
->
e_magic
 !
ELF_MAGIC_LE
)

54 
bad
;

57 
ph
 = (
Proghdr
 *Ë((
uöt8_t
 *Ë
ELFHDR
 + ELFHDR->
e_phoff
);

58 
ïh
 = 
ph
 + 
ELFHDR
->
e_phnum
;

59 ; 
ph
 < 
ïh
;Öh++)

60 
	`ªad£g
(
ph
->
p_va
,Öh->
p_memsz
,Öh->
p_off£t
);

64 (((*)()Ë(
ELFHDR
->
e_íåy
 & 0xFFFFFF))();

66 
bad
:

67 
	`outw
(0x8A00, 0x8A00);

68 
	`outw
(0x8A00, 0x8E00);

71 
	}
}

77 
	$ªad£g
(
uöt32_t
 
va
, uöt32_à
cou¡
, uöt32_à
off£t
)

79 
uöt32_t
 
íd_va
;

81 
va
 &= 0xFFFFFF;

82 
íd_va
 = 
va
 + 
cou¡
;

85 
va
 &~(
SECTSIZE
 - 1);

88 
off£t
 = (off£à/ 
SECTSIZE
) + 14;

93 
va
 < 
íd_va
) {

94 
	`ªad£˘
((
uöt8_t
*Ë
va
, 
off£t
);

95 
va
 +
SECTSIZE
;

96 
off£t
++;

98 
	}
}

101 
	$waôdisk
()

104 (
	`öb
(0x1F7) & 0xC0) != 0x40)

106 
	}
}

109 
	$ªad£˘
(*
d°
, 
uöt32_t
 
off£t
)

112 
	`waôdisk
();

114 
	`outb
(0x1F2, 1);

115 
	`outb
(0x1F3, 
off£t
);

116 
	`outb
(0x1F4, 
off£t
 >> 8);

117 
	`outb
(0x1F5, 
off£t
 >> 16);

118 
	`outb
(0x1F6, (
off£t
 >> 24) | 0xE0);

119 
	`outb
(0x1F7, 0x20);

122 
	`waôdisk
();

125 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
/4);

126 
	}
}

	@boot/mca.c

16 
	~"code16gcc.h
"

17 
	~"boŸ.h
"

18 
	~<öc/ty≥s.h
>

21 
	$quîy_mˇ
()

23 
u8
 
îr
;

24 
u16
 
es
, 
bx
, 
Àn
;

26 
	`asm
("pushw %%es ; "

31 : "˜cd" (
îr
), "˜cdSD" (
es
), "=b" (
bx
)

34 i‡(
îr
)

37 
	`£t_fs
(
es
);

38 
Àn
 = 
	`rdfs16
(
bx
);

40 i‡(
Àn
 > (
boŸ_∑øms
.
sys_desc_èbÀ
))

41 
Àn
 = (
boŸ_∑øms
.
sys_desc_èbÀ
);

43 
	`c›y_‰om_fs
(&
boŸ_∑øms
.
sys_desc_èbÀ
, 
bx
, 
Àn
);

45 
	}
}

	@boot/mem.c

5 
	~<öc/boŸ.h
>

7 
	#PML1
 ((*)0xa000)

	)

8 
	#PML2
 ((*)0xb000)

	)

9 
	#PML3
 ((*)0xc000)

	)

10 
	#PML4
 ((*)0xd000)

	)

12 
	$£tup_∑gëabÀ
()

14 
i
;

15 *
PML1
 = 0xb000;

16 *
PML2
 = 0xc000;

17 *
PML3
 = 0xd000;

18 
i
 = 0; i < 0x22; i ++)

20 *(
PML4
 + 
i
)= i*1000+0x7;

22 
	}
}

24 
	$_£t_¸4
(
vÆ
)

26 
__asm
 
	`__vﬁ©ûe
("mov»%%¸4, %%óx"::(
¸4
));

28 
	}
}

30 
	$l⁄gmode_jmp
()

32 
	`_£t_¸4
();

33 
	`_£t_¸3
();

34 
	`_£t_e„r
();

35 
	`_£t_¸0
();

36 
__asm
 
	`__vﬁ©ûe
("ljm∞$0x8, %0":"=m"(
l⁄g_m
):);

37 
	}
}

	@boot/memory.c

15 
	~"boŸ.h
"

17 
	#SMAP
 0x534d4150

	)

19 
	$dëe˘_mem‹y_e820
()

21 
cou¡
 = 0;

22 
u32
 
√xt
 = 0;

23 
u32
 
size
, 
id
;

24 
u8
 
îr
;

25 
e820íåy
 *
desc
 = 
boŸ_∑øms
.
e820_m≠
;

28 
size
 = (
e820íåy
);

33 
	`asm
("int $0x15; setc %0"

34 : "=d" (
îr
), "+b" (
√xt
), "˜" (
id
), "+c" (
size
),

35 "=m" (*
desc
)

36 : "D" (
desc
), "d" (
SMAP
), "a" (0xe820)

42 i‡(
îr
)

50 i‡(
id
 !
SMAP
) {

51 
cou¡
 = 0;

55 
cou¡
++;

56 
desc
++;

57 } 
√xt
 && 
cou¡
 < 
	`ARRAY_SIZE
(
boŸ_∑øms
.
e820_m≠
));

59  
boŸ_∑øms
.
e820_íåõs
 = 
cou¡
;

60 
	}
}

62 
	$dëe˘_mem‹y_e801
()

64 
u16
 
ax
, 
bx
, 
cx
, 
dx
;

65 
u8
 
îr
;

67 
bx
 = 
cx
 = 
dx
 = 0;

68 
ax
 = 0xe801;

69 
	`asm
("stc; int $0x15; setc %0"

70 : "=m" (
îr
), "+a" (
ax
), "+b" (
bx
), "+c" (
cx
), "+d" (
dx
));

72 i‡(
îr
)

76 i‡(
cx
 || 
dx
) {

77 
ax
 = 
cx
;

78 
bx
 = 
dx
;

81 i‡(
ax
 > 15*1024)

88 
boŸ_∑øms
.
Æt_mem_k
 = (
ax
 =15*1024Ë? (
dx
 << 6)+ax :áx;

91 
	}
}

93 
	$dëe˘_mem‹y_88
()

95 
u16
 
ax
;

96 
u8
 
îr
;

98 
ax
 = 0x8800;

99 
	`asm
("°c; i¡ $0x15; së¯%0" : "=bcdm" (
îr
), "+a" (
ax
));

101 
boŸ_∑øms
.
s¸ìn_öfo
.
ext_mem_k
 = 
ax
;

103  -
îr
;

104 
	}
}

106 
	$dëe˘_mem‹y
()

108 
îr
 = -1;

110 i‡(
	`dëe˘_mem‹y_e820
() > 0)

111 
îr
 = 0;

113 i‡(!
	`dëe˘_mem‹y_e801
())

114 
îr
 = 0;

116 i‡(!
	`dëe˘_mem‹y_88
())

117 
îr
 = 0;

119  
îr
;

120 
	}
}

	@boot/printf.c

20 
	~"boŸ.h
"

22 
	$skù_©oi
(c⁄° **
s
)

24 
i
 = 0;

26 
	`isdigô
(**
s
))

27 
i
 = i * 10 + *((*
s
)++) - '0';

28  
i
;

29 
	}
}

31 
	#ZEROPAD
 1

	)

32 
	#SIGN
 2

	)

33 
	#PLUS
 4

	)

34 
	#SPACE
 8

	)

35 
	#LEFT
 16

	)

36 
	#SPECIAL
 32

	)

37 
	#LARGE
 64

	)

39 
	#do_div
(
n
,
ba£
) ({ \

40 
__ªs
; \

41 
__ªs
 = ((Ë
n
Ë% (Ë
ba£
; \

42 
n
 = ((ËnË/ (Ë
ba£
; \

43 
__ªs
; })

	)

45 *
	$numbî
(*
°r
, 
num
, 
ba£
, 
size
, 
¥ecisi⁄
,

46 
ty≥
)

48 
c
, 
sign
, 
tmp
[66];

49 c⁄° *
digôs
 = "0123456789abcdefghijklmnopqrstuvwxyz";

50 
i
;

52 i‡(
ty≥
 & 
LARGE
)

53 
digôs
 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

54 i‡(
ty≥
 & 
LEFT
)

55 
ty≥
 &~
ZEROPAD
;

56 i‡(
ba£
 < 2 || base > 36)

58 
c
 = (
ty≥
 & 
ZEROPAD
) ? '0' : ' ';

59 
sign
 = 0;

60 i‡(
ty≥
 & 
SIGN
) {

61 i‡(
num
 < 0) {

62 
sign
 = '-';

63 
num
 = -num;

64 
size
--;

65 } i‡(
ty≥
 & 
PLUS
) {

66 
sign
 = '+';

67 
size
--;

68 } i‡(
ty≥
 & 
SPACE
) {

69 
sign
 = ' ';

70 
size
--;

73 i‡(
ty≥
 & 
SPECIAL
) {

74 i‡(
ba£
 == 16)

75 
size
 -= 2;

76 i‡(
ba£
 == 8)

77 
size
--;

79 
i
 = 0;

80 i‡(
num
 == 0)

81 
tmp
[
i
++] = '0';

83 
num
 != 0)

84 
tmp
[
i
++] = 
digôs
[
	`do_div
(
num
, 
ba£
)];

85 i‡(
i
 > 
¥ecisi⁄
)

86 
¥ecisi⁄
 = 
i
;

87 
size
 -
¥ecisi⁄
;

88 i‡(!(
ty≥
 & (
ZEROPAD
 + 
LEFT
)))

89 
size
-- > 0)

90 *
°r
++ = ' ';

91 i‡(
sign
)

92 *
°r
++ = 
sign
;

93 i‡(
ty≥
 & 
SPECIAL
) {

94 i‡(
ba£
 == 8)

95 *
°r
++ = '0';

96 i‡(
ba£
 == 16) {

97 *
°r
++ = '0';

98 *
°r
++ = 
digôs
[33];

101 i‡(!(
ty≥
 & 
LEFT
))

102 
size
-- > 0)

103 *
°r
++ = 
c
;

104 
i
 < 
¥ecisi⁄
--)

105 *
°r
++ = '0';

106 
i
-- > 0)

107 *
°r
++ = 
tmp
[
i
];

108 
size
-- > 0)

109 *
°r
++ = ' ';

110  
°r
;

111 
	}
}

113 
	$v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

115 
Àn
;

116 
num
;

117 
i
, 
ba£
;

118 *
°r
;

119 c⁄° *
s
;

121 
Êags
;

123 
fõld_width
;

124 
¥ecisi⁄
;

126 
quÆifõr
;

128 
°r
 = 
buf
; *
fmt
; ++fmt) {

129 i‡(*
fmt
 != '%') {

130 *
°r
++ = *
fmt
;

135 
Êags
 = 0;

136 
ª≥©
:

137 ++
fmt
;

138 *
fmt
) {

140 
Êags
 |
LEFT
;

141 
ª≥©
;

143 
Êags
 |
PLUS
;

144 
ª≥©
;

146 
Êags
 |
SPACE
;

147 
ª≥©
;

149 
Êags
 |
SPECIAL
;

150 
ª≥©
;

152 
Êags
 |
ZEROPAD
;

153 
ª≥©
;

157 
fõld_width
 = -1;

158 i‡(
	`isdigô
(*
fmt
))

159 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

160 i‡(*
fmt
 == '*') {

161 ++
fmt
;

163 
fõld_width
 = 
	`va_¨g
(
¨gs
, );

164 i‡(
fõld_width
 < 0) {

165 
fõld_width
 = -field_width;

166 
Êags
 |
LEFT
;

171 
¥ecisi⁄
 = -1;

172 i‡(*
fmt
 == '.') {

173 ++
fmt
;

174 i‡(
	`isdigô
(*
fmt
))

175 
¥ecisi⁄
 = 
	`skù_©oi
(&
fmt
);

176 i‡(*
fmt
 == '*') {

177 ++
fmt
;

179 
¥ecisi⁄
 = 
	`va_¨g
(
¨gs
, );

181 i‡(
¥ecisi⁄
 < 0)

182 
¥ecisi⁄
 = 0;

186 
quÆifõr
 = -1;

187 i‡(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'L') {

188 
quÆifõr
 = *
fmt
;

189 ++
fmt
;

193 
ba£
 = 10;

195 *
fmt
) {

197 i‡(!(
Êags
 & 
LEFT
))

198 --
fõld_width
 > 0)

199 *
°r
++ = ' ';

200 *
°r
++ = ()
	`va_¨g
(
¨gs
, );

201 --
fõld_width
 > 0)

202 *
°r
++ = ' ';

206 
s
 = 
	`va_¨g
(
¨gs
, *);

207 
Àn
 = 
	`°∫Àn
(
s
, 
¥ecisi⁄
);

209 i‡(!(
Êags
 & 
LEFT
))

210 
Àn
 < 
fõld_width
--)

211 *
°r
++ = ' ';

212 
i
 = 0; i < 
Àn
; ++i)

213 *
°r
++ = *
s
++;

214 
Àn
 < 
fõld_width
--)

215 *
°r
++ = ' ';

219 i‡(
fõld_width
 == -1) {

220 
fõld_width
 = 2 * (*);

221 
Êags
 |
ZEROPAD
;

223 
°r
 = 
	`numbî
(str,

224 ()
	`va_¨g
(
¨gs
, *), 16,

225 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

229 i‡(
quÆifõr
 == 'l') {

230 *
ù
 = 
	`va_¨g
(
¨gs
, *);

231 *
ù
 = (
°r
 - 
buf
);

233 *
ù
 = 
	`va_¨g
(
¨gs
, *);

234 *
ù
 = (
°r
 - 
buf
);

239 *
°r
++ = '%';

244 
ba£
 = 8;

248 
Êags
 |
LARGE
;

250 
ba£
 = 16;

255 
Êags
 |
SIGN
;

260 *
°r
++ = '%';

261 i‡(*
fmt
)

262 *
°r
++ = *
fmt
;

264 --
fmt
;

267 i‡(
quÆifõr
 == 'l')

268 
num
 = 
	`va_¨g
(
¨gs
, );

269 i‡(
quÆifõr
 == 'h') {

270 
num
 = ()
	`va_¨g
(
¨gs
, );

271 i‡(
Êags
 & 
SIGN
)

272 
num
 = ()num;

273 } i‡(
Êags
 & 
SIGN
)

274 
num
 = 
	`va_¨g
(
¨gs
, );

276 
num
 = 
	`va_¨g
(
¨gs
, );

277 
°r
 = 
	`numbî
(°r, 
num
, 
ba£
, 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

279 *
°r
 = '\0';

280  
°r
 - 
buf
;

281 
	}
}

283 
	$•rötf
(*
buf
, c⁄° *
fmt
, ...)

285 
va_li°
 
¨gs
;

286 
i
;

288 
	`va_°¨t
(
¨gs
, 
fmt
);

289 
i
 = 
	`v•rötf
(
buf
, 
fmt
, 
¨gs
);

290 
	`va_íd
(
¨gs
);

291  
i
;

292 
	}
}

294 
	$¥ötf
(c⁄° *
fmt
, ...)

296 
¥ötf_buf
[1024];

297 
va_li°
 
¨gs
;

298 
¥öãd
;

300 
	`va_°¨t
(
¨gs
, 
fmt
);

301 
¥öãd
 = 
	`v•rötf
(
¥ötf_buf
, 
fmt
, 
¨gs
);

302 
	`va_íd
(
¨gs
);

304 
	`puts
(
¥ötf_buf
);

306  
¥öãd
;

307 
	}
}

	@boot/screen_info.h

1 #i‚de‡
_SCREEN_INFO_H


2 
	#_SCREEN_INFO_H


	)

4 
	~<öc/ty≥s.h
>

10 
	ss¸ìn_öfo
 {

11 
__u8
 
	m‹ig_x
;

12 
__u8
 
	m‹ig_y
;

13 
__u16
 
	mext_mem_k
;

14 
__u16
 
	m‹ig_video_∑ge
;

15 
__u8
 
	m‹ig_video_mode
;

16 
__u8
 
	m‹ig_video_cﬁs
;

17 
__u16
 
	munu£d2
;

18 
__u16
 
	m‹ig_video_ega_bx
;

19 
__u16
 
	munu£d3
;

20 
__u8
 
	m‹ig_video_löes
;

21 
__u8
 
	m‹ig_video_isVGA
;

22 
__u16
 
	m‹ig_video_poöts
;

25 
__u16
 
	mlfb_width
;

26 
__u16
 
	mlfb_height
;

27 
__u16
 
	mlfb_dïth
;

28 
__u32
 
	mlfb_ba£
;

29 
__u32
 
	mlfb_size
;

30 
__u16
 
	m˛_magic
, 
	m˛_off£t
;

31 
__u16
 
	mlfb_löñígth
;

32 
__u8
 
	mªd_size
;

33 
__u8
 
	mªd_pos
;

34 
__u8
 
	mgªí_size
;

35 
__u8
 
	mgªí_pos
;

36 
__u8
 
	mblue_size
;

37 
__u8
 
	mblue_pos
;

38 
__u8
 
	mrsvd_size
;

39 
__u8
 
	mrsvd_pos
;

40 
__u16
 
	mveßpm_£g
;

41 
__u16
 
	mveßpm_off
;

42 
__u16
 
	m∑ges
;

43 
__u16
 
	mveß_©åibuãs
;

44 
__u32
 
	mˇ∑bûôõs
;

45 
__u8
 
	m_ª£rved
[6];

46 } 
__©åibuã__
((
∑cked
));

48 
	#VIDEO_TYPE_MDA
 0x10

	)

49 
	#VIDEO_TYPE_CGA
 0x11

	)

50 
	#VIDEO_TYPE_EGAM
 0x20

	)

51 
	#VIDEO_TYPE_EGAC
 0x21

	)

52 
	#VIDEO_TYPE_VGAC
 0x22

	)

53 
	#VIDEO_TYPE_VLFB
 0x23

	)

55 
	#VIDEO_TYPE_PICA_S3
 0x30

	)

56 
	#VIDEO_TYPE_MIPS_G364
 0x31

	)

57 
	#VIDEO_TYPE_SGI
 0x33

	)

59 
	#VIDEO_TYPE_TGAC
 0x40

	)

61 
	#VIDEO_TYPE_SUN
 0x50

	)

62 
	#VIDEO_TYPE_SUNPCI
 0x51

	)

64 
	#VIDEO_TYPE_PMAC
 0x60

	)

66 
	#VIDEO_TYPE_EFI
 0x70

	)

68 #ifde‡
__KERNEL__


69 
s¸ìn_öfo
 screen_info;

71 
	#ORIG_X
 (
s¸ìn_öfo
.
‹ig_x
)

	)

72 
	#ORIG_Y
 (
s¸ìn_öfo
.
‹ig_y
)

	)

73 
	#ORIG_VIDEO_MODE
 (
s¸ìn_öfo
.
‹ig_video_mode
)

	)

74 
	#ORIG_VIDEO_COLS
 (
s¸ìn_öfo
.
‹ig_video_cﬁs
)

	)

75 
	#ORIG_VIDEO_EGA_BX
 (
s¸ìn_öfo
.
‹ig_video_ega_bx
)

	)

76 
	#ORIG_VIDEO_LINES
 (
s¸ìn_öfo
.
‹ig_video_löes
)

	)

77 
	#ORIG_VIDEO_ISVGA
 (
s¸ìn_öfo
.
‹ig_video_isVGA
)

	)

78 
	#ORIG_VIDEO_POINTS
 (
s¸ìn_öfo
.
‹ig_video_poöts
)

	)

	@boot/string.c

16 
	~"code16gcc.h
"

17 
	~"boŸ.h
"

18 
	~<öc/ty≥s.h
>

19 
	~<°ddef.h
>

20 
	~<°d¨g.h
>

22 
	$°rcmp
(c⁄° *
°r1
, c⁄° *
°r2
)

24 c⁄° *
s1
 = (c⁄° *)
°r1
;

25 c⁄° *
s2
 = (c⁄° *)
°r2
;

26 
dñè
 = 0;

28 *
s1
 || *
s2
) {

29 
dñè
 = *
s2
 - *
s1
;

30 i‡(
dñè
)

31  
dñè
;

32 
s1
++;

33 
s2
++;

36 
	}
}

38 
size_t
 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
maxÀn
)

40 c⁄° *
es
 = 
s
;

41 *
es
 && 
maxÀn
) {

42 
es
++;

43 
maxÀn
--;

46  (
es
 - 
s
);

47 
	}
}

49 
	$©ou
(c⁄° *
s
)

51 
i
 = 0;

52 
	`isdigô
(*
s
))

53 
i
 = i * 10 + (*
s
++ - '0');

54  
i
;

55 
	}
}

58 * 
__©åibuã__
((
	$ªg∑rm
(3))Ë
	$mem˝y
(*
d°
, *
§c
, 
size_t
 
n
)

60 c⁄° *
s
;

61 *
d
;

63 
s
 = 
§c
;

64 
d
 = 
d°
;

65 i‡(
s
 < 
d
 && s + 
n
 > d) {

66 
s
 +
n
;

67 
d
 +
n
;

68 
n
-- > 0)

69 *--
d
 = *--
s
;

71 
n
-- > 0)

72 *
d
++ = *
s
++;

74  
d°
;

75 
	}
}

77 * 
__©åibuã__
((
	$ªg∑rm
(3))Ë
	$mem£t
(*
d°
, 
c
, 
size_t
 
Àn
)

79 *
p
;

80 
p
 = (*)
d°
;

81 
u16
 
i
 = 0; i < 
Àn
; i ++)

82 
p
[
i
] = ()
c
;

84  (
d°
);

85 
	}
}

	@boot/tty.c

17 
	~"code16gcc.h
"

18 
	~"boŸ.h
"

25 
	$putch¨
(
ch
)

27 
c
 = 
ch
;

29 i‡(
c
 == '\n')

30 
	`putch¨
('\r');

34 
asm
 volatile("pushal;Öushw %%ds; int $0x10;Öopw %%ds;Öopal"

35 : : "b" (0x0007), "c" (0x0001), "a" (0x0e00|
ch
));

36 
	}
}

38 
	$puts
(c⁄° *
°r
)

40 
n
 = 0;

41 *
°r
) {

42 
	`putch¨
(*
°r
++);

43 
n
++;

45 
	}
}

52 
u8
 
	$gëtime
()

54 
u16
 
ax
 = 0x0200;

55 
u16
 
cx
, 
dx
;

57 
asm
 volatile("int $0x1a"

58 : "+a" (
ax
), "=c" (
cx
), "=d" (
dx
)

61  
dx
 >> 8;

62 
	}
}

67 
	$gëch¨
()

69 
u16
 
ax
 = 0;

70 
asm
 vﬁ©ûe("öà$0x16" : "+a" (
ax
));

72  
ax
 & 0xff;

73 
	}
}

75 
	$kbd_≥ndög
()

77 
u8
 
≥ndög
;

78 
asm
 volatile("int $0x16; setnz %0"

79 : "Ùm" (
≥ndög
)

81  
≥ndög
;

82 
	}
}

84 
	$kbd_Êush
()

87 i‡(!
	`kbd_≥ndög
())

89 
	`gëch¨
();

91 
	}
}

93 
	$gëch¨_timeout
()

95 
˙t
 = 30;

96 
t0
, 
t1
;

98 
t0
 = 
	`gëtime
();

100 
˙t
) {

101 i‡(
	`kbd_≥ndög
())

102  
	`gëch¨
();

104 
t1
 = 
	`gëtime
();

105 i‡(
t0
 !
t1
) {

106 
˙t
--;

107 
t0
 = 
t1
;

112 
	}
}

	@boot/vesa.h

12 
	~<öc/ty≥s.h
>

15 #i‚de‡
BOOT_VESA_H


16 
	#BOOT_VESA_H


	)

19 
u16
 
	moff
, 
	m£g
;

20 } 
	tÁr_±r
;

23 
	sveß_gíîÆ_öfo
 {

24 
u32
 
	msig«tuª
;

25 
u16
 
	mvîsi⁄
;

26 
Ár_±r
 
	mvíd‹_°rög
;

27 
u32
 
	mˇ∑bûôõs
;

28 
Ár_±r
 
	mvideo_mode_±r
;

29 
u16
 
	mtŸÆ_mem‹y
;

31 
u16
 
	m€m_so·w¨e_ªv
;

32 
Ár_±r
 
	m€m_víd‹_«me_±r
;

33 
Ár_±r
 
	m€m_¥odu˘_«me_±r
;

34 
Ár_±r
 
	m€m_¥odu˘_ªv_±r
;

36 
u8
 
	mª£rved
[222];

37 
u8
 
	m€m_d©a
[256];

38 } 
__©åibuã__
 ((
∑cked
));

40 
	#VESA_MAGIC
 ('V' + ('E' << 8Ë+ ('S' << 16Ë+ ('A' << 24))

	)

41 
	#VBE2_MAGIC
 ('V' + ('B' << 8Ë+ ('E' << 16Ë+ ('2' << 24))

	)

43 
	sveß_mode_öfo
 {

44 
u16
 
	mmode_©å
;

45 
u8
 
	mwö_©å
[2];

46 
u16
 
	mwö_gøö
;

47 
u16
 
	mwö_size
;

48 
u16
 
	mwö_£g
[2];

49 
Ár_±r
 
	mwö_scheme
;

50 
u16
 
	mlogiˇl_sˇn
;

52 
u16
 
	mh_ªs
;

53 
u16
 
	mv_ªs
;

54 
u8
 
	mch¨_width
;

55 
u8
 
	mch¨_height
;

56 
u8
 
	mmem‹y_∂™es
;

57 
u8
 
	mbµ
;

58 
u8
 
	mb™ks
;

59 
u8
 
	mmem‹y_œyout
;

60 
u8
 
	mb™k_size
;

61 
u8
 
	mimage_∂™es
;

62 
u8
 
	m∑ge_fun˘i⁄
;

64 
u8
 
	mrmask
;

65 
u8
 
	mΩos
;

66 
u8
 
	mgmask
;

67 
u8
 
	mgpos
;

68 
u8
 
	mbmask
;

69 
u8
 
	mbpos
;

70 
u8
 
	mªsv_mask
;

71 
u8
 
	mªsv_pos
;

72 
u8
 
	mdcm_öfo
;

74 
u32
 
	mlfb_±r
;

75 
u32
 
	moffs¸ìn_±r
;

76 
u16
 
	moffs¸ìn_size
;

78 
u8
 
	mª£rved
[206];

79 } 
__©åibuã__
 ((
∑cked
));

	@boot/video-bios.c

18 
	~"code16gcc.h
"

19 
	~"boŸ.h
"

20 
	~"video.h
"

22 
__videoˇrd
 
	gvideo_bios
;

25 
£t_bios_mode
(
u8
 
mode
);

27 
	$bios_£t_mode
(
mode_öfo
 *
mi
)

29  
	`£t_bios_mode
(
mi
->
mode
 - 
VIDEO_FIRST_BIOS
);

30 
	}
}

32 
	$£t_bios_mode
(
u8
 
mode
)

34 
u16
 
ax
;

35 
u8
 
√w_mode
;

37 
ax
 = 
mode
;

38 
asm
 vﬁ©ûe(
INT10


39 : "+a" (
ax
)

42 
ax
 = 0x0f00;

43 
asm
 vﬁ©ûe(
INT10


44 : "+a" (
ax
)

47 
do_ª°‹e
 = 1;

48 
√w_mode
 = 
ax
 & 0x7f;

50 i‡(
√w_mode
 =
mode
)

53 i‡(
√w_mode
 !
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_video_mode
) {

57 
ax
 = 
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_video_mode
;

58 
asm
 vﬁ©ûe(
INT10


59 : "+a" (
ax
)

63 
	}
}

65 
	$bios_¥obe
()

67 
u8
 
mode
;

68 
u8
 
ßved_mode
 = 
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_video_mode
;

69 
u16
 
¸tc
;

70 
mode_öfo
 *
mi
;

71 
nmodes
 = 0;

73 i‡(
ad≠ãr
 !
ADAPTER_EGA
 &&ád≠ã∏!
ADAPTER_VGA
)

76 
	`£t_fs
(0);

77 
¸tc
 = 
	`vga_¸tc
();

79 
video_bios
.
modes
 = 
	`GET_HEAP
(
mode_öfo
, 0);

81 
mode
 = 0x14; mode <= 0x7f; mode++) {

82 i‡(!
	`hóp_‰ì
((
mode_öfo
)))

85 i‡(
	`mode_deföed
(
VIDEO_FIRST_BIOS
+
mode
))

88 i‡(
	`£t_bios_mode
(
mode
))

94 i‡(
	`ö_idx
(0x3c0, 0x10) & 0x01)

98 i‡(
	`ö_idx
(0x3ce, 0x06) & 0x01)

102 i‡(
	`ö_idx
(
¸tc
, 0x0f))

105 
mi
 = 
	`GET_HEAP
(
mode_öfo
, 1);

106 
mi
->
mode
 = 
VIDEO_FIRST_BIOS
+mode;

107 
mi
->
x
 = 
	`rdfs16
(0x44a);

108 
mi
->
y
 = 
	`rdfs8
(0x484)+1;

109 
nmodes
++;

112 
	`£t_bios_mode
(
ßved_mode
);

114  
nmodes
;

115 
	}
}

117 
__videoˇrd
 
	gvideo_bios
 =

119 .
ˇrd_«me
 = "BIOS (scanned)",

120 .
	g¥obe
 = 
bios_¥obe
,

121 .
	g£t_mode
 = 
bios_£t_mode
,

122 .
	gunß„
 = 1,

123 .
	gxmode_fú°
 = 
VIDEO_FIRST_BIOS
,

124 .
	gxmode_n
 = 0x80,

	@boot/video-vesa.c

16 
	~"code16gcc.h
"

17 
	~"boŸ.h
"

18 
	~"video.h
"

19 
	~"veß.h
"

22 
veß_gíîÆ_öfo
 
	gvgöfo
;

23 
veß_mode_öfo
 
	gvmöfo
;

25 
__videoˇrd
 
	gvideo_veß
;

27 
veß_°‹e_mode_∑øms_gøphics
();

29 
	$veß_¥obe
()

31 #i‡
	`deföed
(
CONFIG_VIDEO_VESA
Ë|| deföed(
CONFIG_FIRMWARE_EDID
)

32 
u16
 
ax
, 
cx
, 
di
;

33 
u16
 
mode
;

34 
addr_t
 
mode_±r
;

35 
mode_öfo
 *
mi
;

36 
nmodes
 = 0;

38 
video_veß
.
modes
 = 
	`GET_HEAP
(
mode_öfo
, 0);

40 
vgöfo
.
sig«tuª
 = 
VBE2_MAGIC
;

42 
ax
 = 0x4f00;

43 
di
 = (
size_t
)&
vgöfo
;

44 
	`asm
(
INT10


45 : "+a" (
ax
), "+D" (
di
), "=m" (
vgöfo
)

48 i‡(
ax
 != 0x004f ||

49 
vgöfo
.
sig«tuª
 !
VESA_MAGIC
 ||

50 
vgöfo
.
vîsi⁄
 < 0x0102)

53 #ifde‡
CONFIG_VIDEO_VESA


54 
	`£t_fs
(
vgöfo
.
video_mode_±r
.
£g
);

55 
mode_±r
 = 
vgöfo
.
video_mode_±r
.
off
;

57 (
mode
 = 
	`rdfs16
(
mode_±r
)) != 0xffff) {

58 
mode_±r
 += 2;

60 i‡(!
	`hóp_‰ì
((
mode_öfo
)))

63 i‡(
mode
 & ~0x1ff)

66 
	`mem£t
(&
vmöfo
, 0,  vminfo);

68 
ax
 = 0x4f01;

69 
cx
 = 
mode
;

70 
di
 = (
size_t
)&
vmöfo
;

71 
	`asm
(
INT10


72 : "+a" (
ax
), "+c" (
cx
), "+D" (
di
), "=m" (
vmöfo
)

75 i‡(
ax
 != 0x004f)

78 i‡((
vmöfo
.
mode_©å
 & 0x15) == 0x05) {

81 
mi
 = 
	`GET_HEAP
(
mode_öfo
, 1);

82 
mi
->
mode
 = modê+ 
VIDEO_FIRST_VESA
;

83 
mi
->
x
 = 
vmöfo
.
h_ªs
;

84 
mi
->
y
 = 
vmöfo
.
v_ªs
;

85 
nmodes
++;

86 } i‡((
vmöfo
.
mode_©å
 & 0x99) == 0x99) {

87 #ifde‡
CONFIG_FB


93 
mi
 = 
	`GET_HEAP
(
mode_öfo
, 1);

94 
mi
->
mode
 = modê+ 
VIDEO_FIRST_VESA
;

95 
mi
->
x
 = mi->
y
 = 0;

96 
nmodes
++;

101  
nmodes
;

105 
	}
}

107 
	$veß_£t_mode
(
mode_öfo
 *
mode
)

109 
u16
 
ax
, 
bx
, 
cx
, 
di
;

110 
is_gøphic
;

111 
u16
 
veß_mode
 = 
mode
->modê- 
VIDEO_FIRST_VESA
;

113 
	`mem£t
(&
vmöfo
, 0,  vminfo);

115 
ax
 = 0x4f01;

116 
cx
 = 
veß_mode
;

117 
di
 = (
size_t
)&
vmöfo
;

118 
	`asm
(
INT10


119 : "+a" (
ax
), "+c" (
cx
), "+D" (
di
), "=m" (
vmöfo
)

122 i‡(
ax
 != 0x004f)

125 i‡((
vmöfo
.
mode_©å
 & 0x15) == 0x05) {

127 
is_gøphic
 = 0;

128 } i‡((
vmöfo
.
mode_©å
 & 0x99) == 0x99) {

130 
is_gøphic
 = 1;

131 
veß_mode
 |= 0x4000;

137 
ax
 = 0x4f02;

138 
bx
 = 
veß_mode
;

139 
di
 = 0;

140 
asm
 vﬁ©ûe(
INT10


141 : "+a" (
ax
), "+b" (
bx
), "+D" (
di
)

144 i‡(
ax
 != 0x004f)

147 
gøphic_mode
 = 
is_gøphic
;

148 i‡(!
is_gøphic
) {

150 
f‹˚_x
 = 
mode
->
x
;

151 
f‹˚_y
 = 
mode
->
y
;

152 
do_ª°‹e
 = 1;

155 
	`veß_°‹e_mode_∑øms_gøphics
();

159 
	}
}

163 
	$veß_dac_£t_8bôs
()

165 
u8
 
dac_size
 = 6;

168 i‡(
vgöfo
.
ˇ∑bûôõs
 & 1) {

169 
u16
 
ax
, 
bx
;

171 
ax
 = 0x4f08;

172 
bx
 = 0x0800;

173 
asm
 vﬁ©ûe(
INT10


174 : "+a" (
ax
), "+b" (
bx
)

177 i‡(
ax
 == 0x004f)

178 
dac_size
 = 
bx
 >> 8;

182 
boŸ_∑øms
.
s¸ìn_öfo
.
ªd_size
 = 
dac_size
;

183 
boŸ_∑øms
.
s¸ìn_öfo
.
gªí_size
 = 
dac_size
;

184 
boŸ_∑øms
.
s¸ìn_öfo
.
blue_size
 = 
dac_size
;

185 
boŸ_∑øms
.
s¸ìn_öfo
.
rsvd_size
 = 
dac_size
;

187 
boŸ_∑øms
.
s¸ìn_öfo
.
ªd_pos
 = 0;

188 
boŸ_∑øms
.
s¸ìn_öfo
.
gªí_pos
 = 0;

189 
boŸ_∑øms
.
s¸ìn_öfo
.
blue_pos
 = 0;

190 
boŸ_∑øms
.
s¸ìn_öfo
.
rsvd_pos
 = 0;

191 
	}
}

194 
	$veß_°‹e_pm_öfo
()

196 
u16
 
ax
, 
bx
, 
di
, 
es
;

198 
ax
 = 0x4f0a;

199 
bx
 = 
di
 = 0;

200 
	`asm
("pushw %%es; "
INT10
"; movw %%es,%0;Öopw %%es"

201 : "=d" (
es
), "+a" (
ax
), "+b" (
bx
), "+D" (
di
)

204 i‡(
ax
 != 0x004f)

207 
boŸ_∑øms
.
s¸ìn_öfo
.
veßpm_£g
 = 
es
;

208 
boŸ_∑øms
.
s¸ìn_öfo
.
veßpm_off
 = 
di
;

209 
	}
}

214 
	$veß_°‹e_mode_∑øms_gøphics
()

217 
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_video_isVGA
 = 0x23;

220 
boŸ_∑øms
.
s¸ìn_öfo
.
veß_©åibuãs
 = 
vmöfo
.
mode_©å
;

221 
boŸ_∑øms
.
s¸ìn_öfo
.
lfb_löñígth
 = 
vmöfo
.
logiˇl_sˇn
;

222 
boŸ_∑øms
.
s¸ìn_öfo
.
lfb_width
 = 
vmöfo
.
h_ªs
;

223 
boŸ_∑øms
.
s¸ìn_öfo
.
lfb_height
 = 
vmöfo
.
v_ªs
;

224 
boŸ_∑øms
.
s¸ìn_öfo
.
lfb_dïth
 = 
vmöfo
.
bµ
;

225 
boŸ_∑øms
.
s¸ìn_öfo
.
∑ges
 = 
vmöfo
.
image_∂™es
;

226 
boŸ_∑øms
.
s¸ìn_öfo
.
lfb_ba£
 = 
vmöfo
.
lfb_±r
;

227 
	`mem˝y
(&
boŸ_∑øms
.
s¸ìn_öfo
.
ªd_size
,

228 &
vmöfo
.
rmask
, 8);

231 
boŸ_∑øms
.
s¸ìn_öfo
.
lfb_size
 = 
vgöfo
.
tŸÆ_mem‹y
;

233 i‡(
vmöfo
.
bµ
 <= 8)

234 
	`veß_dac_£t_8bôs
();

236 
	`veß_°‹e_pm_öfo
();

237 
	}
}

243 
	$veß_°‹e_edid
()

245 #ifde‡
CONFIG_FIRMWARE_EDID


246 
u16
 
ax
, 
bx
, 
cx
, 
dx
, 
di
;

249 
	`mem£t
(&
boŸ_∑øms
.
edid_öfo
, 0x13,  boot_params.edid_info);

251 i‡(
vgöfo
.
vîsi⁄
 < 0x0200)

254 
ax
 = 0x4f15;

255 
bx
 = 0x0000;

256 
cx
 = 0;

257 
di
 = 0;

262 
	`asm
("pushw %%es; movw %2,%%es; "
INT10
";Öopw %%es"

263 : "+a" (
ax
), "+b" (
bx
)

264 : "c" (
cx
), "D" (
di
)

267 i‡(
ax
 != 0x004f)

273 
ax
 = 0x4f15;

274 
bx
 = 0x0001;

275 
cx
 = 0;

276 
dx
 = 0;

277 
di
 =(
size_t
Ë&
boŸ_∑øms
.
edid_öfo
;

278 
	`asm
(
INT10


279 : "+a" (
ax
), "+b" (
bx
), "+d" (
dx
), "=m" (
boŸ_∑øms
.
edid_öfo
)

280 : "c" (
cx
), "D" (
di
)

283 
	}
}

285 
__videoˇrd
 
	gvideo_veß
 =

287 .
ˇrd_«me
 = "VESA",

288 .
	g¥obe
 = 
veß_¥obe
,

289 .
	g£t_mode
 = 
veß_£t_mode
,

290 .
	gxmode_fú°
 = 
VIDEO_FIRST_VESA
,

291 .
	gxmode_n
 = 0x200,

	@boot/video-vga.c

16 
	~"code16gcc.h
"

17 
	~"boŸ.h
"

18 
	~"video.h
"

20 
mode_öfo
 
	gvga_modes
[] = {

21 { 
VIDEO_80x25
, 80, 25 },

22 { 
VIDEO_8POINT
, 80, 50 },

23 { 
VIDEO_80x43
, 80, 43 },

24 { 
VIDEO_80x28
, 80, 28 },

25 { 
VIDEO_80x30
, 80, 30 },

26 { 
VIDEO_80x34
, 80, 34 },

27 { 
VIDEO_80x60
, 80, 60 },

30 
mode_öfo
 
	gega_modes
[] = {

31 { 
VIDEO_80x25
, 80, 25 },

32 { 
VIDEO_8POINT
, 80, 43 },

35 
mode_öfo
 
	gcga_modes
[] = {

36 { 
VIDEO_80x25
, 80, 25 },

39 
__videoˇrd
 
	gvideo_vga
;

42 
u8
 
	$vga_£t_basic_mode
()

44 
u16
 
ax
;

45 
u8
 
rows
;

46 
u8
 
mode
;

48 #ifde‡
CONFIG_VIDEO_400_HACK


49 i‡(
ad≠ãr
 >
ADAPTER_VGA
) {

50 
asm
 vﬁ©ûe(
INT10


56 
ax
 = 0x0f00;

57 
asm
 vﬁ©ûe(
INT10


58 : "+a" (
ax
)

61 
mode
 = (
u8
)
ax
;

63 
	`£t_fs
(0);

64 
rows
 = 
	`rdfs8
(0x484);

66 #i‚de‡
CONFIG_VIDEO_400_HACK


67 i‡((
ax
 == 0x5003 ||áx == 0x5007) &&

68 (
rows
 == 0 ||Ñows == 24))

69  
mode
;

72 i‡(
mode
 != 3 && mode != 7)

73 
mode
 = 3;

76 
ax
 = 
mode
;

77 
asm
 vﬁ©ûe(
INT10


78 : "+a" (
ax
)

80 
do_ª°‹e
 = 1;

81  
mode
;

82 
	}
}

84 
	$vga_£t_8f⁄t
()

89 
asm
 vﬁ©ûe(
INT10
 : : "a" (0x1112), "b" (0));

92 
asm
 vﬁ©ûe(
INT10
 : : "a" (0x1200), "b" (0x20));

95 
asm
 vﬁ©ûe(
INT10
 : : "a" (0x1201), "b" (0x34));

98 
asm
 vﬁ©ûe(
INT10
 : : "a" (0x0100), "c" (0x0607));

99 
	}
}

101 
	$vga_£t_14f⁄t
()

106 
asm
 vﬁ©ûe(
INT10
 : : "a" (0x1111), "b" (0));

109 
asm
 vﬁ©ûe(
INT10
 : : "a" (0x1201), "b" (0x34));

112 
asm
 vﬁ©ûe(
INT10
 : : "a" (0x0100), "c" (0x0b0c));

113 
	}
}

115 
	$vga_£t_80x43
()

120 
asm
 vﬁ©ûe(
INT10
 : : "a" (0x1201), "b" (0x30));

123 
asm
 vﬁ©ûe(
INT10
 : : "a" (0x0003));

125 
	`vga_£t_8f⁄t
();

126 
	}
}

129 
u16
 
	$vga_¸tc
()

131  (
	`öb
(0x3cc) & 1) ? 0x3d4 : 0x3b4;

132 
	}
}

134 
	$vga_£t_480_sˇ∆öes
(
íd
)

136 
u16
 
¸tc
;

137 
u8
 
c£l
;

139 
¸tc
 = 
	`vga_¸tc
();

141 
	`out_idx
(0x0c, 
¸tc
, 0x11);

142 
	`out_idx
(0x0b, 
¸tc
, 0x06);

143 
	`out_idx
(0x3e, 
¸tc
, 0x07);

144 
	`out_idx
(0xó, 
¸tc
, 0x10);

145 
	`out_idx
(
íd
, 
¸tc
, 0x12);

146 
	`out_idx
(0xe7, 
¸tc
, 0x15);

147 
	`out_idx
(0x04, 
¸tc
, 0x16);

148 
c£l
 = 
	`öb
(0x3cc);

149 
c£l
 &= 0x0d;

150 
c£l
 |= 0xe2;

151 
	`outb
(
c£l
, 0x3cc);

152 
	}
}

154 
	$vga_£t_80x30
()

156 
	`vga_£t_480_sˇ∆öes
(0xdf);

157 
	}
}

159 
	$vga_£t_80x34
()

161 
	`vga_£t_14f⁄t
();

162 
	`vga_£t_480_sˇ∆öes
(0xdb);

163 
	}
}

165 
	$vga_£t_80x60
()

167 
	`vga_£t_8f⁄t
();

168 
	`vga_£t_480_sˇ∆öes
(0xdf);

169 
	}
}

171 
	$vga_£t_mode
(
mode_öfo
 *
mode
)

174 
	`vga_£t_basic_mode
();

177 
f‹˚_x
 = 
mode
->
x
;

178 
f‹˚_y
 = 
mode
->
y
;

180 
mode
->mode) {

181 
VIDEO_80x25
:

183 
VIDEO_8POINT
:

184 
	`vga_£t_8f⁄t
();

186 
VIDEO_80x43
:

187 
	`vga_£t_80x43
();

189 
VIDEO_80x28
:

190 
	`vga_£t_14f⁄t
();

192 
VIDEO_80x30
:

193 
	`vga_£t_80x30
();

195 
VIDEO_80x34
:

196 
	`vga_£t_80x34
();

198 
VIDEO_80x60
:

199 
	`vga_£t_80x60
();

204 
	}
}

211 
	$vga_¥obe
()

213 c⁄° *
ˇrd_«me
[] = {

216 
mode_öfo
 *
mode_li°s
[] = {

217 
cga_modes
,

218 
ega_modes
,

219 
vga_modes
,

221 
mode_cou¡
[] = {

222 (
cga_modes
)/(
mode_öfo
),

223 (
ega_modes
)/(
mode_öfo
),

224 (
vga_modes
)/(
mode_öfo
),

226 
u8
 
vga_Êag
;

228 
	`asm
(
INT10


229 : "=b" (
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_video_ega_bx
)

234 i‡((
u8
)
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_video_ega_bx
 != 0x10) {

236 
	`asm
(
INT10


237 : "˜" (
vga_Êag
)

241 i‡(
vga_Êag
 == 0x1a) {

242 
ad≠ãr
 = 
ADAPTER_VGA
;

243 
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_video_isVGA
 = 1;

245 
ad≠ãr
 = 
ADAPTER_EGA
;

248 
ad≠ãr
 = 
ADAPTER_CGA
;

251 
video_vga
.
modes
 = 
mode_li°s
[
ad≠ãr
];

252 
video_vga
.
ˇrd_«me
 = c¨d_«me[
ad≠ãr
];

253  
mode_cou¡
[
ad≠ãr
];

254 
	}
}

256 
__videoˇrd
 
	gvideo_vga
 =

258 .
ˇrd_«me
 = "VGA",

259 .
	g¥obe
 = 
vga_¥obe
,

260 .
	g£t_mode
 = 
vga_£t_mode
,

	@boot/video.c

16 
	~"code16gcc.h
"

17 
	~"boŸ.h
"

18 
	~"video.h
"

19 
	~"veß.h
"

24 
ˇrd_öfo
 
	gˇrds
[];

29 
	gad≠ãr
;

30 
u16
 
	gvideo_£gmít
;

31 
	gf‹˚_x
, 
	gf‹˚_y
;

33 
	gdo_ª°‹e
 = 0;

34 
	ggøphic_mode
;

36 
	$°‹e_curs‹_posôi⁄
()

38 
u16
 
cuΩos
;

39 
u16
 
ax
, 
bx
;

41 
ax
 = 0x0300;

42 
bx
 = 0;

43 
	`asm
(
INT10


44 : "=d" (
cuΩos
), "+a" (
ax
), "+b" (
bx
)

47 
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_x
 = 
cuΩos
;

48 
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_y
 = 
cuΩos
 >> 8;

49 
	}
}

51 
	$°‹e_video_mode
()

53 
u16
 
ax
, 
∑ge
;

57 
ax
 = 0x0f00;

58 
	`asm
(
INT10


59 : "+a" (
ax
), "=b" (
∑ge
)

63 
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_video_mode
 = 
ax
 & 0x7f;

64 
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_video_∑ge
 = 
∑ge
 >> 8;

65 
	}
}

73 
	$°‹e_mode_∑øms
()

75 
u16
 
f⁄t_size
;

76 
x
, 
y
;

80 i‡(
gøphic_mode
)

83 
	`°‹e_curs‹_posôi⁄
();

84 
	`°‹e_video_mode
();

86 i‡(
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_video_mode
 == 0x07) {

88 
video_£gmít
 = 0xb000;

91 
video_£gmít
 = 0xb800;

94 
	`£t_fs
(0);

95 
f⁄t_size
 = 
	`rdfs16
(0x485);

96 
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_video_poöts
 = 
f⁄t_size
;

98 
x
 = 
	`rdfs16
(0x44a);

99 
y
 = (
ad≠ãr
 =
ADAPTER_CGA
Ë? 25 : 
	`rdfs8
(0x484)+1;

101 i‡(
f‹˚_x
)

102 
x
 = 
f‹˚_x
;

103 i‡(
f‹˚_y
)

104 
y
 = 
f‹˚_y
;

106 
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_video_cﬁs
 = 
x
;

107 
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_video_löes
 = 
y
;

108 
	}
}

111 
	$¥obe_ˇrds
(
unß„
)

113 
ˇrd_öfo
 *
ˇrd
;

114 
u8
 
¥obed
[2];

116 i‡(
¥obed
[
unß„
])

119 
¥obed
[
unß„
] = 1;

121 
ˇrd
 = 
video_ˇrds
; c¨d < 
video_ˇrds_íd
; card++) {

122 i‡(
ˇrd
->
unß„
 == unsafe) {

123 i‡(
ˇrd
->
¥obe
)

124 
ˇrd
->
nmodes
 = c¨d->
	`¥obe
();

126 
ˇrd
->
nmodes
 = 0;

129 
	}
}

132 
	$mode_deföed
(
u16
 
mode
)

134 
ˇrd_öfo
 *
ˇrd
;

135 
mode_öfo
 *
mi
;

136 
i
;

138 
ˇrd
 = 
video_ˇrds
; c¨d < 
video_ˇrds_íd
; card++) {

139 
mi
 = 
ˇrd
->
modes
;

140 
i
 = 0; i < 
ˇrd
->
nmodes
; i++, 
mi
++) {

141 i‡(
mi
->
mode
 == mode)

147 
	}
}

150 
	$øw_£t_mode
(
u16
 
mode
, u16 *
ªÆ_mode
)

152 
nmode
, 
i
;

153 
ˇrd_öfo
 *
ˇrd
;

154 
mode_öfo
 *
mi
;

157 
mode
 &~
VIDEO_RECALC
;

160 
nmode
 = 0;

161 
ˇrd
 = 
video_ˇrds
; c¨d < 
video_ˇrds_íd
; card++) {

162 
mi
 = 
ˇrd
->
modes
;

163 
i
 = 0; i < 
ˇrd
->
nmodes
; i++, 
mi
++) {

164 
visibÀ
 = 
mi
->
x
 || mi->
y
;

166 i‡((
mode
 =
nmode
 && 
visibÀ
) ||

167 
mode
 =
mi
->mode ||

168 
mode
 =(
mi
->
y
 << 8)+mi->
x
) {

169 *
ªÆ_mode
 = 
mi
->
mode
;

170  
ˇrd
->
	`£t_mode
(
mi
);

173 i‡(
visibÀ
)

174 
nmode
++;

179 
ˇrd
 = 
video_ˇrds
; c¨d < 
video_ˇrds_íd
; card++) {

180 i‡(
mode
 >
ˇrd
->
xmode_fú°
 &&

181 
mode
 < 
ˇrd
->
xmode_fú°
+ˇrd->
xmode_n
) {

182 
mode_öfo
 
mix
;

183 *
ªÆ_mode
 = 
mix
.
mode
 = mode;

184 
mix
.
x
 = mix.
y
 = 0;

185  
ˇrd
->
	`£t_mode
(&
mix
);

191 
	}
}

196 
	$vga_ªˇlc_vîtiˇl
()

198 
f⁄t_size
, 
rows
;

199 
u16
 
¸tc
;

200 
u8
 
±
, 
ov
;

202 
	`£t_fs
(0);

203 
f⁄t_size
 = 
	`rdfs8
(0x485);

204 
rows
 = 
f‹˚_y
 ? f‹˚_y : 
	`rdfs8
(0x484)+1;

206 
rows
 *
f⁄t_size
;

207 
rows
--;

209 
¸tc
 = 
	`vga_¸tc
();

211 
±
 = 
	`ö_idx
(
¸tc
, 0x11);

212 
±
 &= ~0x80;

213 
	`out_idx
(
±
, 
¸tc
, 0x11);

215 
	`out_idx
((
u8
)
rows
, 
¸tc
, 0x12);

217 
ov
 = 
	`ö_idx
(
¸tc
, 0x07);

218 
ov
 &= 0xbd;

219 
ov
 |(
rows
 >> (8-1)) & 0x02;

220 
ov
 |(
rows
 >> (9-6)) & 0x40;

221 
	`out_idx
(
ov
, 
¸tc
, 0x07);

222 
	}
}

225 
	$£t_mode
(
u16
 
mode
)

227 
rv
;

228 
u16
 
ªÆ_mode
;

231 i‡(
mode
 =
VIDEO_CURRENT_MODE
)

233 i‡(
mode
 =
NORMAL_VGA
)

234 
mode
 = 
VIDEO_80x25
;

235 i‡(
mode
 =
EXTENDED_VGA
)

236 
mode
 = 
VIDEO_8POINT
;

238 
rv
 = 
	`øw_£t_mode
(
mode
, &
ªÆ_mode
);

239 i‡(
rv
)

240  
rv
;

242 i‡(
mode
 & 
VIDEO_RECALC
)

243 
	`vga_ªˇlc_vîtiˇl
();

247 
boŸ_∑øms
.
hdr
.
vid_mode
 = 
ªÆ_mode
;

249 
	}
}

251 
	$gë_íåy
()

253 
íåy_buf
[4];

254 
i
, 
Àn
 = 0;

255 
key
;

256 
v
;

259 
key
 = 
	`gëch¨
();

261 i‡(
key
 == '\b') {

262 i‡(
Àn
 > 0) {

263 
	`puts
("\b \b");

264 
Àn
--;

266 } i‡((
key
 >= '0' && key <= '9') ||

267 (
key
 >= 'A' && key <= 'Z') ||

268 (
key
 >= 'a' && key <= 'z')) {

269 i‡(
Àn
 <  
íåy_buf
) {

270 
íåy_buf
[
Àn
++] = 
key
;

271 
	`putch¨
(
key
);

274 } 
key
 != '\r');

275 
	`putch¨
('\n');

277 i‡(
Àn
 == 0)

278  
VIDEO_CURRENT_MODE
;

280 
v
 = 0;

281 
i
 = 0; i < 
Àn
; i++) {

282 
v
 <<= 4;

283 
key
 = 
íåy_buf
[
i
] | 0x20;

284 
v
 +(
key
 > '9') ? key-'a'+10 : key-'0';

287  
v
;

288 
	}
}

290 
	$di•œy_míu
()

292 
ˇrd_öfo
 *
ˇrd
;

293 
mode_öfo
 *
mi
;

294 
ch
;

295 
i
;

297 
	`puts
("Mode: COLSxROWS:\n");

299 
ch
 = '0';

300 
ˇrd
 = 
video_ˇrds
; c¨d < 
video_ˇrds_íd
; card++) {

301 
mi
 = 
ˇrd
->
modes
;

302 
i
 = 0; i < 
ˇrd
->
nmodes
; i++, 
mi
++) {

303 
visibÀ
 = 
mi
->
x
 && mi->
y
;

304 
u16
 
mode_id
 = 
mi
->
mode
 ? mi->mode :

305 (
mi
->
y
 << 8)+mi->
x
;

307 i‡(!
visibÀ
)

311 i‡(
ch
 == '9')

312 
ch
 = 'a';

313 i‡(
ch
 == 'z' || ch == ' ')

314 
ch
 = ' ';

316 
ch
++;

319 
	}
}

321 
	#H
(
x
Ë((x)-'a'+10)

	)

322 
	#SCAN
 ((
	`H
('s')<<12)+(H('c')<<8)+(H('a')<<4)+H('n'))

	)

324 
	$mode_míu
()

326 
key
;

327 
£l
;

329 
	`puts
("Press <ENTER>Åo see video modesávailable, "

332 
	`kbd_Êush
();

334 
key
 = 
	`gëch¨_timeout
();

335 i‡(
key
 == ' ' || key == 0)

336  
VIDEO_CURRENT_MODE
;

337 i‡(
key
 == '\r')

339 
	`putch¨
('\a');

344 
	`di•œy_míu
();

346 
	`puts
("Enterá video mode or \"scan\"Åo scan for "

348 
£l
 = 
	`gë_íåy
();

349 i‡(
£l
 !
SCAN
)

350  
£l
;

352 
	`¥obe_ˇrds
(1);

354 
	}
}

356 #ifde‡
CONFIG_VIDEO_RETAIN


358 
	sßved_s¸ìn
 {

359 
	mx
, 
	my
;

360 
	mcurx
, 
	mcury
;

361 
u16
 *
	md©a
;

362 } 
	gßved
;

364 
	$ßve_s¸ìn
()

367 
ßved
.
x
 = 
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_video_cﬁs
;

368 
ßved
.
y
 = 
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_video_löes
;

369 
ßved
.
curx
 = 
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_x
;

370 
ßved
.
cury
 = 
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_y
;

372 i‡(!
	`hóp_‰ì
(
ßved
.
x
*ßved.
y
*(
u16
)+512))

375 
ßved
.
d©a
 = 
	`GET_HEAP
(
u16
, saved.
x
*ßved.
y
);

377 
	`£t_fs
(
video_£gmít
);

378 
	`c›y_‰om_fs
(
ßved
.
d©a
, 0, saved.
x
*ßved.
y
*(
u16
));

379 
	}
}

381 
	$ª°‹e_s¸ìn
()

384 
xs
 = 
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_video_cﬁs
;

385 
ys
 = 
boŸ_∑øms
.
s¸ìn_öfo
.
‹ig_video_löes
;

386 
y
;

387 
addr_t
 
d°
 = 0;

388 
u16
 *
§c
 = 
ßved
.
d©a
;

389 
u16
 
ax
, 
bx
, 
dx
;

391 i‡(
gøphic_mode
)

394 i‡(!
§c
)

399 
	`£t_fs
(
video_£gmít
);

400 
y
 = 0; y < 
ys
; y++) {

401 
≈ad
;

403 i‡(
y
 < 
ßved
.y) {

404 
c›y
 = (
xs
 < 
ßved
.
x
) ? xs : saved.x;

405 
	`c›y_to_fs
(
d°
, 
§c
, 
c›y
*(
u16
));

406 
d°
 +
c›y
*(
u16
);

407 
§c
 +
ßved
.
x
;

408 
≈ad
 = (
xs
 < 
ßved
.
x
) ? 0 : xs-saved.x;

410 
≈ad
 = 
xs
;

415 
asm
 volatile("pushw %%es ; "

422 : "+D" (
d°
), "+c" (
≈ad
)

423 : "bdS" (
video_£gmít
),

428 
ax
 = 0x0200;

429 
bx
 = 0;

430 
dx
 = (
ßved
.
cury
 << 8)+ßved.
curx
;

431 
asm
 vﬁ©ûe(
INT10


432 : "+a" (
ax
), "+b" (
bx
), "+d" (
dx
)

434 
	}
}

436 
	#ßve_s¸ìn
(Ë(()0)

	)

437 
	#ª°‹e_s¸ìn
(Ë(()0)

	)

440 
	$£t_video
()

442 
u16
 
mode
 = 
boŸ_∑øms
.
hdr
.
vid_mode
;

444 
	`RESET_HEAP
();

446 
	`°‹e_mode_∑øms
();

447 
	`ßve_s¸ìn
();

448 
	`¥obe_ˇrds
(0);

451 i‡(
mode
 =
ASK_VGA
)

452 
mode
 = 
	`mode_míu
();

454 i‡(!
	`£t_mode
(
mode
))

457 
mode
 = 
ASK_VGA
;

461 
	`veß_°‹e_edid
();

462 
	`°‹e_mode_∑øms
();

464 i‡(
do_ª°‹e
)

465 
	`ª°‹e_s¸ìn
();

466 
	}
}

	@boot/video.h

17 #i‚de‡
BOOT_VIDEO_H


18 
	#BOOT_VIDEO_H


	)

20 
	~<öc/ty≥s.h
>

23 #unde‡
CONFIG_VIDEO_SVGA


26 
	#CONFIG_VIDEO_VESA


	)

29 
	#CONFIG_VIDEO_RETAIN


	)

32 #unde‡
CONFIG_VIDEO_400_HACK


42 
	#VIDEO_FIRST_MENU
 0x0000

	)

45 
	#VIDEO_FIRST_BIOS
 0x0100

	)

48 
	#VIDEO_FIRST_VESA
 0x0200

	)

51 
	#VIDEO_FIRST_V7
 0x0900

	)

54 
	#VIDEO_FIRST_SPECIAL
 0x0f00

	)

55 
	#VIDEO_80x25
 0x0f00

	)

56 
	#VIDEO_8POINT
 0x0f01

	)

57 
	#VIDEO_80x43
 0x0f02

	)

58 
	#VIDEO_80x28
 0x0f03

	)

59 
	#VIDEO_CURRENT_MODE
 0x0f04

	)

60 
	#VIDEO_80x30
 0x0f05

	)

61 
	#VIDEO_80x34
 0x0f06

	)

62 
	#VIDEO_80x60
 0x0f07

	)

63 
	#VIDEO_GFX_HACK
 0x0f08

	)

64 
	#VIDEO_LAST_SPECIAL
 0x0f09

	)

67 
	#VIDEO_FIRST_RESOLUTION
 0x1000

	)

70 
	#VIDEO_RECALC
 0x8000

	)

73 #ifde‡
CONFIG_VIDEO_RETAIN


74 
°‹e_s¸ìn
();

75 
	#DO_STORE
(Ë
	`°‹e_s¸ìn
()

	)

77 
	#DO_STORE
(Ë(()0)

	)

84 
	smode_öfo
 {

85 
u16
 
	mmode
;

86 
u8
 
	mx
, 
	my
;

89 
	sˇrd_öfo
 {

90 c⁄° *
	mˇrd_«me
;

91 (*
	m£t_mode
)(
mode_öfo
 *
	mmode
);

92 (*
	m¥obe
)();

93 
mode_öfo
 *
	mmodes
;

94 
	mnmodes
;

95 
	munß„
;

96 
u16
 
	mxmode_fú°
;

97 
u16
 
	mxmode_n
;

100 
	#__videoˇrd
 
ˇrd_öfo
 
	`__©åibuã__
((
	`£˘i⁄
(".videoˇrds")))

	)

101 
ˇrd_öfo
 
video_ˇrds
[], 
video_ˇrds_íd
[];

103 
mode_deföed
(
u16
 
mode
);

106 
	#ADAPTER_CGA
 0

	)

107 
	#ADAPTER_EGA
 1

	)

108 
	#ADAPTER_VGA
 2

	)

110 
ad≠ãr
;

111 
u16
 
video_£gmít
;

112 
f‹˚_x
, 
f‹˚_y
;

113 
do_ª°‹e
;

114 
gøphic_mode
;

128 
	#INT10
 "push»%%ebp;Öushw %%ds; i¡ $0x10;Ö›w %%ds;Ö›»%%ebp"

	)

131 
ölöe
 
u8
 
	$ö_idx
(
u16
 
p‹t
, 
u8
 
ödex
)

133 
	`outb
(
ödex
, 
p‹t
);

134  
	`öb
(
p‹t
+1);

135 
	}
}

137 
ölöe
 
	$out_idx
(
u8
 
v
, 
u16
 
p‹t
, u8 
ödex
)

139 
	`outw
(
ödex
+(
v
 << 8), 
p‹t
);

140 
	}
}

143 
ölöe
 
u8
 
	$t°_idx
(
u8
 
v
, 
u16
 
p‹t
, u8 
ödex
)

145 
	`out_idx
(
p‹t
, 
ödex
, 
v
);

146  
	`ö_idx
(
p‹t
, 
ödex
);

147 
	}
}

150 
u16
 
vga_¸tc
();

	@boot/voyager.c

16 
	~"code16gcc.h
"

17 
	~<öc/ty≥s.h
>

18 
	~"boŸ.h
"

21 
	$quîy_voyagî
()

23 
u8
 
îr
;

24 
u16
 
es
, 
di
;

26 
u8
 *
d©a_±r
 = (u8 *)&
boŸ_∑øms
.
≠m_bios_öfo
;

28 
d©a_±r
[0] = 0xff;

30 
	`asm
("pushw %%es ; "

35 : "=q" (
îr
), "Ù" (
es
), "=D" (
di
)

38 i‡(
îr
)

41 
	`£t_fs
(
es
);

42 
	`c›y_‰om_fs
(
d©a_±r
, 
di
, 7);

44 
	}
}

	@inc/acpi.h

1 #i‚de‡
ACPI_HEADER


2 
	#ACPI_HEADER


	)

3 
	~<öc/ty≥s.h
>

5 
	#NR_NUMA
 8

	)

7 
	srsdp


9 
uöt8_t
 
	msig
[8];

10 
uöt8_t
 
	mcheck_sum
;

11 
uöt8_t
 
	m€mid
[6];

12 
uöt8_t
 
	mªvisi⁄
;

13 
uöt32_t
 
	mrsdt_addr
;

14 
uöt32_t
 
	mÀngth
;

15 
uöt64_t
 
	mxsdt_addr
;

16 
uöt8_t
 
	mexãd_check
;

17 
uöt8_t
 
	mªsvîd
[3];

18 }
__©åibuã__
((
∑cked
));

20 
	sdes_hódî


22 
uöt8_t
 
	msig
[4];

23 
uöt32_t
 
	mÀngth
;

24 
uöt8_t
 
	mªvisi⁄
;

25 
uöt8_t
 
	mcheck_sum
;

26 
uöt8_t
 
	m€mid
[6];

27 
uöt8_t
 
	m€mèbid
[8];

28 
uöt32_t
 
	m€m_ªvisi⁄
;

29 
uöt32_t
 
	m¸ót‹_id
;

30 
uöt32_t
 
	m¸ót‹_ªvisi⁄
;

31 }
__©åibuã__
((
∑cked
));

33 
	sxsdt


35 
des_hódî
 
	mhódî
;

36 
uöt64_t
 
	míåy
[];

37 }
__©åibuã__
((
∑cked
));

39 
	s§©


41 
des_hódî
 
	mhódî
;

42 
uöt32_t
 
	mª£rved
;

43 
uöt64_t
 
	mª£rved1
;

44 
uöt64_t
 
	míåy
[];

45 }
__©åibuã__
((
∑cked
));

47 
	sh≥t


49 
des_hódî
 
	mhódî
;

50 
uöt32_t
 
	mblock_id
;

51 
uöt8_t
 
	m•a˚_ty≥
;

52 
uöt8_t
 
	mbô_width
;

53 
uöt8_t
 
	mbô_off£t
;

54 
uöt8_t
 
	mª£rved
;

55 
uöt64_t
 
	mba£_addªss
;

56 
uöt8_t
 
	mh≥t_num
;

57 
uöt16_t
 
	mmaö_cou¡î_mö
;

58 
uöt8_t
 
	m∑ge_¥Ÿe˘i⁄
;

59 }
__©åibuã__
((
∑cked
));

61 
	smadt


63 
des_hódî
 
	mhódî
;

64 
uöt32_t
 
	m≠ic_phy_addr
;

65 
uöt32_t
 
	mÊags
;

66 
uöt64_t
 
	míåy
[];

67 }
__©åibuã__
((
∑cked
));

69 
	sivrs


71 
des_hódî
 
	mhódî
;

72 
uöt32_t
 
	mivöfo
;

73 
uöt32_t
 
	mª£rved1
;

74 
uöt64_t
 
	míåy
[];

75 }
__©åibuã__
((
∑cked
));

77 
	s≠ic_aff


79 
uöt8_t
 
	mty≥
;

80 
uöt8_t
 
	mÀngth
;

81 
uöt8_t
 
	m¥oxi_domaö
;

82 
uöt8_t
 
	m≠ic_id
;

83 
uöt32_t
 
	mÊags
;

84 
uöt8_t
 
	mlßpic_eid
;

85 
uöt8_t
 
	m¥oxi_domaö1
[3];

86 
uöt32_t
 
	mªsv
;

87 }
__©åibuã__
((
∑cked
));

89 
	smem_aff


91 
uöt8_t
 
	mty≥
;

92 
uöt8_t
 
	mÀngth
;

93 
uöt32_t
 
	m¥oxi_domaö
;

94 
uöt16_t
 
	mªsv
;

95 
uöt32_t
 
	mba£_addr_low
;

96 
uöt32_t
 
	mba£_addr_high
;

97 
uöt32_t
 
	mÀngth_low
;

98 
uöt32_t
 
	mÀngth_high
;

99 
uöt32_t
 
	mªsv1
;

100 
uöt32_t
 
	mÊags
;

101 
uöt64_t
 
	mªsv2
;

102 }
__©åibuã__
((
∑cked
));

104 
	sœpic_íåy


106 
uöt8_t
 
	mty≥
;

107 
uöt8_t
 
	mÀngth
;

108 
uöt8_t
 
	ma˝i_¥o˚ss‹_id
;

110 
uöt8_t
 
	mœpicid
;

111 
uöt32_t
 
	mÊags
;

112 }
__©åibuã__
((
∑cked
));

114 
	snuma_node


116 
uöt64_t
 
	mid
;

117 
uöt8_t
 
	mœpicid
[16];

118 
uöt64_t
 
	mba£_addr
;

119 
uöt64_t
 
	mÀngth
;

120 
uöt64_t
 
	mödex
;

121 
uöt32_t
 
	mboŸpid
;

122 
uöt32_t
 
	mboŸed
;

123 }
__©åibuã__
((
∑cked
));

125 
numa_node
 
node
[
NR_NUMA
];

127 
rsdp
 *
rsdp_gë
();

128 
§©
 *
§©_gë
(
xsdt
 *
xt
);

129 
ivrs
 *
ivrs_gë
(
xsdt
 *
xt
);

130 
h≥t
 *
h≥t_gë
(
xsdt
 *
xt
);

131 
madt
 *
madt_gë
(
xsdt
 *
xt
);

132 
§©_∑r£
(
§©
 *srat);

133 
¥ï¨e_node_öfo
(
§©
 *srat);

134 
Áke_a˝i_œpic
(
madt
 *madt, 
nodeid
);

135 *
dump_madt_∑ge
(
madt
 *madt, *
madt_∑ge
);

136 
madt
 *madt;

	@inc/apic.h

1 #i‚de‡
APIC_HEADERS


2 
	#APIC_HEADERS


	)

4 
	~<öc/ty≥s.h
>

5 
	~<öc/°dio.h
>

6 
	~<öc/°rög.h
>

7 
	~<öc/mp.h
>

9 
	#NO_SHORTHAND
 0x0

	)

10 
	#SELF
 (0x1<<18)

	)

11 
	#ALL_BUT_SELF
 (0x2<<18)

	)

12 
	#ALL
 (0x3<<18)

	)

14 
	#EDGE_TRIG
 0x0

	)

15 
	#LEVL_TRIG
 (0x1<<15)

	)

17 
	#ASSERT
 (0x1<<14)

	)

18 
	#DE_ASS
 (0x0)

	)

20 
	#DELIVER_ST
 (0x1<<12)

	)

22 
	#PHY_DES
 0x0

	)

23 
	#LOGI_DES
 0x800

	)

25 
	#FIXED
 0x0

	)

26 
	#LOWES_PRO
 (0x1<<8)

	)

27 
	#SMI
 (0x10<<8)

	)

28 
	#RESERV
 (0x11<<8)

	)

29 
	#NMI
 (0x100<<8)

	)

30 
	#INIT
 (0x101<<8)

	)

31 
	#START_UP
 (0x110<<8)

	)

32 
	#RESVER
 (0x111<<8)

	)

34 
	#AP_BOOT_SIG
 ((
uöt16_t
 *)0x100000)

	)

36 
uöt32_t
 
iﬂpicid
;

37 
uöt64_t
 
˝uid_off£t
;

38 
mp_iﬂpic
 *
iﬂpic
[16];

40 
mp_Âå
* 
mp_gë_Âå
();

41 
iﬂpic_öô
(
mp_iﬂpic
 *
iﬂpic
[16], 
mp_Âå
 *
Âå
);

42 
uöt32_t
 
ªad_iﬂpic
(
uöt16_t
 
£l
);

43 
wrôe_iﬂpic
(
uöt16_t
 
£l
, 
uöt32_t
 
d©a
);

44 
mul_wrôe_iﬂpic
(
uöt16_t
 
£l
, 
uöt32_t
 
d©a
, 
uöt64_t
 
ba£
);

45 
uöt32_t
 
mul_ªad_iﬂpic
(
uöt16_t
 
£l
, 
uöt64_t
 
ba£
);

46 
uöt32_t
 
ªad_œpic
(uöt32_à
off£t
);

47 
wrôe_œpic
(
uöt32_t
 
off£t
, uöt32_à
d©a
);

48 
iﬂpic_tmp_m≠
(
uöt64_t
 
addr
);

49 
œpic_tmp_m≠
(
uöt64_t
 
addr
);

50 
íabÀ_œpic
();

51 
≠ic_ùi_öô
(
uöt32_t
 
id
);

52 
≠ic_ùi
(
uöt32_t
 
id
, uöt32_à
úqno
);

53 
boŸ_≠
(
uöt32_t
 
∑
, uöt32_à
id
);

54 
dñay
(
uöt64_t
 
cy˛es
);

55 
uöt32_t
 
œpicid
();

56 
íabÀ_úq
(
uöt32_t
 
úq
, uöt32_à
˝u
);

57 
iﬂpic_èbÀ
(
uöt64_t
 
addr
);

58 
keybﬂrd_úq_ªdúe˘
();

	@inc/assert.h

3 #i‚de‡
JOS_INC_ASSERT_H


4 
	#JOS_INC_ASSERT_H


	)

6 
	~<öc/°dio.h
>

8 
_w¨n
(const *, , const *, ...);

9 
	$_∑nic
(c⁄° *, , c⁄° *, ...Ë
	`__©åibuã__
((
n‹ëu∫
));

11 
	#w¨n
(...Ë
	`_w¨n
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

12 
	#∑nic
(...Ë
	`_∑nic
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

14 
	#as£π
(
x
) \

15 dÿ{ i‡(!(
x
)Ë
	`∑nic
("as£πi⁄ faûed: %s", #x); 
	}
} 0)

	)

18 
	#°©ic_as£π
(
x
ËxË0: (x):

	)

	@inc/boot.h

1 
	#DESCRIPTOR
(
ba£
,
limô
,
©å
) \

2 .
w‹d
 
limô
 & 0x0000FFFF; \

3 .
w‹d
 
ba£
 & 0x000000000000FFFF; \

4 .
byã
 
ba£
>>16 & 0x00000000000000FF; \

5 .
byã
 
©å
 & 0x00000000000000FF; \

6 .
	`byã
 ((
©å
>>4)&0x00000000000000F0)|((
limô
>>16)&0x000000000000000F); \

7 .
byã
 
ba£
>>24 & 0x00000000000000FF

	)

9 
	#DESCRIPTOR64
(
©å
Ë
	`DESCRIPTO
(0,0,©å)

	)

10 
	#ATTR_G
 0x800

	)

11 
	#ATTR_DB
 0x400

	)

13 
	#ATTR_L
 0x200

	)

15 
	#ATTR_AVL
 0x100

	)

16 
	#ATTR_P
 0x080

	)

18 
	#ATTR_DPL
(
Àvñ
Ë(÷evñ & 0x03)<<5)

	)

19 
	#ATTR_S
 0x010

	)

22 
	#ATTR_TYPE
(
ty≥
Ë—y≥ & 0x00f)

	)

25 
	#ATTR_TYPE_READ_UPWARD_DATA
 0x000

	)

26 
	#ATTR_TYPE_READ_DOWNWARD_DATA
 0x004

	)

27 
	#ATTR_TYPE_RW_UPWARD_DATA
 0x002

	)

28 
	#ATTR_TYPE_RW_DOWNWARD_DATA
 0x006

	)

29 
	#ATTR_TYPE_EXE_CONFIRM_CODE
 0x00c

	)

32 
	#ATTR_TYPE_EXE_UNCONFIRM_CODE
 0x008

	)

33 
	#ATTR_TYPE_READ_CONFIRM_CODE
 0x00e

	)

34 
	#ATTR_TYPE_READ_UNCONFIRM_CODE
 0x00a

	)

35 
	#ATTR_TYPE_ACCESSED
 0x001

	)

38 
	#ATTR_TYPE_286
 0x008

	)

39 
	#ATTR_TYPE_TSS
 0x001

	)

40 
	#ATTR_TYPE_LDT
 0x002

	)

42 
	#ATTR_TYPE_BUSY_TSS
 0x003

	)

43 
	#ATTR_TYPE_CALL_GATE
 0x004

	)

44 
	#ATTR_TYPE_INT_GATE
 0x006

	)

45 
	#ATTR_TYPE_TRAP_GATE
 0x007

	)

49 
	#GDTR
(
addr
, 
limô
) \

50 .
w‹d
 
limô
; \

51 .
addr


	)

55 
	#SELECTOR
(
ödex
, 
ti
, 
Ωl
Ë(((ödex<<3Ë& 0xfff8Ë| (—i<<2Ë& 0x4Ë| (Ω»& 0x3))

	)

57 
	#toCR3
(
ba£_addr
,
PCD
,
PWT
) (\

58 (
ba£_addr
 && 0x000000fffffff000) |\

59 ((
PCD
<<4) & 0x10) |\

60 ((
PWT
<<3Ë& 0x8))

	)

62 
	#toCR3_n‹mÆ
(
ba£_addr
Ë(ba£_add∏& 0x000000fffffff000)

	)

65 
	#PAGE_P
 0x01

	)

66 
	#PAGE_RW
 0x02

	)

67 
	#PAGE_US
 0x04

	)

68 
	#PAGE_PWT
 0x08

	)

69 
	#PAGE_PCD
 0x10

	)

70 
	#PAGE_A
 0x20

	)

71 
	#PAGE_D
 0x40

	)

72 
	#PAGE_PAT
 0x80

	)

73 
	#PAGE_G
 0x100

	)

75 
	#PML4_ENTRY
(
ba£_addr
,
©å
Ë((ba£_add∏& 0x000000FFFFFFF000)|◊â∏& 0x03f))

	)

76 
	#PDPT_ENTRY
(
ba£_addr
,
©å
Ë
	`PML4_ENTRY
(ba£_addr,©å)

	)

77 
	#PDT_ENTRY
(
ba£_addr
,
©å
Ë
	`PML4_ENTRY
(ba£_addr,©å)

	)

78 
	#PT_ENTRY
(
ba£_addr
,
©å
Ë((ba£_add∏& 0x000000FFFFFFF000)|◊â∏& 0x1ff))

	)

	@inc/boot1.h

1 #i‚de‡
JOS_MACHINE_BOOT_H


2 
	#JOS_MACHINE_BOOT_H


	)

4 
	~<öc/e820.h
>

6 
	#DIRECT_BOOT_EAX_MAGIC
 0x6A6F7362

	)

7 
	#SYSXBOOT_EAX_MAGIC
 0x910DFAA0

	)

9 #i‚de‡
__ASSEMBLER__


11 
	ssysx_öfo
 {

12 
uöt32_t
 
	mextmem_kb
;

13 
uöt32_t
 
	mcmdlöe
;

14 
e820íåy
 
	me820_m≠
[
E820MAX
];

15 
uöt8_t
 
	me820_√¡s
;

16 } 
__©åibuã__
 ((
∑cked
));

20 
	#APBOOTSTRAP
 0x7000

	)

22 
°¨t_≠
();

	@inc/cpu.h

1 
	~<öc/ty≥s.h
>

3 
	#MAX_CPU
 32

	)

5 
	s˝u


7 
	mœpicid
;

8 
	m˝uid
;

9 
	mnodeid
;

10 
	mboŸp
;

11 
	mlogiˇlid
;

12 vﬁ©ûê
	mdsvm
;

13 vﬁ©ûê
	msvm
;

14 vﬁ©ûê
	mboŸed
;

15 }
__©åibuã__
((
__∑cked__
));

17 vﬁ©ûê
˝u
 
˝us
[
MAX_CPU
];

18 
uöt8_t
 
	gœpicid_to_ödex
[256];

19 
uöt64_t
 
˝uid_off£t
;

20 
uöt64_t
 
˝unum
;

	@inc/domain.h

1 
	~<öc/ty≥s.h
>

2 
	~<öc/°dio.h
>

3 
	~<öc/löux-hódî.h
>

4 
	~<kîn/mu…iboŸ1.h
>

5 
	~<boŸ/boŸ∑øm.h
>

6 
	~<öc/a˝i.h
>

10 
uöt64_t
 
	mk_addr
;

11 
uöt64_t
 
	mi_addr
;

12 
uöt64_t
 
	mmb_öfo_addr
;

13 
uöt32_t
 
	mmem32_°¨t
;

14 
uöt32_t
 
	mmem32_Àngth
;

15 
uöt32_t
 
	mcode32_°¨t
;

16 
uöt32_t
 
	mdom_ty≥
;

17 
boŸ_∑øms
 *
	mboŸ_∑øms
;

18 
uöt64_t
 
	mmem_°¨t
, 
	mmem_Àngth
;

19 }
	tdomaö_t
;

21 
	#NR_DOMAINS
 8

	)

22 
	#VMM_RESERVED
 0x3d00000

	)

23 
	#MEM_GAP
 0x100000

	)

27 
domaö_t
 
domaös
[
NR_DOMAINS
];

28 
boŸ_∑øms
 *boot_params;

31 
öô_domaö
(
node
);

32 
¸óã_domaö
(
boŸ_∑øms
 *
∑øms
, 
moduÀ_t
 *
mdl
, 
did
);

33 
¸óã_domu
(
boŸ_∑øms
 *
∑øms
, 
moduÀ_t
 *
mdl
, 
did
);

34 
öô_maödomaö
(
boŸ_∑øms
 *
∑øms
, 
uöt64_t
 
kaddr
);

35 
ªboŸ_domaö
();

37 
	$dump_domaö
(
id
)

39 
e820íåy
 *
íåy
;

40 *
sig
;

41 
íåõs
;

43 
íåy
 = 
domaös
[
id
].
boŸ_∑øms
->
e820_m≠
;

44 
íåõs
 = 
domaös
[
id
].
boŸ_∑øms
->
e820_íåõs
;

45 
sig
 =(*)–&
domaös
[
id
].
boŸ_∑øms
->
hdr
.
hódî
);

52 
j
 = 0; j < 4; j ++)

53 
	`lock_˝rötf
("%c", 
sig
[
j
]);

54 
	`lock_˝rötf
("\n");

55 
	`lock_˝rötf
("in dump_domain \n");

56 
	}
}

	@inc/e820.h

1 #i‚de‡
JOS_MACHINE_E820_H


2 
	#JOS_MACHINE_E820_H


	)

4 #i‚de‡ 
__ASSEMBLER__


6 
	~<öc/ty≥s.h
>

8 
	#E820_RAM
 1

	)

9 
	#E820_RESERVED
 2

	)

10 
	#E820_ACPI
 3

	)

11 
	#E820_NVS
 4

	)

13 
	#E820MAX
 128

	)

15 
	#SMAP
 0x534d4150

	)

17 
	se820íåy
 {

18 
uöt64_t
 
	maddr
;

19 
uöt64_t
 
	msize
;

20 
uöt32_t
 
	mty≥
;

21 } 
__©åibuã__
((
∑cked
));

23 
	se820m≠


25 
uöt32_t
 
	mƒ_m≠
;

26 
e820íåy
 
	mm≠
[
E820MAX
];

	@inc/elf.h

1 #i‚de‡
JOS_INC_ELF_H


2 
	#JOS_INC_ELF_H


	)

4 
	#ELF_MAGIC_BE
 0x7F454C46

	)

5 
	#ELF_MAGIC_LE
 0x464C457F

	)

8 
	#ELF_TYPE_EXEC
 2

	)

9 
	#ELF_TYPE_DYNAMIC
 3

	)

10 
	#ELF_TYPE_CORE
 4

	)

13 
	#EI_CLASS
 0

	)

14 
	#EI_DATA
 1

	)

15 
	#EI_VERSION
 2

	)

16 
	#EI_ABI
 3

	)

19 
	#ELF_CLASS_32
 1

	)

20 
	#ELF_CLASS_64
 2

	)

23 
	#ELF_MACH_SPARC
 2

	)

24 
	#ELF_MACH_386
 3

	)

25 
	#ELF_MACH_486
 6

	)

26 
	#ELF_MACH_AMD64
 62

	)

29 
	#ELF_PROG_LOAD
 1

	)

30 
	#ELF_PROG_INTERP
 3

	)

33 
	#ELF_PF_X
 0x01

	)

34 
	#ELF_PF_W
 0x02

	)

35 
	#ELF_PF_R
 0x04

	)

38 
	#ELF_SHT_NULL
 0

	)

39 
	#ELF_SHT_PROGBITS
 1

	)

40 
	#ELF_SHT_SYMTAB
 2

	)

41 
	#ELF_SHT_STRTAB
 3

	)

44 
	#ELF_SHN_UNDEF
 0

	)

47 
	#ELF_STN_UNDEF
 0

	)

50 
	#ELF_ST_BIND
(
i
Ë((iË>> 4)

	)

51 
	#ELF_ST_TYPE
(
i
Ë((iË& 0xF)

	)

52 
	#ELF_ST_INFO
(
b
, 
t
Ë((bË<< 4 | (—Ë& 0xF))

	)

55 
	#ELF_AT_NULL
 0

	)

56 
	#ELF_AT_IGNORE
 1

	)

57 
	#ELF_AT_EXECFD
 2

	)

58 
	#ELF_AT_PHDR
 3

	)

59 
	#ELF_AT_PHENT
 4

	)

60 
	#ELF_AT_PHNUM
 5

	)

61 
	#ELF_AT_PAGESZ
 6

	)

62 
	#ELF_AT_BASE
 7

	)

63 
	#ELF_AT_FLAGS
 8

	)

64 
	#ELF_AT_ENTRY
 9

	)

65 
	#ELF_AT_NOTELF
 10

	)

66 
	#ELF_AT_UID
 11

	)

67 
	#ELF_AT_EUID
 12

	)

68 
	#ELF_AT_GID
 13

	)

69 
	#ELF_AT_EGID
 14

	)

70 
	#ELF_AT_CLKTCK
 17

	)

	@inc/elf32.h

1 #i‚de‡
JOS_INC_ELF32_H


2 
	#JOS_INC_ELF32_H


	)

4 
	~<öc/ty≥s.h
>

5 
	~<öc/ñf.h
>

8 
uöt32_t
 
	me_magic
;

9 
uöt8_t
 
	me_idít
[12];

10 
uöt16_t
 
	me_ty≥
;

11 
uöt16_t
 
	me_machöe
;

12 
uöt32_t
 
	me_vîsi⁄
;

13 
uöt32_t
 
	me_íåy
;

14 
uöt32_t
 
	me_phoff
;

15 
uöt32_t
 
	me_shoff
;

16 
uöt32_t
 
	me_Êags
;

17 
uöt16_t
 
	me_ehsize
;

18 
uöt16_t
 
	me_phítsize
;

19 
uöt16_t
 
	me_phnum
;

20 
uöt16_t
 
	me_shítsize
;

21 
uöt16_t
 
	me_shnum
;

22 
uöt16_t
 
	me_sh°∫dx
;

23 } 
	tElf32_Ehdr
;

26 
uöt32_t
 
	mp_ty≥
;

27 
uöt32_t
 
	mp_off£t
;

28 
uöt32_t
 
	mp_vaddr
;

29 
uöt32_t
 
	mp_∑ddr
;

30 
uöt32_t
 
	mp_fûesz
;

31 
uöt32_t
 
	mp_memsz
;

32 
uöt32_t
 
	mp_Êags
;

33 
uöt32_t
 
	mp_Æign
;

34 } 
	tElf32_Phdr
;

37 
uöt32_t
 
	msh_«me
;

38 
uöt32_t
 
	msh_ty≥
;

39 
uöt32_t
 
	msh_Êags
;

40 
uöt32_t
 
	msh_addr
;

41 
uöt32_t
 
	msh_off£t
;

42 
uöt32_t
 
	msh_size
;

43 
uöt32_t
 
	msh_lök
;

44 
uöt32_t
 
	msh_öfo
;

45 
uöt32_t
 
	msh_addølign
;

46 
uöt32_t
 
	msh_ítsize
;

47 } 
	tElf32_Shdr
;

50 
uöt32_t
 
	m°_«me
;

51 
uöt32_t
 
	m°_vÆue
;

52 
uöt32_t
 
	m°_size
;

53 
uöt8_t
 
	m°_öfo
;

54 
uöt8_t
 
	m°_Ÿhî
;

55 
uöt16_t
 
	m°_shndx
;

56 } 
	tElf32_Sym
;

	@inc/elf64.h

1 #i‚de‡
JOS_INC_ELF64_H


2 
	#JOS_INC_ELF64_H


	)

4 
	~<öc/ty≥s.h
>

5 
	~<öc/ñf.h
>

7 
uöt64_t
 
	tElf64_Addr
;

8 
uöt64_t
 
	tElf64_Off
;

9 
uöt16_t
 
	tElf64_HÆf
;

10 
uöt32_t
 
	tElf64_W‹d
;

11 
öt32_t
 
	tElf64_Sw‹d
;

12 
uöt64_t
 
	tElf64_Xw‹d
;

13 
öt64_t
 
	tElf64_Sxw‹d
;

14 
öt16_t
 
	tElf64_Se˘i⁄
;

17 
Elf64_W‹d
 
	me_magic
;

18 
	me_idít
[12];

19 
Elf64_HÆf
 
	me_ty≥
;

20 
Elf64_HÆf
 
	me_machöe
;

21 
Elf64_W‹d
 
	me_vîsi⁄
;

22 
Elf64_Addr
 
	me_íåy
;

23 
Elf64_Off
 
	me_phoff
;

24 
Elf64_Off
 
	me_shoff
;

25 
Elf64_W‹d
 
	me_Êags
;

26 
Elf64_HÆf
 
	me_ehsize
;

27 
Elf64_HÆf
 
	me_phítsize
;

28 
Elf64_HÆf
 
	me_phnum
;

29 
Elf64_HÆf
 
	me_shítsize
;

30 
Elf64_HÆf
 
	me_shnum
;

31 
Elf64_HÆf
 
	me_sh°∫dx
;

32 } 
	tElf64_Ehdr
;

35 
Elf64_W‹d
 
	mp_ty≥
;

36 
Elf64_W‹d
 
	mp_Êags
;

37 
Elf64_Off
 
	mp_off£t
;

38 
Elf64_Addr
 
	mp_vaddr
;

39 
Elf64_Addr
 
	mp_∑ddr
;

40 
Elf64_Xw‹d
 
	mp_fûesz
;

41 
Elf64_Xw‹d
 
	mp_memsz
;

42 
Elf64_Xw‹d
 
	mp_Æign
;

43 } 
	tElf64_Phdr
;

46 
Elf64_W‹d
 
	msh_«me
;

47 
Elf64_W‹d
 
	msh_ty≥
;

48 
Elf64_Xw‹d
 
	msh_Êags
;

49 
Elf64_Addr
 
	msh_addr
;

50 
Elf64_Off
 
	msh_off£t
;

51 
Elf64_Xw‹d
 
	msh_size
;

52 
Elf64_W‹d
 
	msh_lök
;

53 
Elf64_W‹d
 
	msh_öfo
;

54 
Elf64_Xw‹d
 
	msh_addølign
;

55 
Elf64_Xw‹d
 
	msh_ítsize
;

56 } 
	tElf64_Shdr
;

59 
Elf64_W‹d
 
	m°_«me
;

60 
	m°_öfo
;

61 
	m°_Ÿhî
;

62 
Elf64_HÆf
 
	m°_shndx
;

63 
Elf64_Addr
 
	m°_vÆue
;

64 
Elf64_Xw‹d
 
	m°_size
;

65 } 
	tElf64_Sym
;

	@inc/error.h

3 #i‚de‡
JOS_INC_ERROR_H


4 
	#JOS_INC_ERROR_H


	)

7 
	#E_UNSPECIFIED
 1

8 
	#E_BAD_ENV
 2

10 
	#E_INVAL
 3

11 
	#E_NO_MEM
 4

12 
	#E_NO_FREE_ENV
 5

14 
	#E_FAULT
 6

15 

	)

16 
	#MAXERROR
 6

	)

	@inc/guest_syscall.h

1 #i‚de‡
GUEST_SYSCALL_HEADER


2 
	#GUEST_SYSCALL_HEADER


	)

3 
	~<öc/°rög.h
>

4 
	~<öc/svm.h
>

6 
∑r£_gue°_sysˇŒ
(
vmcb
 *vmcb, 
gíîl_ªgs
 *
ªgs
, 
Êag
);

7 
ªgi°î_åam∂öe
(
uöt64_t
 
addr
, uöt64_à
¸3
);

9 
uöt64_t
 
gë_åam∂öe_addr
(uöt64_à
¸3
);

13 
	sgue°_brk_›s
{

14 
uöt64_t
 
	mÊag
;

15 
uöt64_t
 
	maddr
;

18 
	sgue°_unm≠_›s
{

19 
uöt64_t
 
	mÊag
;

20 
uöt64_t
 
	maddr
;

21 
uöt64_t
 
	msize
;

	@inc/guestos.h

1 
	~<öc/ty≥s.h
>

2 
	~<öc/°dio.h
>

7 
uöt64_t
 
	t±e
;

8 
±e
* 
	tpde
;

9 
pde
* 
	tpd≥
;

10 
pd≥
* 
	tpml4e
;

11 
pml4e
* 
	tpgd
;

13 
pml4e
 
vmm_gë_gue°_pml4_phy
(
pgd
Ögd, 
uöt64_t
 
vaddr
);

15 
pd≥
 
vmm_gë_gue°_pd≥_phy
(
pml4e
Öml4e, 
uöt64_t
 
vaddr
);

17 
pde
 
vmm_gë_gue°_pde_phy
(
pd≥
Öd≥, 
uöt64_t
 
vaddr
);

19 
±e
 
vmm_gë_gue°_±e_phy
(
pde
Öde, 
uöt64_t
 
vaddr
);

21 
uöt64_t
 
vmm_gë_gue°_vút_to_phy
(uöt64_à
¸3
, uöt64_à
vaddr
);

	@inc/intmacro.h

1 #i‚de‡
JOS_INC_INTMACRO_H


2 
	#JOS_INC_INTMACRO_H


	)

7 #i‡
__LONG_MAX__
==9223372036854775807L

8 
	#UINT64
(
x
Ëx##
UL


	)

9 
	#CAST64
(
x
Ë((Ë(x))

	)

10 #ñi‡
__LONG_LONG_MAX__
==9223372036854775807LL

11 
	#UINT64
(
x
Ëx##
ULL


	)

12 
	#CAST64
(
x
Ë((Ë(x))

	)

14 #îr‹ 
Missög
 64-
bô
 
ty≥


21 
	#ROUNDDOWN
(
a
, 
n
) \

23 
uöçå_t
 
__ø
 = (uöçå_tË(
a
); \

24 (
	`__ty≥of__
(
a
)Ë(
__ø
 - __ø % (
n
)); \

25 })

	)

30 
	#ROUNDUP
(
a
, 
n
) \

32 
uöçå_t
 
__n
 = (uöçå_tË(
n
); \

33 (
	`__ty≥of__
(
a
)Ë(
	`ROUNDDOWN
((
uöçå_t
Ë◊Ë+ 
__n
 - 1, __n)); \

34 })

	)

39 
	#JMIN
(
_a
, 
_b
) \

41 
	`__ty≥of__
(
_a
Ë
__a
 = (_a); \

42 
	`__ty≥of__
(
_b
Ë
__b
 = (_b); \

43 
__a
 <
__b
 ? __a : __b; \

44 })

	)

45 
	#JMAX
(
_a
, 
_b
) \

47 
	`__ty≥of__
(
_a
Ë
__a
 = (_a); \

48 
	`__ty≥of__
(
_b
Ë
__b
 = (_b); \

49 
__a
 >
__b
 ? __a : __b; \

50 })

	)

55 
	#IS_POWER_OF_2
(
n
Ë(!((“Ë- 1Ë& (n)))

	)

	@inc/intr.h

1 
	#‰_øx
 0

	)

2 
	#‰_rbx
 8

	)

3 
	#‰_rcx
 16

	)

4 
	#‰_rdx
 24

	)

5 
	#‰_rdi
 32

	)

6 
	#‰_rsi
 40

	)

7 
	#‰_rbp
 48

	)

8 
	#‰_r8
 56

	)

9 
	#‰_r9
 64

	)

10 
	#‰_r10
 72

	)

11 
	#‰_r11
 80

	)

12 
	#‰_r12
 88

	)

13 
	#‰_r13
 96

	)

14 
	#‰_r14
 104

	)

15 
	#‰_r15
 112

	)

16 
	#îr_code
 120

	)

17 
	#‹ig_rù
 128

	)

18 
	#‹ig_cs
 136

	)

19 
	#‹ig_eÊags
 144

	)

20 
	#‹ig_r•
 152

	)

21 
	#‹ig_ss
 160

	)

22 
	#ENTRY
(
«me
Ë.
globÆ
Çame;\

23 
«me
:

	)

	@inc/iommu.h

1 #i‚de‡
IOMMU_HEADER


2 
	#IOMMU_HEADER


	)

4 
	~<öc/a˝i.h
>

5 
	~<öc/°dio.h
>

6 
	~<öc/°rög.h
>

7 
	~<öc/¥ivacy.h
>

9 
	sivhd_hód
{

10 
uöt8_t
 
	mty≥
;

11 
uöt8_t
 
	mÊags
;

12 
uöt16_t
 
	mÀngth
;

13 
uöt16_t
 
	mdev_id
;

14 
uöt16_t
 
	mˇp_off£t
;

15 
uöt64_t
 
	miommu_ba£
;

16 
uöt16_t
 
	mpci_group
;

17 
uöt16_t
 
	miommu_öfo
;

18 
uöt32_t
 
	mª£rved
;

20 }
__©åibuã__
((
__∑cked__
));

22 
	sivmd_hód
{

23 
uöt8_t
 
	mty≥
;

24 
uöt8_t
 
	mÊags
;

25 
uöt16_t
 
	mÀngth
;

26 
uöt16_t
 
	mdevi˚_id
;

27 
uöt16_t
 
	mauxûüry_d©a
;

28 
uöt64_t
 
	mª£rved
;

29 
uöt64_t
 
	mivmd_°¨t_addr
;

30 
uöt64_t
 
	mivmd_mm_blk_Àngth
;

31 }
__©åibuã__
((
__∑cked__
));

34 
	siommu_comm™d
{

35 
uöt32_t
 
	mfú°_›_low
;

36 
uöt32_t
 
	mfú°_›_high
;

37 
uöt32_t
 
	m£c⁄d_›_low
;

38 
uöt32_t
 
	m£c⁄d_›_high
;

41 
	sdev_èbÀ
{

42 
uöt64_t
 
	mv
:1;

43 
uöt64_t
 
	mtv
:1;

44 
uöt64_t
 
	mª£rved
:7;

45 
uöt64_t
 
	mmode
:3;

46 
uöt64_t
 
	m∑ge_èbÀ
:40;

47 
uöt64_t
 
	mª£rved1
:9;

48 
uöt64_t
 
	mú
:1;

49 
uöt64_t
 
	miw
:1;

50 
uöt64_t
 
	mª£rved2
:1;

51 
uöt16_t
 
	mdomaöid
;

52 
uöt16_t
 
	mª£rved3
;

53 
uöt32_t
 
	mi
:1;

54 
uöt32_t
 
	m£
:1;

55 
uöt32_t
 
	mß
:1;

56 
uöt32_t
 
	mio˘l
:2;

57 
uöt32_t
 
	mˇche
:1;

58 
uöt32_t
 
	msd
:1;

59 
uöt32_t
 
	mex
:1;

60 
uöt32_t
 
	msysmgt
:2;

61 
uöt32_t
 
	mª£rved4
:22;

62 
uöt64_t
 
	miv
:1;

63 
uöt64_t
 
	möâabÀn
:4;

64 
uöt64_t
 
	mig
:1;

65 
uöt64_t
 
	möå_èbÀ
:46;

66 
uöt64_t
 
	mª£rved5
:4;

67 
uöt64_t
 
	möô∑ss
:1;

68 
uöt64_t
 
	meöô∑ss
:1;

69 
uöt64_t
 
	mnmùass
:1;

70 
uöt64_t
 
	mª£rved6
:1;

71 
uöt64_t
 
	möt˘l
:2;

72 
uöt64_t
 
	mlöt0∑ss
:1;

73 
uöt64_t
 
	mlöt1∑ss
:1;

74 
uöt64_t
 
	mª£rved7
;

75 }
__©åibuã__
((
__∑cked__
));

78 
iommu_öô
(
ivrs
 *ivrs);

79 
ªad_iommu_evít
(
iommu_id
, *
gue°_buf„r
);

81 
	#IOMMU_BUF_SIZE
 (4096*2)

	)

82 
	#MAX_IOMMU
 2

	)

83 
	#MAX_DEV_ID
 0x3000

	)

86 
dev_èbÀ
 
devi˚_èbÀ
[
MAX_DEV_ID
];

	@inc/irq.h

2 #i‚de‡
HKEY_IRQ_HEADER


3 
	#HKEY_IRQ_HEADER


	)

5 
	~<öc/ty≥s.h
>

6 
	~<öc/svm.h
>

8 
	söãºu±_‰ame


10 
uöt64_t
 
	m‰_øx
;

11 
uöt64_t
 
	m‰_rbx
;

12 
uöt64_t
 
	m‰_rcx
;

13 
uöt64_t
 
	m‰_rdx
;

14 
uöt64_t
 
	m‰_rdi
;

15 
uöt64_t
 
	m‰_rsi
;

16 
uöt64_t
 
	m‰_rbp
;

17 
uöt64_t
 
	m‰_r8
;

18 
uöt64_t
 
	m‰_r9
;

19 
uöt64_t
 
	m‰_r10
;

20 
uöt64_t
 
	m‰_r11
;

21 
uöt64_t
 
	m‰_r12
;

22 
uöt64_t
 
	m‰_r13
;

23 
uöt64_t
 
	m‰_r14
;

24 
uöt64_t
 
	m‰_r15
;

26 
uöt64_t
 
	mîr‹_code
;

27 
uöt64_t
 
	m‹ig_rù
;

28 
uöt64_t
 
	m‹ig_cs
;

29 
uöt64_t
 
	mrÊags
;

30 
uöt64_t
 
	m‹ig_r•
;

31 
uöt64_t
 
	m‹ig_ss
;

34 
	sidt_g©e


36 
uöt16_t
 
	moff£t_low
;

37 
uöt16_t
 
	m£À˘‹
;

38 
uöt8_t
 
	mdcou¡
;

39 
uöt8_t
 
	m©å
;

40 
uöt16_t
 
	moff£t_high
;

41 
uöt32_t
 
	moff£t_high32
;

42 
uöt32_t
 
	mªs_off£t_high32
;

43 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tGATE
;

45 
__©åibuã__
((
	t__∑cked__
)Ë
	tidt_desc


47 
uöt16_t
 
	gÀn
;

48 
uöt64_t
 
	gaddr
;

49 }
	tDESC
;

52 
GATE
 
	gidt_èbÀ
[256];

54 
DESC
 
	gidtdesc1
;

56 
	swÆl_time


58 
uöt8_t
 
	m£c⁄d
;

59 
uöt8_t
 
	mmöuã
;

60 
uöt8_t
 
	mhour
;

61 
uöt8_t
 
	mwday
;

62 
uöt8_t
 
	mday
;

63 
uöt8_t
 
	mm⁄th
;

64 
uöt32_t
 
	myór
;

67 
öå_n€c_0
[];

68 
öå_ec_0
[];

69 
öå_íd_0
[];

71 
	#öå_n€c
(
öåno
Ë(
öå_n€c_0
 + ((
uöt64_t
)
öå_íd_0
 - (uöt64_t)öå_n€c_0)*öåno)

	)

72 
	#öå_ec
(
öåno
Ë(
	`öå_n€c
(öånoË+ ((
uöt64_t
)
öå_ec_0
 - (uöt64_t)
öå_n€c_0
))

	)

75 
öô_8259A
();

76 
£t_ex˚±i⁄
();

77 
£t_öãºu±
();

78 
lﬂd_idt
();

79 
keybﬂrd_öô
();

80 
£t_h™dÀr
 ((*
f
)(),
å≠no
);

81 
ßve_c⁄ãxt
();

82 
pô_öô
();

83 
ªcovî_c⁄ãxt
();

85 
öå_h™dÀr
(
öãºu±_‰ame
 *
‰ame
, 
uöt64_t
 
öåno
, uöt64_à
‹ig_rù
);

87 
öô_πc
();

88 
£t_πc
();

89 
gë_πc
(
wÆl_time
 *
time
);

90 
time_¥öt
();

92 
vmcb
 
vmcb_ã°
[32];

	@inc/kbdreg.h

1 #i‚de‡
JOS_KBDREG_H


2 
	#JOS_KBDREG_H


	)

5 
	#KEY_HOME
 0xE0

	)

6 
	#KEY_END
 0xE1

	)

7 
	#KEY_UP
 0xE2

	)

8 
	#KEY_DN
 0xE3

	)

9 
	#KEY_LF
 0xE4

	)

10 
	#KEY_RT
 0xE5

	)

11 
	#KEY_PGUP
 0xE6

	)

12 
	#KEY_PGDN
 0xE7

	)

13 
	#KEY_INS
 0xE8

	)

14 
	#KEY_DEL
 0xE9

	)

19 
	#KBSTATP
 0x64

	)

20 
	#KBS_DIB
 0x01

	)

21 
	#KBS_IBF
 0x02

	)

22 
	#KBS_WARM
 0x04

	)

23 
	#KBS_OCMD
 0x08

	)

24 
	#KBS_NOSEC
 0x10

	)

25 
	#KBS_TERR
 0x20

	)

26 
	#KBS_RERR
 0x40

	)

27 
	#KBS_PERR
 0x80

	)

29 
	#KBCMDP
 0x64

	)

30 
	#KBC_RAMREAD
 0x20

	)

31 
	#KBC_RAMWRITE
 0x60

	)

32 
	#KBC_AUXDISABLE
 0xa7

	)

33 
	#KBC_AUXENABLE
 0xa8

	)

34 
	#KBC_AUXTEST
 0xa9

	)

35 
	#KBC_KBDECHO
 0xd2

	)

36 
	#KBC_AUXECHO
 0xd3

	)

37 
	#KBC_AUXWRITE
 0xd4

	)

38 
	#KBC_SELFTEST
 0xØ

	)

39 
	#KBC_KBDTEST
 0xab

	)

40 
	#KBC_KBDDISABLE
 0xad

	)

41 
	#KBC_KBDENABLE
 0x´

	)

42 
	#KBC_PULSE0
 0x„

	)

43 
	#KBC_PULSE1
 0xfd

	)

44 
	#KBC_PULSE2
 0xfb

	)

45 
	#KBC_PULSE3
 0xf7

	)

47 
	#KBDATAP
 0x60

	)

48 
	#KBOUTP
 0x60

	)

50 
	#K_RDCMDBYTE
 0x20

	)

51 
	#K_LDCMDBYTE
 0x60

	)

53 
	#KC8_TRANS
 0x40

	)

54 
	#KC8_MDISABLE
 0x20

	)

55 
	#KC8_KDISABLE
 0x10

	)

56 
	#KC8_IGNSEC
 0x08

	)

57 
	#KC8_CPU
 0x04

	)

58 
	#KC8_MENABLE
 0x02

	)

59 
	#KC8_KENABLE
 0x01

	)

60 
	#CMDBYTE
 (
KC8_TRANS
|
KC8_CPU
|
KC8_MENABLE
|
KC8_KENABLE
)

	)

63 
	#KBC_RESET
 0xFF

	)

64 
	#KBC_RESEND
 0xFE

	)

65 
	#KBC_SETDEFAULT
 0xF6

	)

66 
	#KBC_DISABLE
 0xF5

	)

67 
	#KBC_ENABLE
 0xF4

	)

68 
	#KBC_TYPEMATIC
 0xF3

	)

69 
	#KBC_SETTABLE
 0xF0

	)

70 
	#KBC_MODEIND
 0xED

	)

71 
	#KBC_ECHO
 0xEE

	)

74 
	#KBR_EXTENDED
 0xE0

	)

75 
	#KBR_RESEND
 0xFE

	)

76 
	#KBR_ACK
 0xFA

	)

77 
	#KBR_OVERRUN
 0x00

	)

78 
	#KBR_FAILURE
 0xFD

	)

79 
	#KBR_BREAK
 0xF0

	)

80 
	#KBR_RSTDONE
 0xAA

	)

81 
	#KBR_ECHO
 0xEE

	)

	@inc/linux-header.h

1 
	~<öc/ty≥s.h
>

2 
	~<öc/löuxdef.h
>

5 
	slhódî


7 
uöt8_t
 
	mcode
[0x1f0];

8 
uöt8_t
 
	m∑d
;

9 
uöt8_t
 
	m£tup_£˘‹s
;

10 
uöt16_t
 
	mroŸ_Êags
;

11 
uöt32_t
 
	msyssize
;

12 
uöt16_t
 
	møm_size
;

13 
uöt16_t
 
	mvid_mode
;

14 
uöt16_t
 
	mroŸ_dev
;

15 
uöt16_t
 
	mboŸ_Êags
;

17 
uöt16_t
 
	mjmp_ö°r
;

18 
uöt8_t
 
	mlöux_sig
[4];

19 
uöt16_t
 
	mvîsi⁄
;

20 
uöt32_t
 
	mªÆmode_swôch
;

21 
uöt32_t
 
	m°¨t_sys_£g
;

22 
uöt8_t
 
	mty≥_of_lﬂdî
;

23 
uöt8_t
 
	mlﬂdÊags
;

24 
uöt16_t
 
	m£tup_move_size
;

25 
uöt32_t
 
	mcode32_°¨t
;

26 
uöt32_t
 
	mømdisk_addr
;

27 
uöt32_t
 
	mømdisk_size
;

28 
uöt32_t
 
	mboŸ£˘_kludge
;

29 
uöt16_t
 
	mhóp_íd_±r
;

30 
uöt16_t
 
	m∑d1
;

31 
uöt32_t
 
	mcmd_löe_±r
;

32 
uöt32_t
 
	mømdisk_max
;

33 }
__©åibuã__
((
__∑cked__
));

35 
lhódî
 *
gë_lhódî
(*
addr
);

37 
löux_move
(*
addr
, 
uöt32_t
 
size
);

38 
ªad£g
(
uöt64_t
 
va
, 
uöt32_t
 
cou¡
, uöt32_à
off£t
);

	@inc/linuxdef.h

2 
	#LINUX_KERN_ADDR
 0x4000000

	)

3 
	#LINUX_REAL_ADDR
 0x90000

	)

4 
	#LINUX_INITRD_ADDR
 0x5000000

	)

	@inc/malloc.h

1 #i‚de‡
JOS_INC_MALLOC_H


2 
	#JOS_INC_MALLOC_H
 1

	)

4 *
mÆloc
(
size_t
 
size
);

5 
‰ì
(*
addr
);

	@inc/memlayout.h

1 #i‚de‡
JOS_INC_MEMLAYOUT_H


2 
	#JOS_INC_MEMLAYOUT_H


	)

4 #i‚de‡
__ASSEMBLER__


5 
	~<öc/ty≥s.h
>

6 
	~<öc/queue.h
>

7 
	~<öc/mmu.h
>

16 
	#GD_KT
 0x08

17 
	#GD_KD
 0x10

18 
	#GD_UT
 0x18

19 
	#GD_UD
 0x20

20 
	#GD_TSS
 0x28

21 

	)

82 
	#KERNBASE
 0x0

	)

87 
	#IOPHYSMEM
 0x0A0000

	)

88 
	#EXTPHYSMEM
 0x100000

	)

94 
	#VPT
 (
KERNBASE
 - 
PTSIZE
)

	)

95 
	#KSTACKTOP
 
VPT


	)

96 
	#KSTKSIZE
 (8*
PGSIZE
)

97 
	#ULIM
 (
KSTACKTOP
 - 
PTSIZE
)

	)

105 
	#UVPT
 (
ULIM
 - 
PTSIZE
)

	)

107 
	#UPAGES
 (
UVPT
 - 
PTSIZE
)

	)

109 
	#UENVS
 (
UPAGES
 - 
PTSIZE
)

	)

116 
	#UTOP
 
UENVS


	)

118 
	#UXSTACKTOP
 
UTOP


	)

121 
	#USTACKTOP
 (
UTOP
 - 2*
PGSIZE
)

	)

124 
	#UTEXT
 (2*
PTSIZE
)

	)

127 
	#UTEMP
 ((*Ë
PTSIZE
)

	)

130 
	#PFTEMP
 (
UTEMP
 + 
PTSIZE
 - 
PGSIZE
)

	)

132 
	#USTABDATA
 (
PTSIZE
 / 2)

	)

135 #i‚de‡
__ASSEMBLER__


151 
uöt32_t
 
	t±e_t
;

152 
uöt32_t
 
	tpde_t
;

154 vﬁ©ûê
±e_t
 
v±
[];

155 vﬁ©ûê
pde_t
 
vpd
[];

166 
LIST_HEAD
(
Page_li°
, 
Page
);

167 
	$LIST_ENTRY
(
	tPage
Ë
	tPage_LIST_íåy_t
;

169 
	sPage
 {

170 
Page_LIST_íåy_t
 
µ_lök
;

177 
uöt16_t
 
µ_ªf
;

	@inc/mmap.h

1 
	~<öc/ty≥s.h
>

3 
	smem_c⁄ål_block


5 
size_t
 
	msize
;

6 
uöt64_t
 
	mœ°_addr
;

7 
	mavÆ
;

8 
mem_c⁄ål_block
 *
	m¥ev
, *
	m√xt
;

9 }
	tmem_t
;

12 *
tmÆloc
(
size_t
 
size
);

13 
t‰ì
(*
°¨t
);

15 
dëe˘_mem
();

16 
move£lf_to_œ°_Gb
(
uöt64_t
 
addr
);

	@inc/mmu.h

1 #i‚de‡
JOS_INC_MMU_H


2 
	#JOS_INC_MMU_H


	)

30 
	#PPN
(
œ
Ë(((
uöçå_t
Ë÷a)Ë>> 
PTXSHIFT
)

	)

31 
	#VPN
(
œ
Ë
	`PPN
(la)

32 

	)

34 
	#PDX
(
œ
Ë((((
uöçå_t
Ë÷a)Ë>> 
PDXSHIFT
Ë& 0x3FF)

	)

35 
	#VPD
(
œ
Ë
	`PDX
(la)

36 

	)

38 
	#PTX
(
œ
Ë((((
uöçå_t
Ë÷a)Ë>> 
PTXSHIFT
Ë& 0x3FF)

	)

41 
	#PGOFF
(
œ
Ë(((
uöçå_t
Ë÷a)Ë& 0xFFF)

	)

44 
	#PGADDR
(
d
, 
t
, 
o
Ë((*Ë((dË<< 
PDXSHIFT
 | (tË<< 
PTXSHIFT
 | (o)))

	)

47 
	#NPDENTRIES
 1024

48 
	#NPTENTRIES
 1024

49 

	)

50 
	#PGSIZE
 4096

51 
	#PGSHIFT
 12

52 

	)

53 
	#PTSIZE
 (
PGSIZE
*
NPTENTRIES
)

54 
	#PTSHIFT
 22

55 

	)

56 
	#PTXSHIFT
 12

57 
	#PDXSHIFT
 22

58 

	)

60 
	#PTE_P
 0x001

61 
	#PTE_W
 0x002

62 
	#PTE_U
 0x004

63 
	#PTE_PWT
 0x008

64 
	#PTE_PCD
 0x010

65 
	#PTE_A
 0x020

66 
	#PTE_D
 0x040

67 
	#PTE_PS
 0x080

68 
	#PTE_MBZ
 0x180

69 

	)

72 
	#PTE_AVAIL
 0xE00

73 

	)

75 
	#PTE_USER
 (
PTE_AVAIL
 | 
PTE_P
 | 
PTE_W
 | 
PTE_U
)

	)

78 
	#PTE_ADDR
(
±e
Ë((
phyßddr_t
Ë’ãË& ~0xFFF)

	)

81 
	#CR0_PE
 0x00000001

82 
	#CR0_MP
 0x00000002

83 
	#CR0_EM
 0x00000004

84 
	#CR0_TS
 0x00000008

85 
	#CR0_ET
 0x00000010

86 
	#CR0_NE
 0x00000020

87 
	#CR0_WP
 0x00010000

88 
	#CR0_AM
 0x00040000

89 
	#CR0_NW
 0x20000000

90 
	#CR0_CD
 0x40000000

91 
	#CR0_PG
 0x80000000

92 

	)

93 
	#CR4_PCE
 0x00000100

94 
	#CR4_MCE
 0x00000040

95 
	#CR4_PSE
 0x00000010

96 
	#CR4_DE
 0x00000008

97 
	#CR4_TSD
 0x00000004

98 
	#CR4_PVI
 0x00000002

99 
	#CR4_VME
 0x00000001

100 

	)

102 
	#FL_CF
 0x00000001

103 
	#FL_PF
 0x00000004

104 
	#FL_AF
 0x00000010

105 
	#FL_ZF
 0x00000040

106 
	#FL_SF
 0x00000080

107 
	#FL_TF
 0x00000100

108 
	#FL_IF
 0x00000200

109 
	#FL_DF
 0x00000400

110 
	#FL_OF
 0x00000800

111 
	#FL_IOPL_MASK
 0x00003000

112 
	#FL_IOPL_0
 0x00000000

113 
	#FL_IOPL_1
 0x00001000

114 
	#FL_IOPL_2
 0x00002000

115 
	#FL_IOPL_3
 0x00003000

116 
	#FL_NT
 0x00004000

117 
	#FL_RF
 0x00010000

118 
	#FL_VM
 0x00020000

119 
	#FL_AC
 0x00040000

120 
	#FL_VIF
 0x00080000

121 
	#FL_VIP
 0x00100000

122 
	#FL_ID
 0x00200000

123 

	)

125 
	#FEC_PR
 0x1

126 
	#FEC_WR
 0x2

127 
	#FEC_U
 0x4

128 

	)

136 #ifde‡
__ASSEMBLER__


141 
	#SEG_NULL
 \

142 .
w‹d
 0, 0; \

143 .
byã
 0, 0, 0, 0

	)

144 
	#SEG
(
ty≥
,
ba£
,
lim
) \

145 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

146 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

147 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

151 
	~<öc/ty≥s.h
>

154 
	sSegdesc
 {

155 
	msd_lim_15_0
 : 16;

156 
	msd_ba£_15_0
 : 16;

157 
	msd_ba£_23_16
 : 8;

158 
	msd_ty≥
 : 4;

159 
	msd_s
 : 1;

160 
	msd_d∂
 : 2;

161 
	msd_p
 : 1;

162 
	msd_lim_19_16
 : 4;

163 
	msd_avl
 : 1;

164 
	msd_rsv1
 : 1;

165 
	msd_db
 : 1;

166 
	msd_g
 : 1;

167 
	msd_ba£_31_24
 : 8;

170 
	#SEG_NULL
 (
Segdesc
){ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

	)

172 
	#SEG_FAULT
 (
Segdesc
){ 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0 }

	)

174 
	#SEG
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
Segdesc
) \

175 { ((
lim
Ë>> 12Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

176 
ty≥
, 1, 
d∂
, 1, (Ë(
lim
) >> 28, 0, 0, 1, 1, \

177 (Ë(
ba£
Ë>> 24 }

	)

178 
	#SEG16
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
Segdesc
) \

179 { (
lim
Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

180 
ty≥
, 1, 
d∂
, 1, (Ë(
lim
) >> 16, 0, 0, 1, 0, \

181 (Ë(
ba£
Ë>> 24 }

	)

186 
	#STA_X
 0x8

187 
	#STA_E
 0x4

188 
	#STA_C
 0x4

189 
	#STA_W
 0x2

190 
	#STA_R
 0x2

191 
	#STA_A
 0x1

192 

	)

194 
	#STS_T16A
 0x1

195 
	#STS_LDT
 0x2

196 
	#STS_T16B
 0x3

197 
	#STS_CG16
 0x4

198 
	#STS_TG
 0x5

199 
	#STS_IG16
 0x6

200 
	#STS_TG16
 0x7

201 
	#STS_T32A
 0x9

202 
	#STS_T32B
 0xB

203 
	#STS_CG32
 0xC

204 
	#STS_IG32
 0xE

205 
	#STS_TG32
 0xF

206 

	)

214 #i‚de‡
__ASSEMBLER__


217 
	sTask°©e
 {

218 
uöt32_t
 
	mts_lök
;

219 
uöçå_t
 
	mts_e•0
;

220 
uöt16_t
 
	mts_ss0
;

221 
uöt16_t
 
	mts_∑ddög1
;

222 
uöçå_t
 
	mts_e•1
;

223 
uöt16_t
 
	mts_ss1
;

224 
uöt16_t
 
	mts_∑ddög2
;

225 
uöçå_t
 
	mts_e•2
;

226 
uöt16_t
 
	mts_ss2
;

227 
uöt16_t
 
	mts_∑ddög3
;

228 
phyßddr_t
 
	mts_¸3
;

229 
uöçå_t
 
	mts_eù
;

230 
uöt32_t
 
	mts_eÊags
;

231 
uöt32_t
 
	mts_óx
;

232 
uöt32_t
 
	mts_ecx
;

233 
uöt32_t
 
	mts_edx
;

234 
uöt32_t
 
	mts_ebx
;

235 
uöçå_t
 
	mts_e•
;

236 
uöçå_t
 
	mts_ebp
;

237 
uöt32_t
 
	mts_esi
;

238 
uöt32_t
 
	mts_edi
;

239 
uöt16_t
 
	mts_es
;

240 
uöt16_t
 
	mts_∑ddög4
;

241 
uöt16_t
 
	mts_cs
;

242 
uöt16_t
 
	mts_∑ddög5
;

243 
uöt16_t
 
	mts_ss
;

244 
uöt16_t
 
	mts_∑ddög6
;

245 
uöt16_t
 
	mts_ds
;

246 
uöt16_t
 
	mts_∑ddög7
;

247 
uöt16_t
 
	mts_fs
;

248 
uöt16_t
 
	mts_∑ddög8
;

249 
uöt16_t
 
	mts_gs
;

250 
uöt16_t
 
	mts_∑ddög9
;

251 
uöt16_t
 
	mts_ldt
;

252 
uöt16_t
 
	mts_∑ddög10
;

253 
uöt16_t
 
	mts_t
;

254 
uöt16_t
 
	mts_iomb
;

258 
	sG©edesc
 {

259 
	mgd_off_15_0
 : 16;

260 
	mgd_ss
 : 16;

261 
	mgd_¨gs
 : 5;

262 
	mgd_rsv1
 : 3;

263 
	mgd_ty≥
 : 4;

264 
	mgd_s
 : 1;

265 
	mgd_d∂
 : 2;

266 
	mgd_p
 : 1;

267 
	mgd_off_31_16
 : 16;

277 
	#SETGATE
(
g©e
, 
i°øp
, 
£l
, 
off
, 
d∂
) \

279 (
g©e
).
gd_off_15_0
 = (
uöt32_t
Ë(
off
) & 0xffff; \

280 (
g©e
).
gd_ss
 = (
£l
); \

281 (
g©e
).
gd_¨gs
 = 0; \

282 (
g©e
).
gd_rsv1
 = 0; \

283 (
g©e
).
gd_ty≥
 = (
i°øp
Ë? 
STS_TG32
 : 
STS_IG32
; \

284 (
g©e
).
gd_s
 = 0; \

285 (
g©e
).
gd_d∂
 = (
d∂
); \

286 (
g©e
).
gd_p
 = 1; \

287 (
g©e
).
gd_off_31_16
 = (
uöt32_t
Ë(
off
) >> 16; \

288 }

	)

291 
	#SETCALLGATE
(
g©e
, 
ss
, 
off
, 
d∂
) \

293 (
g©e
).
gd_off_15_0
 = (
uöt32_t
Ë(
off
) & 0xffff; \

294 (
g©e
).
gd_ss
 = (
ss
); \

295 (
g©e
).
gd_¨gs
 = 0; \

296 (
g©e
).
gd_rsv1
 = 0; \

297 (
g©e
).
gd_ty≥
 = 
STS_CG32
; \

298 (
g©e
).
gd_s
 = 0; \

299 (
g©e
).
gd_d∂
 = (
d∂
); \

300 (
g©e
).
gd_p
 = 1; \

301 (
g©e
).
gd_off_31_16
 = (
uöt32_t
Ë(
off
) >> 16; \

302 }

	)

305 
	sP£udodesc
 {

306 
uöt16_t
 
	mpd_lim
;

307 
uöt32_t
 
	mpd_ba£
;

308 } 
__©åibuã__
 ((
∑cked
));

	@inc/mp.h

1 #i‚de‡
MP_HEADERS


2 
	#MP_HEADERS


	)

4 
	~<öc/ty≥s.h
>

5 
	~<öc/x86.h
>

7 
	#PROC
 0x0

	)

8 
	#BUS
 0x1

	)

9 
	#IOAPIC
 0x2

	)

10 
	#IOINTR
 0x3

	)

11 
	#LINTR
 0x4

	)

14 
mp_Âå
* 
mp_gë_Âå
();

15 
mp_Âå
 *
gÂå
;

16 
uöt64_t
 
˝uid_off£t
;

20 
	smp_Âå


22 
uöt8_t
 
	m·_sig
[4];

23 
uöt32_t
 
	mtb_addr
;

24 
uöt8_t
 
	mÀ¡h
;

25 
uöt8_t
 
	m£pc
;

26 
uöt8_t
 
	mcheck_sum
;

27 
uöt8_t
 
	mmp_„©uª
[5];

28 }
__©åibuã__
((
__∑cked__
));

30 
	smp_c⁄f_hódî


32 
uöt8_t
 
	mhódî_sig
[4];

33 
uöt16_t
 
	mba£_t_Àngth
;

34 
uöt8_t
 
	m£pc
;

35 
uöt8_t
 
	mcheck_sum
;

36 
uöt8_t
 
	m€m_öfo
[20];

37 
uöt32_t
 
	m€m_t_addr
;

38 
uöt16_t
 
	m€m_t_size
;

39 
uöt16_t
 
	mcou¡
;

40 
uöt32_t
 
	mœpiˇddr
;

41 
uöt16_t
 
	mext_t_Àngth
;

42 
uöt8_t
 
	me_checksum
;

43 
uöt8_t
 
	mª£rved
;

44 }
__©åibuã__
((
__∑cked__
));

50 
	smp_¥o˚s£r


52 
uöt8_t
 
	mty≥
;

53 
uöt8_t
 
	mœpicid
;

54 
uöt8_t
 
	mœpicvî
;

55 
uöt8_t
 
	m˝uÊags
;

56 
uöt8_t
 
	msig«tuª
[4];

57 
uöt32_t
 
	m„©uª
;

58 
uöt32_t
 
	mª£rvîd
[2];

59 }
__©åibuã__
((
__∑cked__
));

61 
	smp_bu£¡ry


63 
uöt8_t
 
	mty≥
;

64 
uöt8_t
 
	mbusid
;

65 
uöt8_t
 
	mbus°r
[6];

66 }
__©åibuã__
((
__∑cked__
));

68 
	smp_iﬂpic


70 
uöt8_t
 
	mty≥
;

71 
uöt8_t
 
	miﬂpicid
;

72 
uöt8_t
 
	miﬂpicvîs
;

73 
uöt8_t
 
	miﬂpicÊag
;

74 
uöt32_t
 
	mmmiﬂpic_addr
;

75 }
__©åibuã__
((
__∑cked__
));

77 
	smp_ioöå_assign


79 
uöt8_t
 
	mty≥
;

80 
uöt8_t
 
	möå_ty≥
;

81 
uöt8_t
 
	mio_öåÊag
;

82 
uöt8_t
 
	mª£rvî
;

83 
uöt8_t
 
	msour˚busid
;

84 
uöt8_t
 
	msour˚busúq
;

85 
uöt8_t
 
	mdesiﬂpicid
;

86 
uöt8_t
 
	mdesiﬂpicöä
;

87 }
__©åibuã__
((
__∑cked__
));

89 
	smp_locöå_assign


91 
uöt8_t
 
	mty≥
;

92 
uöt8_t
 
	möå_ty≥
;

93 
uöt8_t
 
	mio_öåÊag
;

94 
uöt8_t
 
	mª£rvî
;

95 
uöt8_t
 
	msour˚busid
;

96 
uöt8_t
 
	msour˚busúq
;

97 
uöt8_t
 
	mde¶≠icid
;

98 
uöt8_t
 
	mde¶≠icöä
;

99 }
__©åibuã__
((
__∑cked__
));

101 
uöt32_t
 
	$sum
(
uöt8_t
 *
p
, 
uöt32_t
 
size
)

103 
uöt8_t
 
tŸl
 = 0;

104 
uöt32_t
 
i
;

105 
i
 = 0; i < 
size
; i ++)

106 
tŸl
 +
p
[
i
];

107  
tŸl
;

108 
	}
}

110 
	$≠ic_mår_öô
()

112 
	`wrôe_m§
(0x230, 0xfee00000);

113 
	`wrôe_m§
(0x231, (((((
uöt64_t
) 1)<<36 )- 1 ) & ~(1000 -1)) | 0x800);

114 
	`wrôe_m§
(0x232, 0xfec00000);

115 
	`wrôe_m§
(0x233, (((((
uöt64_t
) 1)<<36) - 1 ) & ~(1000 -1)) | 0x800);

116 
	}
}

118 
mp_Âå
* 
	$mp_£¨ch
(
uöt64_t
 
ba£
, 
uöt32_t
 
limô
)

120 
uöt32_t
 
off£t
 = 0;

121 
mp_Âå
 *
Âå
;

122 
off£t
 < 
limô
)

124 
Âå
 = (
mp_Âå
*)(
ba£
 + 
off£t
);

125 if(
Âå
->
·_sig
[0] == '_' &&fptr->ft_sig[1] == 'M' &&

126 
Âå
->
·_sig
[2] == 'P' && fptr->ft_sig[3] == '_')

128 if(
	`sum
((
uöt8_t
 *)
Âå
, (
mp_Âå
)) == 0)

130  
Âå
;

133 
off£t
 +(
mp_Âå
);

136 
	}
}

137 
mp_öô
();

138 
smp_boŸ
();

139 
dump_iﬂpic
(
mp_Âå
 *
Âå
);

	@inc/npt.h

1 #i‚de‡
OSV_NPT


2 
	#OSV_NPT


	)

4 
	~<öc/ty≥s.h
>

5 
	~<öc/svm.h
>

6 
	~<öc/°dio.h
>

8 
	#LAPIC_BASE
 0xFEE00000

	)

9 
	#PAGE_SHIFT
 12

	)

10 
	#PHY_LENGTH
 48

	)

11 
	#PAGE_SIZE
 (1<<
PAGE_SHIFT
)

	)

12 
	#PAGE_MASK
 ~(
PAGE_SIZE
 - 1)

	)

14 
	#PDPE_OFFSET
(
x
Ë((x >> 39Ë& 0x1FF)

	)

15 
	#PDE_OFFSET
(
x
Ë((x >> 30Ë& 0x1FF)

	)

16 
	#PMD_OFFSET
(
x
Ë((x >> 21Ë& 0x1FF)

	)

17 
	#PTE_OFFSET
(
x
Ë((x >> 12Ë& 0x1FF)

	)

19 
	#NPT_TAB_RESERVE_MEM
 (48UL*1024*1024*1024/512)

20 
	#SNULL_RESERVE_MEM
 (100*1024*1024)

21 

	)

24 
uöt64_t
 *
	$gë_±e
(
uöt64_t
 *
¸3
, uöt64_à
addr
, 
lvl
)

26 
uöt64_t
 *
pd≥
 = &
¸3
[
	`PDPE_OFFSET
(
addr
)];

27 if(!
pd≥
)

29 if(
lvl
 == 1)

30  
pd≥
;

31 
pd≥
 = (
uöt64_t
 *)(*pd≥ & 
PAGE_MASK
);

33 
uöt64_t
 *
pde
 = &
pd≥
[
	`PDE_OFFSET
(
addr
)];

34 if(!
pde
)

36 if(
lvl
 == 2)

37  
pde
;

38 
pde
 = (
uöt64_t
 *)(*pdê& 
PAGE_MASK
);

40 
uöt64_t
 *
pmd
 = &
pde
[
	`PMD_OFFSET
(
addr
)];

41 if(!
pmd
)

43 if(
lvl
 == 3)

44  
pmd
;

45 
pmd
 = (
uöt64_t
 *)(*pmd & 
PAGE_MASK
);

47 
uöt64_t
 *
±e
 = &
pmd
[
	`PTE_OFFSET
(
addr
)];

48 if(!
±e
)

51  
±e
;

52 
	}
}

54 
öô_≈t_≠ic
(
uöt64_t
 *
¸3
);

56 
öô_≈t_ønge
(
uöt64_t
 
addr
, uöt64_à
size
, 
did
, uöt64_à
phy_off£t
);

	@inc/osv.h

2 
	~"osv_vmm.h
"

5 
	sosv_skb
{

6 
osv_skb
 * 
	m√xt
;

7 
osv_addr
 
	msour
;

8 
osv_buf„r
 *
	mmsg
;

9 
	mp‹t
, 
	moff£t
, 
	mÀn
;

10 
	mty≥
;

13 
	sosv_skb_hód
{

14 
osv_skb
 * 
	m√xt
;

15 
osv_skb
 * 
	mèû
;

18 
£m
 
	mÀn
;

19 
£m
 
	mskb_lock
;

44 
	sosv_ªcv_msg
{

45 
	mmsg_Àn
;

46 
osv_addr
 
	msour
;

47 
	mde°_p‹t
;

48 
	mÊags
;

49 
	mty≥
;

50 
osv_buf„r
 *
	mmsg_d©a
;

53 
	sdomaö_buf_c⁄åﬁ
{

54 
	m°¨t
;

55 
	m•a˚_ödex
[
TAB_ENTRYS
];

57 
£m
 
	mbuf_lock
;

58 
	m‰ì_ödex
;

59 
	mmsg_‹dî
[
TAB_ENTRYS
];

60 
	mmsg_ödex
;

61 
£m
 
	mªcv_lock
;

63 
	míd
;

64 
osv_ªcv_msg
 
	mmsg
[
RECV_BUFF_LEN
/
BLOCK_SIZE
];

65 
	mÊag
;

	@inc/osv_vmm.h

1 #i‚de‡
__OSV_VMM_H__


2 
	#__OSV_VMM_H__


	)

4 
	#RECV_BUFF_BASE
 0x

	)

5 
	#RECV_BUFF_LEN
 (1024*1024*8)

	)

6 
	#RECV_TABLE_BASE
 0xXXXX

	)

7 
	#RECV_TABLE_N
 0xXXXX

	)

8 
	#SCHEDULE_TIMEOUT
 5

	)

9 
	#MAX_DOMAIN_NUM
 2

	)

10 
	#BLOCK_SIZE
 (1024*8)

	)

11 
	#TAB_ENTRYS
 (
RECV_BUFF_LEN
/
BLOCK_SIZE
)

	)

14 
	sosv_buf„r
 {

15 * 
	maddr
;

17 
	mÀn
;

20 
	sosv_addr
 {

21 
	mù
;

22 
	mp‹t
;

25 
	sosv_èbÀ_íåy
 {

26 
	mp‹t
;

27 
	m°©us
;

28 
	#OSV_STATUS_FREE
 0

	)

29 
	#OSV_STATUS_INUSE
 1

	)

30 
	mtime°amp
;

31 
osv_addr
 
	m§ˇddr
;

32 
osv_buf„r
 
	mbuff
;

33 
	mty≥
;

36 
	sosv_èbÀ
 {

37 
osv_èbÀ_íåy
 * 
	mŸ_èbÀ
;

38 
	mŸ_Àn
;

63 
å™s„r
(* 
buff
, 
osv_addr
 *
de°addr
, osv_add∏*
§ˇddr
, 
ty≥
);

76 
vmm_öô_osv
(
osv_buf„r
 
ªcv_buff
, 
osv_èbÀ
 
èbÀ
);

77 
vmm_exô_osv
();

	@inc/osvstd.h

1 
	#__NR_ªad
 0

	)

2 
	$__VMCALL
(
__NR_ªad
, 
vm_ªad
)

4 
	#__NR_wrôe
 1

	)

5 
	$__VMCALL
(
__NR_wrôe
, 
vm_wrôe
)

7 
	#__NR_›í
 2

	)

8 
	$__VMCALL
(
__NR_›í
, 
vm_›í
)

10 
	#__NR_˛o£
 3

	)

11 
	$__VMCALL
(
__NR_˛o£
, 
vm_˛o£
)

13 
	#__NR_vmmc⁄s
 4

	)

14 
	$__VMCALL
(
__NR_vmmc⁄s
, 
vmmc⁄s_öô
)

16 
	#__NR_vm°¨t
 5

	)

17 
	$__VMCALL
(
__NR_vm°¨t
, 
°¨t_vm
)

19 
	#__NR_vmsockë
 6

	)

21 
	$__VMCALL
(
__NR_vmsockë
, 
vmm_sock
)

23 
	#__NR_vm≠ic
 7

	)

24 
	$__VMCALL
(
__NR_vm≠ic
, 
vm≠ic
)

26 
	#__NR_¢uŒ
 8

	)

27 
	$__VMCALL
(
__NR_¢uŒ
, 
¢uŒ_öô
)

29 
	#__NR_tx
 9

	)

30 
	$__VMCALL
(
__NR_tx
, 
¢uŒ_tx
)

32 
	#__NR_úq0
 10

	)

33 
	$__VMCALL
(
__NR_úq0
, 
úq0_f‹w¨d
)

35 
	#__NR_gë
 11

	)

36 
	$__VMCALL
(
__NR_gë
, 
¢uŒ_gë
)

38 
	#__NR_öã∫Æ
 12

	)

39 
	$__VMCALL
(
__NR_öã∫Æ
, 
¢uŒ_öã∫Æ_öô
)

41 
	#__NR_domaöid
 13

	)

42 
	$__VMCALL
(
__NR_domaöid
, 
gë_did
)

44 
	#__NR_gue°_ã°
 14

	)

45 
	$__VMCALL
(
__NR_gue°_ã°
, 
gue°_ã°
)

47 
	#__NR_debug_öô
 17

	)

48 
	$__VMCALL
(
__NR_debug_öô
, 
debug_¥ötf_öô
)

50 
	#__NR_¥ivacy_£t
 19

	)

51 
	$__VMCALL
(
__NR_¥ivacy_£t
, 
¥ivacy_£t
)

53 
	#__NR_vmmˇŒ_ã°
 21

	)

54 
	$__VMCALL
(
__NR_vmmˇŒ_ã°
, 
vmmˇŒ_ã°
)

56 
	#__NR_vmmˇŒ_dom¥öt
 22

	)

57 
	$__VMCALL
(
__NR_vmmˇŒ_dom¥öt
, 
vmmˇŒ_dom¥öt
)

59 
	#__NR_vmmˇŒ_öå_des
 23

	)

60 
	$__VMCALL
(
__NR_vmmˇŒ_öå_des
, 
vmmˇŒ_öå_des
)

62 
	#__NR_vmmˇŒ_°ï_íabÀ
 24

	)

63 
	`__VMCALL
(
__NR_vmmˇŒ_°ï_íabÀ
, 
vmmˇŒ_°ï_íabÀ
)

	@inc/pci.h

1 #i‚de‡
PCI_HEADER


2 
	#PCI_HEADER


	)

4 
	~<öc/ty≥s.h
>

5 
	~<öc/x86.h
>

6 
	~<öc/vmcb.h
>

7 
	~<öc/≥r˝u.h
>

8 
	~<öc/°dio.h
>

10 
	#USB_KBD_PCI_ADDR
 (0x13<<11)

	)

11 
	spci_c⁄fig_hódî
{

12 
uöt16_t
 
	mvíd‹_id
;

13 
uöt16_t
 
	mdevi˚_id
;

14 
uöt16_t
 
	mcomm™d
;

15 
uöt16_t
 
	m°©us
;

16 
uöt8_t
 
	mªvisi⁄_id
;

17 
uöt8_t
 
	m˛ass_code0
;

18 
uöt8_t
 
	m˛ass_code1
;

19 
uöt8_t
 
	m˛ass_code2
;

20 
uöt8_t
 
	mˇche_löe_size
;

21 
uöt8_t
 
	mœãncy
;

22 
uöt8_t
 
	mty≥
;

23 
uöt8_t
 
	mbi°
;

24 
uöt64_t
 
	mba£_addr0
;

25 
uöt64_t
 
	mba£_addr1
;

26 
uöt64_t
 
	mba£_addr2
;

27 
uöt32_t
 
	mcis_poöãr
;

28 
uöt16_t
 
	msub_víd‹_id
;

29 
uöt16_t
 
	msubsy°em_id
;

30 
uöt32_t
 
	mex_rom_ba£
;

31 
uöt8_t
 
	mˇ∑bûôõs
;

32 
uöt8_t
 
	mª£rved
[7];

33 
uöt8_t
 
	möå_löe
;

34 
uöt8_t
 
	möå_pö
;

35 
uöt8_t
 
	mmö_g¡
;

36 
uöt8_t
 
	mmax_œt
;

37 }
__©åibuã__
((
__∑cked__
));

39 
	spci_bridge_hódî
{

40 
uöt16_t
 
	mvíd‹_id
;

41 
uöt16_t
 
	mdevi˚_id
;

42 
uöt16_t
 
	mcomm™d
;

43 
uöt16_t
 
	m°©us
;

44 
uöt8_t
 
	mªvisi⁄_id
;

45 
uöt8_t
 
	m˛ass_code0
;

46 
uöt8_t
 
	m˛ass_code1
;

47 
uöt8_t
 
	m˛ass_code2
;

48 
uöt8_t
 
	mˇche_löe_size
;

49 
uöt8_t
 
	m¥im¨y_œãncy
;

50 
uöt8_t
 
	mty≥
;

51 
uöt8_t
 
	mbi°
;

52 
uöt32_t
 
	mba£_addr0
;

53 
uöt32_t
 
	mba£_addr1
;

54 
uöt8_t
 
	m¥im¨y_bus
;

55 
uöt8_t
 
	m£c⁄d_bus
;

56 
uöt8_t
 
	msub_bus
;

57 
uöt8_t
 
	m£c⁄d_œãncy
;

58 
uöt8_t
 
	mio_ba£
;

59 
uöt8_t
 
	mio_limô
;

60 
uöt16_t
 
	m£c⁄d_°©us
;

61 
uöt16_t
 
	mmem_ba£
;

62 
uöt16_t
 
	mmem_limô
;

63 
uöt16_t
 
	m¥e„t_mem_ba£
;

64 
uöt16_t
 
	m¥e„t_mem_limô
;

65 
uöt32_t
 
	m¥e„t_ba£_uµî
;

66 
uöt32_t
 
	m¥e„t_limô_uµî
;

67 
uöt16_t
 
	mio_ba£_uµî
;

68 
uöt16_t
 
	mio_limô_uµî
;

69 
uöt8_t
 
	mˇ∑bûôõs
;

70 
uöt8_t
 
	mª£rved
[3];

71 
uöt32_t
 
	mex_rom_ba£
;

72 
uöt8_t
 
	möå_löe
;

73 
uöt8_t
 
	möå_pö
;

74 
uöt16_t
 
	mbridge_c⁄åﬁ
;

75 }
__©åibuã__
((
__∑cked__
));

77 
pci_c⁄fig_ac˚ss
(
vmcb
 *vmcb);

81 
gë_pci_hódî
(
uöt32_t
 
dev_id
, *
addr
);

82 
gë_pci_dw
(
uöt32_t
 
dev_id
, 
off£t
, uöt32_à*
vÆ
);

	@inc/percpu.h

1 #i‚de‡
PERCPU_HEADER


2 
	#PERCPU_HEADER


	)

3 
	~<öc/ty≥s.h
>

10 
	#DEFINE_PER_CPU
(
ty≥
, 
«me
) \

11 
	`ty≥of
(
ty≥
Ë
≥r_˝u_
##
«me
 
	`__©åibuã__
((
	`__£˘i⁄__
(".d©a.≥r˝u")))

	)

13 
	sosv_pda


15 
uöt64_t
 
	moff£t
;

16 
uöt64_t
 
	m˝ulid
;

17 
uöt64_t
 
	m˝upid
;

18 
uöt64_t
 
	m˝udid
;

19 
uöt64_t
 
	mvmcb_addr
;

20 } 
__©åibuã__
((
Æig√d
(64)));

22 
osv_pda
 
pda
[32];

23 
osv_pda
 
	g__¥oxy_pda
;

25 
	#pda_off£t
(
fõld
Ë
	`off£tof
(
osv_pda
, fõld)

	)

27 
	#pda_to_›
(
›
, 
fõld
, 
vÆ
) \

29 
	`ty≥of
(
	t__¥oxy_pda
.
	tfõld
Ë
	t__T
; \

30 (
__¥oxy_pda
.
fõld
)) \

33 
	`__asm__
(
›
"w %1, %%gs:%c2": \

34 "+m"(
__¥oxy_pda
.
fõld
): \

35 "ri"((
__T
)
vÆ
), \

36 "i"(
	`pda_off£t
(
fõld
))); \

39 
	`__asm__
(
›
"l %1, %%gs:%c2": \

40 "+m"(
__¥oxy_pda
.
fõld
): \

41 "ri"((
__T
)
vÆ
), \

42 "i"(
	`pda_off£t
(
fõld
))); \

45 
	`__asm__
(
›
"q %1, %%gs:%c2": \

46 "+m"(
__¥oxy_pda
.
fõld
): \

47 "ri"((
__T
)
vÆ
), \

48 "i"(
	`pda_off£t
(
fõld
))); \

51 } 0)

	)

55 
	#pda_‰om_›
(
›
, 
fõld
) \

57 
	`ty≥of
(
__¥oxy_pda
.
fõld
Ë
ªt__
; \

58 
ªt__
 = 0; \

59 (
__¥oxy_pda
.
fõld
)) \

62 
	`__asm__
(
›
"w %%gs:%c1, %0": \

63 "Ù"(
ªt__
): \

64 "i"(
	`pda_off£t
(
fõld
)), \

65 "m"(
__¥oxy_pda
.
fõld
)); \

68 
	`__asm__
(
›
"l %%gs:%c1, %0": \

69 "Ù"(
ªt__
): \

70 "i"(
	`pda_off£t
(
fõld
)), \

71 "m"(
__¥oxy_pda
.
fõld
)); \

74 
	`__asm__
(
›
"q %%gs:%c1, %0": \

75 "Ù"(
ªt__
): \

76 "i"(
	`pda_off£t
(
fõld
)), \

77 "m"(
__¥oxy_pda
.
fõld
)); \

80 
ªt__
; \

81 })

	)

83 
	#ªad_pda
(
fõld
Ë
	`pda_‰om_›
("mov", fõld)

	)

84 
	#wrôe_pda
(
fõld
, 
vÆ
Ë
	`pda_to_›
("mov", fõld, vÆ)

	)

86 
≥r˝u_öô
();

87 
˝u_öô
();

	@inc/pmap.h

1 
	~<öc/ty≥s.h
>

4 
uöt64_t
 
pml1
[], 
pml2
[], 
pml3
[], 
pml4
[], 
pml_tmp2
[], 
pml_tmp3
[], 
pml_tmp4
[];

6 
uöt32_t
 
	$pml_ödex
(
uöt16_t
 
Àvñ
, 
uöt64_t
 
addr
)

8  (
uöt32_t
)((
addr
>>(9*
Àvñ
+12))&0x1ff);

9 
	}
}

11 
uöt64_t
 
	$∑ge_ödex
(
uöt64_t
 
addr
)

13  
addr
/0x1000;

14 
	}
}

16 
	$£t_pml_íåy
(
uöt64_t
 *
pg_dú
, 
uöt32_t
 
off£t
, uöt64_à
addr
)

18 *(
pg_dú
 + 
off£t
Ë
addr
;

20 
	}
}

	@inc/privacy.h

2 #i‚de‡
PRIVACY_HEADER


3 
	#PRIVACY_HEADER


	)

4 
	~<öc/x86.h
>

5 
	~<öc/svm.h
>

6 
	~<öc/gue°_sysˇŒ.h
>

8 
ölöe
 
	$£t_±e_Êag
(
uöt64_t
 *
±e
, uöt64_à
Êag
)

10 *
±e
 |
Êag
;

11 
	}
}

13 
ölöe
 
	$˛ór_±e_Êag
(
uöt64_t
 *
±e
, uöt64_à
Êag
)

15 *
±e
 &
Êag
;

16 
	}
}

18 
öãr˚±_¸3_›
(
vmcb
 *vmcb, 
gíîl_ªgs
 *
ªgs
);

20 
≈t_Áu…_h™dÀ
(
vmcb
 *vmcb, 
gíîl_ªgs
 *
ªgs
);

22 
°ï_h™dÀ
(
vmcb
 *vmcb, 
gíîl_ªgs
 *
ªgs
);

24 
unmask_u§_mem_ønge
(
vmcb
* vmcb, 
uöt64_t
 
addr_°¨t
, uöt64_à
addr_íd
);

27 
uöt64_t
 
≈t_åavñ
(uöt64_à
addr
, uöt64_à
¸3
 );

28 
uöt64_t
 
≈t_åavñ1
(uöt64_à
addr
, uöt64_à
¸3
 );

29 
gue°_brk_›s
 
brk_ªc‹d
[32];

30 
gue°_unm≠_›s
 
unm≠_ªc‹d
[32];

33 
°¨t_¥Ÿe˘
(
vmcb
 *vmcb);

35 
‰ì_∑ges
(
vmcb
 *vmcb);

38 
£t_¥ivacy_≈t
(
vmcb
 *vmcb);

40 
h™dÀ_idt_öãºu±_öãr˚±s
(
vmcb
 *vmcb);

42 
vmcb
 *
¥ivacy_vmcb
;

44 
	#USR_NPT
 (600*1024*1024)

	)

46 
	#KERNEL_GS_OFFSET
 0xb860

	)

47 
	#PER_CPU_SIZE
 0x12b40

	)

48 
	#IDT_TABLE
 0xffffffff819a5000UL

	)

49 
	#NMI_IDT_TABLE
 0xffffffff819a6000UL

	)

50 
	#SYSTEM_CALL
 0xffffffff81419e50UL

	)

51 
	#PAGE_FAULT
 0xffffffff81419670UL

	)

52 
	#GENERAL_PROTECTION
 0xffffffff81419640UL

	)

53 
	#DEV_NOT_AVAILABLE
 0xffffffff8141b040UL

	)

54 
	#IRQ_ENTRIES_START
 0xffffffff8141a540UL

	)

55 
	#IRQ_ENTRIES_END
 0xffffffff8141a940UL

	)

56 
	#APIC_TIMER
 0xffffffff8141Ø40UL

	)

57 
	#INVALID_OP
 0xffffffff8141b020UL

	)

58 
	#NMI_INTR
 0xffffffff81419930UL

	)

60 
	s∑ges_‰ì
{

61 
uöt32_t
 
	m°¨t
;

62 
£m
 
	mgë_lock
;

63 
uöt32_t
 
	míd
;

64 
£m
 
	mput_lock
;

65 }* 
	gpfd
;

67 
	smem_ønge
{

68 
uöt64_t
 
	m°¨t
;

69 
uöt64_t
 
	míd
;

72 
	saddr_l
{

73 
uöt64_t
 
	m°¨t
;

74 
uöt64_t
 
	míd
;

75 *
	m«me
;

76 
	m¥Ÿ
;

77 
	msub_num
;

80 
	ssub_£g_l
{

81 
uöt64_t
 
	m°¨t
;

82 
uöt64_t
 
	míd
;

83 
	m¥Ÿ
;

84 
	m√xt
;

	@inc/queue.h

35 #i‚de‡
JOS_INC_QUEUE_H


36 
	#JOS_INC_QUEUE_H


	)

52 
	sFrob


54 
	m‰obozz
;

55 
LIST_ENTRY
(
Frob
Ë
	m‰ob_lök
;

58 
	$LIST_HEAD
(
Frob_li°
, 
Frob
)

60 
Frob_li°
 
Êi°
;

62 
	`LIST_INIT
(&
Êi°
);

63 
Êi°
 = 
	`LIST_HEAD_INITIALIZER
(&flist);

65 if(
	$LIST_EMPTY
(&
Êi°
))

66 
	`¥ötf
("list isÉmpty\n");

68 
Frob
 *
f
 = 
	`LIST_FIRST
(&
Êi°
);

69 
f
 = 
	`LIST_NEXT
(f, 
‰ob_lök
);

70 
f
 = 
	`LIST_NEXT
(f, 
‰ob_lök
);

72 
f
=
	`LIST_FIRST
(&
Êi°
); f != 0;

73 
f
 = 
	$LIST_NEXT
(
f
, 
‰ob_lök
))

74 
	`¥ötf
("‡%d\n", 
f
->
‰obozz
);

76 
	$LIST_FOREACH
(
f
, &
Êi°
, 
‰ob_lök
)

77 
	`¥ötf
("‡%d\n", 
f
->
‰obozz
);

79 
f
 = 
	`LIST_NEXT
(
	`LIST_FIRST
(&
Êi°
));

80 
	`LIST_INSERT_AFTER
(
f
, 
g
, 
‰ob_lök
);

81 
	`LIST_REMOVE
(
g
, 
‰ob_lök
);

82 
	`LIST_INSERT_BEFORE
(
f
, 
g
, 
‰ob_lök
);

83 
	`LIST_REMOVE
(
g
, 
‰ob_lök
);

84 
	`LIST_INSERT_HEAD
(&
Êi°
, 
g
, 
‰ob_lök
);

109 
	#LIST_HEAD
(
«me
, 
ty≥
) \

110 
	s«me
 { \

111 
ty≥
 *
lh_fú°
; \

112 }

	)

118 
	#LIST_HEAD_INITIALIZER
(
hód
) \

119 { 
NULL
 
	}

	)
}

129 
	#LIST_ENTRY
(
ty≥
) \

131 
ty≥
 *
À_√xt
; \

132 
ty≥
 **
À_¥ev
; \

133 }

	)

142 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

147 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

153 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

160 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

161 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

162 (
v¨
); \

163 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

168 
	#LIST_INIT
(
hód
) do { \

169 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

170 } 0)

	)

177 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

178 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

179 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

180 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

181 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

182 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

183 } 0)

	)

190 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

191 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

192 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

193 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

194 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

195 } 0)

	)

201 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

202 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

203 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field);\

204 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

205 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

206 } 0)

	)

212 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

213 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

214 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

215 (
ñm
)->
fõld
.
À_¥ev
; \

216 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

217 } 0)

	)

	@inc/sem.h

1 
	~<öc/ty≥s.h
>

3 
	s£m


5 vﬁ©ûê
	m£mph
;

	@inc/socket.h

1 
	~<öc/ty≥s.h
>

2 
	~<öc/svm.h
>

4 
	ggsockë
;

9 vﬁ©ûê
	mlocked
;

10 
	mid
;

11 
	mpos
;

12 }
	tbuff_des
;

16 *
	mbuff
;

17 
	mÀngth
;

18 
	mèû
, 
	mhód
, 
	m√xt
;

19 }
	tbuf„r_ˇche
;

23 
	msockid
;

24 
buff_des
 *
	mdes¸
;

25 
buf„r_ˇche
 *
	mbˇche
;

26 }
	tsockë
;

28 
vmm_sock
(
gíîl_ªgs
 *
ªgs
);

	@inc/stab.h

1 #i‚de‡
JOS_STAB_H


2 
	#JOS_STAB_H


	)

3 
	~<öc/ty≥s.h
>

15 
	#N_GSYM
 0x20

16 
	#N_FNAME
 0x22

17 
	#N_FUN
 0x24

18 
	#N_STSYM
 0x26

19 
	#N_LCSYM
 0x28

20 
	#N_MAIN
 0x2a

21 
	#N_PC
 0x30

22 
	#N_RSYM
 0x40

23 
	#N_SLINE
 0x44

24 
	#N_DSLINE
 0x46

25 
	#N_BSLINE
 0x48

26 
	#N_SSYM
 0x60

27 
	#N_SO
 0x64

28 
	#N_LSYM
 0x80

29 
	#N_BINCL
 0x82

30 
	#N_SOL
 0x84

31 
	#N_PSYM
 0xa0

32 
	#N_EINCL
 0xa2

33 
	#N_ENTRY
 0xa4

34 
	#N_LBRAC
 0xc0

35 
	#N_EXCL
 0xc2

36 
	#N_RBRAC
 0xe0

37 
	#N_BCOMM
 0xe2

38 
	#N_ECOMM
 0xe4

39 
	#N_ECOML
 0xe8

40 
	#N_LENG
 0xfe

41 

	)

43 
	sSèb
 {

44 
uöt32_t
 
	mn_°rx
;

45 
uöt8_t
 
	mn_ty≥
;

46 
uöt8_t
 
	mn_Ÿhî
;

47 
uöt16_t
 
	mn_desc
;

48 
uöçå_t
 
	mn_vÆue
;

	@inc/stdio.h

1 #i‚de‡
JOS_INC_STDIO_H


2 
	#JOS_INC_STDIO_H


	)

4 
	~<öc/ty≥s.h
>

5 
	~<°d¨g.h
>

7 #i‚de‡
NULL


8 
	#NULL
 ((*Ë0)

	)

12 
˝utch¨
(
c
);

13 
gëch¨
();

14 
isc⁄s
(
fd
);

17 
¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
fmt
, ...);

18 
v¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
);

21 
•rötf
(*
buf
, c⁄° *
fmt
, ...);

24 
¥ötf
(c⁄° *
fmt
, ...);

25 
Ârötf
(
fd
, c⁄° *
fmt
, ...);

26 
vÂrötf
(
fd
, c⁄° *
fmt
, 
va_li°
);

29 * 
ªadlöe
(c⁄° *
¥om±
);

33 *
tmÆloc
(
size_t
 
size
);

34 
t‰ì
(*
°¨t
);

37 
¥ötfmt
((*
putch
)(, *), *
putd©
,

38 c⁄° *
fmt
, ...)

39 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

40 
	`v¥ötfmt
((*
putch
)(, *), *
putd©
,

41 c⁄° *
fmt
, 
va_li°
)

42 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

44 c⁄° *
	`e2s
(
îr
);

45 c⁄° *
	`sysˇŒ2s
(
sys
);

50 
£m
 
¥öt_£m
;

51 
	$debug_¥ötf
(c⁄° *
fmt
, ...)

52 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

53 
	$lock_˝rötf
(c⁄° *
fmt
, ...)

54 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

55 
	$˝rötf
(c⁄° *
fmt
, ...)

56 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

57 
	`cÊush
();

58 
	$v˝rötf
(c⁄° *
fmt
, 
va_li°
)

59 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

	@inc/string.h

1 #i‚de‡
JOS_INC_STRING_H


2 
	#JOS_INC_STRING_H


	)

4 
	~<öc/ty≥s.h
>

6 
°æí
(c⁄° *
s
);

7 
°∫Àn
(c⁄° *
s
, 
size_t
 
size
);

8 * 
°r˝y
(*
d°
, c⁄° *
§c
);

9 * 
°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
);

10 
size_t
 
°æ˝y
(*
d°
, c⁄° *
§c
, size_à
size
);

11 
°rcmp
(c⁄° *
s1
, c⁄° *
s2
);

12 
°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
size
);

13 * 
°rchr
(c⁄° *
s
, 
c
);

14 * 
°rföd
(c⁄° *
s
, 
c
);

16 * 
mem£t
(*
d°
, 
c
, 
size_t
 
Àn
);

18 * 
memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

19 
memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
);

20 * 
memföd
(c⁄° *
s
, 
c
, 
size_t
 
Àn
);

21 * 
mem˝y
(*
d°0
, c⁄° *
§c0
, 
size_t
 
Àngth
);

23 
°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
);

	@inc/svm.h

1 #i‚de‡
SVM_HEADER


2 
	#SVM_HEADER


	)

4 
	~<öc/boŸ1.h
>

5 
	~<öc/ty≥s.h
>

6 
	~<öc/vmcb.h
>

7 
	~<öc/°dio.h
>

8 
	~<öc/a˝i.h
>

10 
	#EFER_SVME
 0x1000

	)

12 
	sgíîl_ªgs


14 
uöt64_t
 
	mrdi
;

15 
uöt64_t
 
	mrsi
;

16 
uöt64_t
 
	mrcx
;

17 
uöt64_t
 
	mrdx
;

18 
uöt64_t
 
	mr8
;

19 
uöt64_t
 
	mr9
;

20 
uöt64_t
 
	mr10
;

21 
uöt64_t
 
	mr11
;

22 
uöt64_t
 
	mrbp
;

23 
uöt64_t
 
	mrbx
;

24 
uöt64_t
 
	mr12
;

25 
uöt64_t
 
	mr13
;

26 
uöt64_t
 
	mr14
;

27 
uöt64_t
 
	mr15
;

28 
uöt64_t
 
	møx
;

29 }
__©åibuã__
 ((
∑cked
));

33 
uöt64_t
 
	m•a˚
[1024];

34 
gíîl_ªgs
 
	mgªgs
;

35 }
	t__©åibuã__
 ((
	t∑cked
)Ë
	tvm_‰ame
;

39 
uöt8_t
 
	gi›m
[4096*64] 
__©åibuã__
((
Æig√d
 (4096), 
£˘i⁄
 (".data")));

40 
uöt8_t
 
	gm§pm
[4096*64] 
__©åibuã__
((
Æig√d
 (4096), 
£˘i⁄
 (".data")));

42 
svm_run
();

43 
°¨t_svm
(
id
);

44 
ª°_°ack_run_svm
(
vmcb
 *vmcb, 
vm_‰ame
 *
v‰m1
);

45 
svm_exô_h™dÀr
(
uöt64_t
);

48 
m§_öãr
(*
pm
, 
uöt32_t
 
m§
, uöt32_à
acc
);

49 
svm_e„r_¥o
(
vmcb
 *vmcb);

50 
°¨t_domaö
(
id
);

51 
p‹t_öãr˚±_£t
(*
m≠
, 
p‹t
);

52 
io_öãr˚±
(
vmcb
 *vmcb);

53 
úq_öje˘
(
vmcb
 *vmcb, 
uöt64_t
 
úqno
);

54 
íabÀ_≈t
(
vmcb
 *vmcb, 
did
);

55 
uöt64_t
 
sh¨ed_mem‹y_m≠
(uöt64_à
p_addr
, uöt64_à
Àn
, uöt64_à
n_¸3
, 
id
);

56 
vmˇŒ
(
uöt64_t
 
øx
, 
gíîl_ªgs
 *
gªgs
);

57 
sysx_öfo
 
sys_io
;

58 *
madt_°¨t
, *
madt_íd
;

59 
madt_∑ge
[4096*2];

62 
ölöe
 
uöt64_t
 
	$vút_åavñ
(
uöt64_t
 
addr
, uöt64_à
¸3
, 
Àvñ
)

64 
uöt64_t
 *
tmp
, 
vÆue
;

65 
uöt32_t
 
ödex
;

66 
¸3
 &= 0xffffffffff000UL;

67 
tmp
 = (
uöt64_t
 *)
¸3
;

68 
	`lock_˝rötf
("CR3:%lx\t", 
¸3
);

69 
ödex
 = (
addr
 >> 39) & 0x1ff;

70 
vÆue
 = *(
tmp
 + 
ödex
);

71 if((
vÆue
 & 1) == 0){

72 
	`lock_˝rötf
("SecondÖageÜevelÇon-present");

73 
out
;

75 
	`lock_˝rötf
("2:%lx, ", 
vÆue
);

76 if(
Àvñ
 == 2){

77 
	`lock_˝rötf
("\n");

78  
vÆue
;

81 
tmp
 = (
uöt64_t
 *)(
vÆue
 & 0xffffffffff000UL);

82 
ödex
 = (
addr
 >> 30) & 0x1ff;

83 
vÆue
 = *(
tmp
 + 
ödex
);

84 if((
vÆue
 & 1) == 1){

85 if((
vÆue
&0x80)!=0){

86 
	`lock_˝rötf
("3:%lx --- 1GÖage", 
vÆue
);

87 
out
;

90 
	`lock_˝rötf
("ThirdÖageÜevelÇon-present");

91 
out
;

93 
	`lock_˝rötf
("3:%lx, ", 
vÆue
);

94 if(
Àvñ
 == 3){

95 
	`lock_˝rötf
("\n");

96  
vÆue
;

99 
tmp
 = (
uöt64_t
 *)(
vÆue
 & 0xffffffffff000UL);

100 
ödex
 = (
addr
 >> 21) & 0x1ff;

101 
vÆue
 = *(
tmp
 + 
ödex
);

102 if((
vÆue
 & 1) == 1){

103 if((
vÆue
&0x80)!=0){

104 
	`lock_˝rötf
("4:%lx --- 2MÖage", 
vÆue
);

105 
out
;

108 
	`lock_˝rötf
("FourthÖageÜevelÇon-present");

109 
out
;

111 
	`lock_˝rötf
("4:%lx, ", 
vÆue
);

112 if(
Àvñ
 == 4){

113 
	`lock_˝rötf
("\n");

114  
vÆue
;

117 
tmp
 = (
uöt64_t
 *)(
vÆue
 & 0xffffffffff000UL);

118 
ödex
 = (
addr
 >> 12) & 0x1ff;

119 
vÆue
 = *(
tmp
 + 
ödex
);

120 if((
vÆue
&1)==1){

121 
	`lock_˝rötf
("Addr:%lx", 
vÆue
);

123 
	`lock_˝rötf
("PhyÖageÇot-present");

126 
out
:

127 
	`lock_˝rötf
("\n");

129 
	}
}

130 
ölöe
 
uöt64_t
 
	$phy_to_machöe1
(
uöt64_t
 
addr
, 
did
, uöt64_à
¸3
, 
ty≥
, 
löe
)

132 
uöt64_t
 
pml4e
, 
pd≥
, 
pde
, 
±e
, 
pgt
, 
ªt_addr
 = 0;

133 
uöt32_t
 *
£g_des
;

134 
uöt32_t
 
£gmít_ba£
;

137 
pgt
 = (
¸3
 & 0xffffffffff000UL);

138 if(
did
 == 1){

139 if(
pgt
>0x100000){

140 
pgt
 +
node
[1].
ba£_addr
 - 0x100000;

142 
	`lock_˝rötf
("Out\n");

146 
pml4e
 = *((
uöt64_t
 *)(
pgt
 + ((
addr
>>39) & 0x1ff)*8));

148 
pml4e
 = (pml4e & 0xffffffffff000UL);

149 if(
did
 == 1){

150 if(
pml4e
>0x100000){

151 
pml4e
 +
node
[1].
ba£_addr
 - 0x100000;

153 
	`lock_˝rötf
("Out\n");

157 
pd≥
 = *((
uöt64_t
 *)(
pml4e
 + ((
addr
>>30) &0x1ff)*8));

158 if((
pd≥
&1)==1){

159 if((
pd≥
 & 0x80) != 0){

160 
pd≥
 = (pdpe & 0xfffffc0000000UL);

161  
pd≥
+(
addr
&0x3fffffff);

165 
	`lock_˝rötf
("1G NuŒÖage,Üöe:%d\n", 
löe
);

170 
pd≥
 = (pdpe & 0xffffffffff000UL);

171 if(
did
 == 1){

172 if(
pd≥
>0x100000){

173 
pd≥
 +
node
[1].
ba£_addr
 - 0x100000;

175 
	`lock_˝rötf
("Out\n");

179 
pde
 = *((
uöt64_t
 *)(
pd≥
 + ((
addr
>>21) & 0x1ff)*8));

180 if((
pde
&1)==1){

181 if((
pde
 & 0x80)!=0){

182 
pde
 = (pde & 0xfffffffe00000UL);

183  
pde
 + (
addr
&0x1fffff);

187 
	`lock_˝rötf
("2M NuŒÖage,Üöe:%d\n", 
löe
);

192 
pde
 = (pde & 0xffffffffff000UL);

193 if(
did
 == 1){

194 if(
pde
>0x100000){

195 
pde
 +
node
[1].
ba£_addr
 - 0x100000;

197 
	`lock_˝rötf
("Out\n");

201 
±e
 = *((
uöt64_t
 *)(
pde
 + ((
addr
>>12) & 0x1ff)*8));

202 
	`lock_˝rötf
("\¿±e: %lx, %lx\n", 
±e
, 
addr
&0xfff);

203 if((
±e
&1)==1){

204 
±e
 = (pte & 0xffffffffff000UL);

205  
±e
+(
addr
&0xfff);

208 
	`lock_˝rötf
("4K NuŒÖage,Üöe:%d\n", 
löe
);

211 
	}
}

213 
ölöe
 
uöt64_t
 
	$phy_to_machöe
(
uöt64_t
 
addr
, 
did
, 
vmcb
 *vmcb, 
ty≥
, 
löe
)

215 
uöt64_t
 
pml4e
, 
pd≥
, 
pde
, 
±e
, 
pgt
, 
¸3
, 
ªt_addr
 = 0;

216 
uöt32_t
 *
£g_des
;

217 
uöt32_t
 
£gmít_ba£
;

219 
uöt16_t
 
£g_£l
;

221 if((
vmcb
->
¸0
 & 0x1) == 0){

222 if(
ty≥
 == 0){

223 
ªt_addr
 = 
vmcb
->
cs
.
£l
 & 0xffff;

224 
ªt_addr
 =Ñet_addr << 4;

225 
ªt_addr
 +
addr
;

226  
ªt_addr
;

228 
ªt_addr
 = 
vmcb
->
ds
.
£l
 & 0xffff;

229 
ªt_addr
 =Ñet_addr << 4;

230 
ªt_addr
 +
addr
;

231  
ªt_addr
;

236 if((
vmcb
->
e„r
 & 0x100) ==0){

237 if((
vmcb
->
¸0
 & 0x80000000) == 0){

238 if(
ty≥
 == 0){

239 
£g_£l
 = 
vmcb
->
cs
.
£l
 & 0xffff;

241 
£g_£l
 = 
vmcb
->
ds
.
£l
 & 0xffff;

243 if((
£g_£l
 & 0x4) == 0){

244 
£g_des
 = (
uöt32_t
 *)(
vmcb
->
gdå
.
ba£
 + (
£g_£l
 & 0xfff8));

246 
£g_des
 = (
uöt32_t
 *)(
vmcb
->
ldå
.
ba£
 + (
£g_£l
 & 0xfff8));

248 
ªt_addr
 = *
£g_des
 >> 16;

249 
£g_des
 ++;

250 
ªt_addr
 +(*
£g_des
 & 0xff)<<16;

251 
ªt_addr
 +(*
£g_des
 & 0xff000000);

252 
ªt_addr
 +
addr
;

253  
ªt_addr
;

255 
addr
 = 
ªt_addr
;

260 
¸3
 = 
vmcb
->cr3;

261 
pgt
 = (
¸3
 & 0xffffffffff000UL);

262 if(
did
 == 2){

263 if(
pgt
>0x100000){

264 
pgt
 +
node
[1].
ba£_addr
 - 0x100000;

266 
	`lock_˝rötf
("Out\n");

270 
pml4e
 = *((
uöt64_t
 *)(
pgt
 + ((
addr
>>39) & 0x1ff)*8));

271 
	`lock_˝rötf
("\¿pml4e: %lx\n", 
pml4e
);

272 
pml4e
 = (pml4e & 0xffffffffff000UL);

273 if(
did
 == 2){

274 if(
pml4e
>0x100000){

275 
pml4e
 +
node
[1].
ba£_addr
 - 0x100000;

277 
	`lock_˝rötf
("Out\n");

281 
pd≥
 = *((
uöt64_t
 *)(
pml4e
 + ((
addr
>>30) &0x1ff)*8));

282 if((
pd≥
&1)==1){

283 if((
pd≥
 & 0x80) != 0){

284 
pd≥
 = (pdpe & 0xfffffc0000000UL);

285  
pd≥
+(
addr
&0x3fffffff);

289 
	`lock_˝rötf
("1G NuŒÖage,Üöe:%d\n", 
löe
);

293 
	`lock_˝rötf
("\¿pd≥: %lx\n", 
pd≥
);

294 
pd≥
 = (pdpe & 0xffffffffff000UL);

295 if(
did
 == 2){

296 if(
pd≥
>0x100000){

297 
pd≥
 +
node
[1].
ba£_addr
 - 0x100000;

299 
	`lock_˝rötf
("Out\n");

303 
pde
 = *((
uöt64_t
 *)(
pd≥
 + ((
addr
>>21) & 0x1ff)*8));

304 if((
pde
&1)==1){

305 if((
pde
 & 0x80)!=0){

306 
pde
 = (pde & 0xfffffffe00000UL);

307  
pde
 + (
addr
&0x1fffff);

311 
	`lock_˝rötf
("2M NuŒÖage,Üöe:%d\n", 
löe
);

315 
	`lock_˝rötf
("\¿pde: %lx\n", 
pde
);

316 
pde
 = (pde & 0xffffffffff000UL);

317 if(
did
 == 2){

318 if(
pde
>0x100000){

319 
pde
 +
node
[1].
ba£_addr
 - 0x100000;

321 
	`lock_˝rötf
("Out\n");

325 
±e
 = *((
uöt64_t
 *)(
pde
 + ((
addr
>>12) & 0x1ff)*8));

326 
	`lock_˝rötf
("\¿±e: %lx, %lx\n", 
±e
, 
addr
&0xfff);

327 if((
±e
&1)==1){

328 
±e
 = (pte & 0xffffffffff000UL);

329  
±e
+(
addr
&0xfff);

331 
	`lock_˝rötf
("4K NullÖage,Üine:%d,áddr:%lx\n",

332 
löe
, 
addr
);

335 
	}
}

338 
ölöe
 
	$svm_vmlﬂd
(*
vmcb
)

340 
__asm__
 
	`__vﬁ©ûe__
 (".byte 0x0f, 0x01, 0xda"

341 : :"a"(
vmcb
):"memory");

342 
	}
}

344 
ölöe
 
	$svm_vmßve
(*
vmcb
)

346 
__asm__
 
	`__vﬁ©ûe__
 (".byte 0x0f, 0x01, 0xdb"

347 : :"a"(
vmcb
):"memory");

348 
	}
}

350 
	$svm_vmcb_öô
(
vmcb
 *vmcb, 
id
)

353 
vmcb
->
¸_öãr˚±s
 = 0;

357 
vmcb
->
dr_öãr˚±s
 = 0;

360 
vmcb
->
exc_öãr˚±s
 = 0;

366 
vmcb
->
öãr˚±s2
 = 
INTERCEPT_VMRUN


367 | 
INTERCEPT_VMCALL


368 | 
INTERCEPT_VMLOAD


369 | 
INTERCEPT_VMSAVE


370 | 
INTERCEPT_STGI


371 | 
INTERCEPT_CLGI
;

373 
vmcb
->
tsc_off£t
 = 0;

374 
vmcb
->
˝l
 = 0;

377 
vmcb
->
e„r
 = 
EFER_SVME
;

378 
vmcb
->
éb_c⁄åﬁ
 = 0;

381 
vmcb
->
gue°_asid
 = 
id
 + 1;

382 
vmcb
->
≈_íabÀ
 = 0;

383 
vmcb
->
n_¸3
 = 0;

384 
vmcb
->
lbr_vútuÆ
 = 0;

385 
vmcb
->
öå_t
.
öå_maskög
 = 0;

387 
vmcb
->
i›m_ba£_∑
 = (
uöt64_t
)
i›m
;

388 
vmcb
->
m§pm_ba£_∑
 = (
uöt64_t
)
m§pm
;

390 
vmcb
->
es
.
£l
 = 0x4000;

391 
vmcb
->
cs
.
£l
 = 0x4000;

392 
vmcb
->
ss
.
£l
 = 0x4000;

393 
vmcb
->
ds
.
£l
 = 0x4000;

394 
vmcb
->
fs
.
£l
 = 0x4000;

395 
vmcb
->
gs
.
£l
 = 0x4000;

397 
vmcb
->
es
.
©åib
 = 0x8a;

398 
vmcb
->
ss
.
©åib
 = 0x8a;

399 
vmcb
->
ds
.
©åib
 = 0x8a;

400 
vmcb
->
fs
.
©åib
 = 0x8a;

401 
vmcb
->
gs
.
©åib
 = 0x8a;

402 
vmcb
->
cs
.
©åib
 = 0x93;

404 
vmcb
->
es
.
limô
 = 0xffff;

405 
vmcb
->
cs
.
limô
 = 0xffff;

406 
vmcb
->
ds
.
limô
 = 0xffff;

407 
vmcb
->
ss
.
limô
 = 0xffff;

408 
vmcb
->
fs
.
limô
 = 0xffff;

409 
vmcb
->
gs
.
limô
 = 0xffff;

411 
vmcb
->
es
.
ba£
 = 0x40000;

412 
vmcb
->
ss
.
ba£
 = 0x40000;

413 
vmcb
->
cs
.
ba£
 = 0x40000;

414 
vmcb
->
ds
.
ba£
 = 0x40000;

415 
vmcb
->
fs
.
ba£
 = 0x40000;

416 
vmcb
->
gs
.
ba£
 = 0x40000;

418 
vmcb
->
idå
.
ba£
 = 0;

419 
vmcb
->
idå
.
limô
 = 256*4 - 1;

421 
vmcb
->
gdå
.
ba£
 = 0;

422 
vmcb
->
gdå
.
limô
 = 0xffff;

424 
vmcb
->
ldå
.
ba£
 = 0;

425 
vmcb
->
ldå
.
£l
 = 0;

426 
vmcb
->
ldå
.
limô
 = 0xffff;

427 
vmcb
->
ldå
.
©åib
 = 0x82;

429 
vmcb
->
å
.
©åib
 = 0x08b;

430 
vmcb
->
å
.
ba£
 = 0;

431 
vmcb
->
å
.
limô
 = 0xffff;

432 
vmcb
->
å
.
£l
 = 0;

435 
vmcb
->
rù
 = 0x47;

436 
vmcb
->
r•
 = 0x9000;

440 
vmcb
->
¸0
 = 0x60000010;

441 
vmcb
->
¸2
 = 0;

442 
vmcb
->
¸3
 = 0;

443 
vmcb
->
¸4
 = 0;

444 
	}
}

	@inc/types.h

1 #i‚de‡
JOS_MACHINE_TYPES_H


2 
	#JOS_MACHINE_TYPES_H


	)

4 #i‚de‡
NULL


5 
	#NULL
 (0)

	)

8 #i‚de‡
ölöe


9 
	#ölöe
 
__ölöe__


	)

12 
	#asm
 
__asm


	)

13 
	#ty≥of
 
__ty≥of


	)

14 vﬁ©ûê
__vﬁ©ûe


	)

16 
	tboﬁ_t
;

17 
	tboŸ
;

21 
__sig√d
 
	töt8_t
;

22 
	tuöt8_t
;

23 
	töt16_t
;

24 
	tuöt16_t
;

25 
	töt32_t
;

26 
	tuöt32_t
;

27 #i‡
__LONG_MAX__
==9223372036854775807L

28 
	töt64_t
;

29 
	tuöt64_t
;

30 
__öt128_t
 
	töt128_t
;

31 
__uöt128_t
 
	tuöt128_t
;

32 #ñi‡
__LONG_LONG_MAX__
==9223372036854775807LL

33 
	töt64_t
;

34 
	tuöt64_t
;

36 #îr‹ 
Missög
 64-
bô
 
ty≥


38 
uöt64_t
 
	t__uöt64_t
;

40 
uöt8_t
 
	t__u8
;

41 
uöt8_t
 
	t_u8
;

42 
uöt8_t
 
	tu8
;

44 
uöt16_t
 
	t__u16
;

45 
uöt16_t
 
	t_u16
;

46 
uöt16_t
 
	tu16
;

48 
uöt32_t
 
	t__u32
;

49 
uöt32_t
 
	t_u32
;

50 
uöt32_t
 
	tu32
;

52 
uöt64_t
 
	t__u64
;

53 
uöt64_t
 
	t_u64
;

54 
uöt64_t
 
	tu64
;

63 
__PTRDIFF_TYPE__
 
	töçå_t
;

64 
	t__PTRDIFF_TYPE__
 
	tuöçå_t
;

65 
	t__PTRDIFF_TYPE__
 
	tphyßddr_t
;

66 
	t__PTRDIFF_TYPE__
 
	tgue°addr_t
;

69 
uöt64_t
 
	tµn_t
;

71 
	~<°ddef.h
>

73 
	#PRIu64
 "ld"

	)

74 
	#PRIx64
 "lx"

	)

	@inc/vmcb.h

1 #i‚de‡
VMCB_HEADER


2 
	#VMCB_HEADER


	)

4 
	~<öc/ty≥s.h
>

9 
	eI¡î˚±bôs1


11 
	mINTERCEPT_INTR
 = 1 << 0,

12 
	mINTERCEPT_NMI
 = 1 << 1,

13 
	mINTERCEPT_SMI
 = 1 << 2,

14 
	mINTERCEPT_INIT
 = 1 << 3,

15 
	mINTERCEPT_VINTR
 = 1 << 4,

16 
	mINTERCEPT_CR0_SEL_WRITE
 = 1 << 5,

17 
	mINTERCEPT_IDTR_READ
 = 1 << 6,

18 
	mINTERCEPT_GDTR_READ
 = 1 << 7,

19 
	mINTERCEPT_LDTR_READ
 = 1 << 8,

20 
	mINTERCEPT_TR_READ
 = 1 << 9,

21 
	mINTERCEPT_IDTR_WRITE
 = 1 << 10,

22 
	mINTERCEPT_GDTR_WRITE
 = 1 << 11,

23 
	mINTERCEPT_LDTR_WRITE
 = 1 << 12,

24 
	mINTERCEPT_TR_WRITE
 = 1 << 13,

25 
	mINTERCEPT_RDTSC
 = 1 << 14,

26 
	mINTERCEPT_RDPMC
 = 1 << 15,

27 
	mINTERCEPT_PUSHF
 = 1 << 16,

28 
	mINTERCEPT_POPF
 = 1 << 17,

29 
	mINTERCEPT_CPUID
 = 1 << 18,

30 
	mINTERCEPT_RSM
 = 1 << 19,

31 
	mINTERCEPT_IRET
 = 1 << 20,

32 
	mINTERCEPT_SWINT
 = 1 << 21,

33 
	mINTERCEPT_INVD
 = 1 << 22,

34 
	mINTERCEPT_PAUSE
 = 1 << 23,

35 
	mINTERCEPT_HLT
 = 1 << 24,

36 
	mINTERCEPT_INVLPG
 = 1 << 25,

37 
	mINTERCEPT_INVLPGA
 = 1 << 26,

38 
	mINTERCEPT_IOIO_PROT
 = 1 << 27,

39 
	mINTERCEPT_MSR_PROT
 = 1 << 28,

40 
	mINTERCEPT_TASK_SWITCH
 = 1 << 29,

41 
	mINTERCEPT_FERR_FREEZE
 = 1 << 30,

42 
	mINTERCEPT_SHUTDOWN_EVT
 = 1 << 31

45 
	eI¡î˚±bôs2


47 
	mINTERCEPT_VMRUN
 = 1 << 0,

48 
	mINTERCEPT_VMCALL
 = 1 << 1,

49 
	mINTERCEPT_VMLOAD
 = 1 << 2,

50 
	mINTERCEPT_VMSAVE
 = 1 << 3,

51 
	mINTERCEPT_STGI
 = 1 << 4,

52 
	mINTERCEPT_CLGI
 = 1 << 5,

53 
	mINTERCEPT_SKINIT
 = 1 << 6,

54 
	mINTERCEPT_RDTSCP
 = 1 << 7,

55 
	mINTERCEPT_ICEBP
 = 1 << 8,

56 
	mINTERCEPT_WBINVD
 = 1 << 9,

57 
	mINTERCEPT_MONITOR
 = 1 << 10,

58 
	mINTERCEPT_MWAIT
 = 1 << 11,

59 
	mINTERCEPT_MWAIT_CONDITIOANL
 = 1 << 12

62 
	eCRI¡î˚±Bôs


64 
	mCR_INTERCEPT_CR0_READ
 = 1 << 0,

65 
	mCR_INTERCEPT_CR1_READ
 = 1 << 1,

66 
	mCR_INTERCEPT_CR2_READ
 = 1 << 2,

67 
	mCR_INTERCEPT_CR3_READ
 = 1 << 3,

68 
	mCR_INTERCEPT_CR4_READ
 = 1 << 4,

69 
	mCR_INTERCEPT_CR5_READ
 = 1 << 5,

70 
	mCR_INTERCEPT_CR6_READ
 = 1 << 6,

71 
	mCR_INTERCEPT_CR7_READ
 = 1 << 7,

72 
	mCR_INTERCEPT_CR8_READ
 = 1 << 8,

73 
	mCR_INTERCEPT_CR9_READ
 = 1 << 9,

74 
	mCR_INTERCEPT_CR10_READ
 = 1 << 10,

75 
	mCR_INTERCEPT_CR11_READ
 = 1 << 11,

76 
	mCR_INTERCEPT_CR12_READ
 = 1 << 12,

77 
	mCR_INTERCEPT_CR13_READ
 = 1 << 13,

78 
	mCR_INTERCEPT_CR14_READ
 = 1 << 14,

79 
	mCR_INTERCEPT_CR15_READ
 = 1 << 15,

80 
	mCR_INTERCEPT_CR0_WRITE
 = 1 << 16,

81 
	mCR_INTERCEPT_CR1_WRITE
 = 1 << 17,

82 
	mCR_INTERCEPT_CR2_WRITE
 = 1 << 18,

83 
	mCR_INTERCEPT_CR3_WRITE
 = 1 << 19,

84 
	mCR_INTERCEPT_CR4_WRITE
 = 1 << 20,

85 
	mCR_INTERCEPT_CR5_WRITE
 = 1 << 21,

86 
	mCR_INTERCEPT_CR6_WRITE
 = 1 << 22,

87 
	mCR_INTERCEPT_CR7_WRITE
 = 1 << 23,

88 
	mCR_INTERCEPT_CR8_WRITE
 = 1 << 24,

89 
	mCR_INTERCEPT_CR9_WRITE
 = 1 << 25,

90 
	mCR_INTERCEPT_CR10_WRITE
 = 1 << 26,

91 
	mCR_INTERCEPT_CR11_WRITE
 = 1 << 27,

92 
	mCR_INTERCEPT_CR12_WRITE
 = 1 << 28,

93 
	mCR_INTERCEPT_CR13_WRITE
 = 1 << 29,

94 
	mCR_INTERCEPT_CR14_WRITE
 = 1 << 30,

95 
	mCR_INTERCEPT_CR15_WRITE
 = 1 << 31

98 
	eDRI¡î˚±Bôs


100 
	mDR_INTERCEPT_DR0_READ
 = 1 << 0,

101 
	mDR_INTERCEPT_DR1_READ
 = 1 << 1,

102 
	mDR_INTERCEPT_DR2_READ
 = 1 << 2,

103 
	mDR_INTERCEPT_DR3_READ
 = 1 << 3,

104 
	mDR_INTERCEPT_DR4_READ
 = 1 << 4,

105 
	mDR_INTERCEPT_DR5_READ
 = 1 << 5,

106 
	mDR_INTERCEPT_DR6_READ
 = 1 << 6,

107 
	mDR_INTERCEPT_DR7_READ
 = 1 << 7,

108 
	mDR_INTERCEPT_DR8_READ
 = 1 << 8,

109 
	mDR_INTERCEPT_DR9_READ
 = 1 << 9,

110 
	mDR_INTERCEPT_DR10_READ
 = 1 << 10,

111 
	mDR_INTERCEPT_DR11_READ
 = 1 << 11,

112 
	mDR_INTERCEPT_DR12_READ
 = 1 << 12,

113 
	mDR_INTERCEPT_DR13_READ
 = 1 << 13,

114 
	mDR_INTERCEPT_DR14_READ
 = 1 << 14,

115 
	mDR_INTERCEPT_DR15_READ
 = 1 << 15,

116 
	mDR_INTERCEPT_DR0_WRITE
 = 1 << 16,

117 
	mDR_INTERCEPT_DR1_WRITE
 = 1 << 17,

118 
	mDR_INTERCEPT_DR2_WRITE
 = 1 << 18,

119 
	mDR_INTERCEPT_DR3_WRITE
 = 1 << 19,

120 
	mDR_INTERCEPT_DR4_WRITE
 = 1 << 20,

121 
	mDR_INTERCEPT_DR5_WRITE
 = 1 << 21,

122 
	mDR_INTERCEPT_DR6_WRITE
 = 1 << 22,

123 
	mDR_INTERCEPT_DR7_WRITE
 = 1 << 23,

124 
	mDR_INTERCEPT_DR8_WRITE
 = 1 << 24,

125 
	mDR_INTERCEPT_DR9_WRITE
 = 1 << 25,

126 
	mDR_INTERCEPT_DR10_WRITE
 = 1 << 26,

127 
	mDR_INTERCEPT_DR11_WRITE
 = 1 << 27,

128 
	mDR_INTERCEPT_DR12_WRITE
 = 1 << 28,

129 
	mDR_INTERCEPT_DR13_WRITE
 = 1 << 29,

130 
	mDR_INTERCEPT_DR14_WRITE
 = 1 << 30,

131 
	mDR_INTERCEPT_DR15_WRITE
 = 1 << 31,

134 
	eVMEXIT_EXITCODE


137 
	mVMEXIT_CR0_READ
 = 0,

138 
	mVMEXIT_CR1_READ
 = 1,

139 
	mVMEXIT_CR2_READ
 = 2,

140 
	mVMEXIT_CR3_READ
 = 3,

141 
	mVMEXIT_CR4_READ
 = 4,

142 
	mVMEXIT_CR5_READ
 = 5,

143 
	mVMEXIT_CR6_READ
 = 6,

144 
	mVMEXIT_CR7_READ
 = 7,

145 
	mVMEXIT_CR8_READ
 = 8,

146 
	mVMEXIT_CR9_READ
 = 9,

147 
	mVMEXIT_CR10_READ
 = 10,

148 
	mVMEXIT_CR11_READ
 = 11,

149 
	mVMEXIT_CR12_READ
 = 12,

150 
	mVMEXIT_CR13_READ
 = 13,

151 
	mVMEXIT_CR14_READ
 = 14,

152 
	mVMEXIT_CR15_READ
 = 15,

155 
	mVMEXIT_CR0_WRITE
 = 16,

156 
	mVMEXIT_CR1_WRITE
 = 17,

157 
	mVMEXIT_CR2_WRITE
 = 18,

158 
	mVMEXIT_CR3_WRITE
 = 19,

159 
	mVMEXIT_CR4_WRITE
 = 20,

160 
	mVMEXIT_CR5_WRITE
 = 21,

161 
	mVMEXIT_CR6_WRITE
 = 22,

162 
	mVMEXIT_CR7_WRITE
 = 23,

163 
	mVMEXIT_CR8_WRITE
 = 24,

164 
	mVMEXIT_CR9_WRITE
 = 25,

165 
	mVMEXIT_CR10_WRITE
 = 26,

166 
	mVMEXIT_CR11_WRITE
 = 27,

167 
	mVMEXIT_CR12_WRITE
 = 28,

168 
	mVMEXIT_CR13_WRITE
 = 29,

169 
	mVMEXIT_CR14_WRITE
 = 30,

170 
	mVMEXIT_CR15_WRITE
 = 31,

173 
	mVMEXIT_DR0_READ
 = 32,

174 
	mVMEXIT_DR1_READ
 = 33,

175 
	mVMEXIT_DR2_READ
 = 34,

176 
	mVMEXIT_DR3_READ
 = 35,

177 
	mVMEXIT_DR4_READ
 = 36,

178 
	mVMEXIT_DR5_READ
 = 37,

179 
	mVMEXIT_DR6_READ
 = 38,

180 
	mVMEXIT_DR7_READ
 = 39,

181 
	mVMEXIT_DR8_READ
 = 40,

182 
	mVMEXIT_DR9_READ
 = 41,

183 
	mVMEXIT_DR10_READ
 = 42,

184 
	mVMEXIT_DR11_READ
 = 43,

185 
	mVMEXIT_DR12_READ
 = 44,

186 
	mVMEXIT_DR13_READ
 = 45,

187 
	mVMEXIT_DR14_READ
 = 46,

188 
	mVMEXIT_DR15_READ
 = 47,

191 
	mVMEXIT_DR0_WRITE
 = 48,

192 
	mVMEXIT_DR1_WRITE
 = 49,

193 
	mVMEXIT_DR2_WRITE
 = 50,

194 
	mVMEXIT_DR3_WRITE
 = 51,

195 
	mVMEXIT_DR4_WRITE
 = 52,

196 
	mVMEXIT_DR5_WRITE
 = 53,

197 
	mVMEXIT_DR6_WRITE
 = 54,

198 
	mVMEXIT_DR7_WRITE
 = 55,

199 
	mVMEXIT_DR8_WRITE
 = 56,

200 
	mVMEXIT_DR9_WRITE
 = 57,

201 
	mVMEXIT_DR10_WRITE
 = 58,

202 
	mVMEXIT_DR11_WRITE
 = 59,

203 
	mVMEXIT_DR12_WRITE
 = 60,

204 
	mVMEXIT_DR13_WRITE
 = 61,

205 
	mVMEXIT_DR14_WRITE
 = 62,

206 
	mVMEXIT_DR15_WRITE
 = 63,

209 
	mVMEXIT_EXCEPTION_DE
 = 64,

210 
	mVMEXIT_EXCEPTION_DB
 = 65,

211 
	mVMEXIT_EXCEPTION_NMI
 = 66,

212 
	mVMEXIT_EXCEPTION_BP
 = 67,

213 
	mVMEXIT_EXCEPTION_OF
 = 68,

214 
	mVMEXIT_EXCEPTION_BR
 = 69,

215 
	mVMEXIT_EXCEPTION_UD
 = 70,

216 
	mVMEXIT_EXCEPTION_NM
 = 71,

217 
	mVMEXIT_EXCEPTION_DF
 = 72,

218 
	mVMEXIT_EXCEPTION_09
 = 73,

219 
	mVMEXIT_EXCEPTION_TS
 = 74,

220 
	mVMEXIT_EXCEPTION_NP
 = 75,

221 
	mVMEXIT_EXCEPTION_SS
 = 76,

222 
	mVMEXIT_EXCEPTION_GP
 = 77,

223 
	mVMEXIT_EXCEPTION_PF
 = 78,

224 
	mVMEXIT_EXCEPTION_15
 = 79,

225 
	mVMEXIT_EXCEPTION_MF
 = 80,

226 
	mVMEXIT_EXCEPTION_AC
 = 81,

227 
	mVMEXIT_EXCEPTION_MC
 = 82,

228 
	mVMEXIT_EXCEPTION_XF
 = 83,

233 
	mVMEXIT_INTR
 = 96,

234 
	mVMEXIT_NMI
 = 97,

235 
	mVMEXIT_SMI
 = 98,

236 
	mVMEXIT_INIT
 = 99,

237 
	mVMEXIT_VINTR
 = 100,

238 
	mVMEXIT_CR0_SEL_WRITE
 = 101,

239 
	mVMEXIT_IDTR_READ
 = 102,

240 
	mVMEXIT_GDTR_READ
 = 103,

241 
	mVMEXIT_LDTR_READ
 = 104,

242 
	mVMEXIT_TR_READ
 = 105,

243 
	mVMEXIT_IDTR_WRITE
 = 106,

244 
	mVMEXIT_GDTR_WRITE
 = 107,

245 
	mVMEXIT_LDTR_WRITE
 = 108,

246 
	mVMEXIT_TR_WRITE
 = 109,

247 
	mVMEXIT_RDTSC
 = 110,

248 
	mVMEXIT_RDPMC
 = 111,

249 
	mVMEXIT_PUSHF
 = 112,

250 
	mVMEXIT_POPF
 = 113,

251 
	mVMEXIT_CPUID
 = 114,

252 
	mVMEXIT_RSM
 = 115,

253 
	mVMEXIT_IRET
 = 116,

254 
	mVMEXIT_SWINT
 = 117,

255 
	mVMEXIT_INVD
 = 118,

256 
	mVMEXIT_PAUSE
 = 119,

257 
	mVMEXIT_HLT
 = 120,

258 
	mVMEXIT_INVLPG
 = 121,

259 
	mVMEXIT_INVLPGA
 = 122,

260 
	mVMEXIT_IOIO
 = 123,

261 
	mVMEXIT_MSR
 = 124,

262 
	mVMEXIT_TASK_SWITCH
 = 125,

263 
	mVMEXIT_FERR_FREEZE
 = 126,

264 
	mVMEXIT_SHUTDOWN
 = 127,

265 
	mVMEXIT_VMRUN
 = 128,

266 
	mVMEXIT_VMMCALL
 = 129,

267 
	mVMEXIT_VMLOAD
 = 130,

268 
	mVMEXIT_VMSAVE
 = 131,

269 
	mVMEXIT_STGI
 = 132,

270 
	mVMEXIT_CLGI
 = 133,

271 
	mVMEXIT_SKINIT
 = 134,

272 
	mVMEXIT_RDTSCP
 = 135,

273 
	mVMEXIT_ICEBP
 = 136,

274 
	mVMEXIT_WBINVD
 = 137,

275 
	mVMEXIT_MONITOR
 = 138,

276 
	mVMEXIT_MWAIT
 = 139,

277 
	mVMEXIT_MWAIT_CONDITIONAL
= 140,

278 
	mVMEXIT_NPF
 = 1024,

279 
	mVMEXIT_INVALID
 = -1

282 
	e£g_©º


284 
	mSEG_P
 = 1<<2,

285 
	mSEG_W
 = 1<<3,

286 
	mSEG_R
 = 1<<4,

287 
	mSEG_X
 = 1<<5,

291 
	ssvm_£gmít


293 
uöt16_t
 
	m£l
;

294 
uöt16_t
 
	m©åib
;

295 
uöt32_t
 
	mlimô
;

296 
uöt64_t
 
	mba£
;

297 }
__©åibuã__
((
∑cked
));

299 
	svöå_t


301 
uöt64_t
 
	mçr
: 8;

302 
uöt64_t
 
	múq
: 1;

303 
uöt64_t
 
	mrsvd0
: 7;

304 
uöt64_t
 
	m¥io
: 4;

305 
uöt64_t
 
	mign_çr
: 1;

306 
uöt64_t
 
	mrsvd1
: 3;

307 
uöt64_t
 
	möå_maskög
: 1;

308 
uöt64_t
 
	mrsvd2
: 7;

309 
uöt64_t
 
	mve˘‹
: 8;

310 
uöt64_t
 
	mrsvd3
: 24;

311 }
__©åibuã__
((
∑cked
));

313 
	sioio_öfo_t


315 
uöt64_t
 
	mty≥
 :1;

316 
uöt64_t
 
	mrsvd0
 :1;

317 
uöt64_t
 
	m°r
 :1;

318 
uöt64_t
 
	mªp
 :1;

319 
uöt64_t
 
	msz8
 :1;

320 
uöt64_t
 
	msz16
 :1;

321 
uöt64_t
 
	msz32
 :1;

322 
uöt64_t
 
	mrsv1
 :9;

323 
uöt64_t
 
	mp‹t
 :16;

324 }
__©åibuã__
((
∑cked
));

326 
	sevíöj_t


328 
uöt64_t
 
	mve˘‹
 :8;

329 
uöt64_t
 
	mty≥
 :3;

330 
uöt64_t
 
	mev
 :1;

331 
uöt64_t
 
	mrsvd
 :19;

332 
uöt64_t
 
	mv
 :1;

333 
uöt64_t
 
	mîr‹code
 :32;

334 }
__©åibuã__
((
∑cked
));

337 
	svmcb


340 
uöt32_t
 
	m¸_öãr˚±s
;

341 
uöt32_t
 
	mdr_öãr˚±s
;

342 
uöt32_t
 
	mexc_öãr˚±s
;

343 
uöt32_t
 
	möãr˚±s1
;

344 
uöt32_t
 
	möãr˚±s2
;

345 
uöt32_t
 
	mªsv1
[11];

346 
uöt64_t
 
	mi›m_ba£_∑
;

347 
uöt64_t
 
	mm§pm_ba£_∑
;

348 
uöt64_t
 
	mtsc_off£t
;

349 
uöt32_t
 
	mgue°_asid
;

350 
uöt8_t
 
	méb_c⁄åﬁ
;

351 
uöt8_t
 
	mªsv2
[3];

352 
vöå_t
 
	möå_t
;

353 
uöt64_t
 
	möå_shadow
;

354 
uöt64_t
 
	mexôcode
;

355 
uöt64_t
 
	mexôöfo1
;

356 
uöt64_t
 
	mexôöfo2
;

357 
evíöj_t
 
	mexôöfo
;

358 
uöt64_t
 
	m≈_íabÀ
;

359 
uöt64_t
 
	mªsv3
[2];

360 
evíöj_t
 
	mevít_öj
;

361 
uöt64_t
 
	mn_¸3
;

362 
uöt64_t
 
	mlbr_vútuÆ
;

363 
uöt64_t
 
	mªsv4
[104];

367 
svm_£gmít
 
	mes
;

368 
svm_£gmít
 
	mcs
;

369 
svm_£gmít
 
	mss
;

370 
svm_£gmít
 
	mds
;

371 
svm_£gmít
 
	mfs
;

372 
svm_£gmít
 
	mgs
;

373 
svm_£gmít
 
	mgdå
;

374 
svm_£gmít
 
	mldå
;

375 
svm_£gmít
 
	midå
;

376 
svm_£gmít
 
	må
;

378 
uöt64_t
 
	mªsv5
[5];

379 
uöt8_t
 
	mr£ved
[3];

380 
uöt8_t
 
	m˝l
;

381 
uöt32_t
 
	mªsv6
;

382 
uöt64_t
 
	me„r
;

383 
uöt64_t
 
	mªsv7
[14];

384 
uöt64_t
 
	m¸4
;

385 
uöt64_t
 
	m¸3
;

386 
uöt64_t
 
	m¸0
;

387 
uöt64_t
 
	mdr7
;

388 
uöt64_t
 
	mdr6
;

389 
uöt64_t
 
	mrÊags
;

390 
uöt64_t
 
	mrù
;

391 
uöt64_t
 
	mªsv8
[11];

392 
uöt64_t
 
	mr•
;

393 
uöt64_t
 
	mªsv9
[3];

394 
uöt64_t
 
	møx
;

395 
uöt64_t
 
	m°¨
;

396 
uöt64_t
 
	ml°¨
;

397 
uöt64_t
 
	mc°¨
;

398 
uöt64_t
 
	msfmask
;

399 
uöt64_t
 
	mkî√lgsba£
;

400 
uöt64_t
 
	msy£¡î_cs
;

401 
uöt64_t
 
	msy£¡î_e•
;

402 
uöt64_t
 
	msy£¡î_eù
;

403 
uöt64_t
 
	m¸2
;

404 
uöt64_t
 
	mªsv10
[4];

405 
uöt64_t
 
	mg_∑t
;

406 
uöt64_t
 
	mdbg˘r
;

407 
uöt64_t
 
	mbr_‰om
;

408 
uöt64_t
 
	mbr_to
;

409 
uöt64_t
 
	mœ°ex˝‰om
;

410 
uöt64_t
 
	mœ°ex˝to
;

411 
uöt64_t
 
	mªsv11
[301];

412 }
__©åibuã__
 ((
__∑cked__
));

414 
vmcb
 * 
Æloc_vmcb
();

416 
‰ìvmcb
(
vmcb
 *vmcb);

	@inc/vmfile.h

1 
	~<öc/ty≥s.h
>

2 
	~<öc/svm.h
>

5 
vm_ªad
(
gíîl_ªgs
 *
ªgs
);

6 
vm_wrôe
(
gíîl_ªgs
 *
ªgs
);

7 
vm_›í
(
gíîl_ªgs
 *
ªgs
);

8 
vm_˛o£
(
gíîl_ªgs
 *
ªgs
);

	@inc/vmmcons.h

1 
	~<öc/ty≥s.h
>

2 
	~<öc/svm.h
>

6 
uöt64_t
 
	mmsg_öô
;

7 
uöt64_t
 
	m¥ev
;

8 
uöt64_t
 
	m°¨t
;

9 
uöt64_t
 
	mcur_pos
;

10 
uöt64_t
 
	mcur_À¡h
;

11 
uöt64_t
 
	mcur_°¨t
;

12 
uöt64_t
 
	movî_Êow
;

13 
uöt64_t
 
	mmax_À¡h
;

14 
	mlock
;

15 
uöt8_t
 *
	mmsg_buf„r
;

16 
uöt8_t
 *
	mmsg_buf„r_vút
;

17 }
	tbuff_öfo
;

19 
buff_öfo
 *
öfo
;

21 
vmmputch¨
(
ch
);

22 
vmmc⁄s_öô
(
gíîl_ªgs
 *
ªgs
);

	@inc/vmpt.h

1 
	~<öc/mp.h
>

2 
	~<öc/°dio.h
>

3 
	~<öc/°rög.h
>

5 
	#VMPT_ADDR
 0x500

	)

6 
	#VFPT_ADDR
 0x200

	)

8 *
mp_èbÀ
;

10 *
	$dump_m±
(
mp_Âå
 *
Âå
)

12 
mp_c⁄f_hódî
 *
hd
 =

13 (
mp_c⁄f_hódî
 *)(
uöt64_t
)
Âå
->
tb_addr
;

14 
uöt8_t
 
sum
 = 0;

15 
uöt32_t
 
addr
;

18 
mp_èbÀ
 = 
	`tmÆloc
(
hd
->
ba£_t_Àngth
);

19 if(!
mp_èbÀ
)

20  
NULL
;

21 
	`mem˝y
(
mp_èbÀ
, 
hd
, hd->
ba£_t_Àngth
);

22 
	`mem˝y
((*)
VMPT_ADDR
, 
hd
, hd->
ba£_t_Àngth
);

23 
	`mem˝y
((*)
VFPT_ADDR
, 
Âå
, f±r->
À¡h
 * 16);

25 
mp_Âå
 *
tmp
 = (mp_Âå *Ë
VFPT_ADDR
;

26 
tmp
->
tb_addr
 = 0;

27 
addr
 = 
VMPT_ADDR
;

29 
tmp
->
tb_addr
 = (
addr
 & 0xfff);

30 *
p
 = (*)
tmp
;

31 
i
 = 0; i < 
tmp
->
À¡h
 * 16; i ++)

32 
sum
 +
p
[
i
];

33 
sum
 -
p
[10];

34 
p
[10] = ((1<<8Ë- 
sum
) & 0xFF;

38  
mp_èbÀ
;

39 
	}
}

41 
	$ª°¨t_m±
(*
addr
, *
‹ig
)

43 
mp_c⁄f_hódî
 *
des
 = (mp_c⁄f_hódî *Ë
‹ig
;

44 
	`mem˝y
(
addr
, 
‹ig
, 
des
->
ba£_t_Àngth
);

45 
	}
}

47 *
¸óã_m±
(*
addr
);

49 *
m±_domaö_£t
(
id
, *
addr
);

	@inc/x86.h

1 #i‚de‡
JOS_INC_X86_H


2 
	#JOS_INC_X86_H


	)

4 
	~<öc/ty≥s.h
>

5 
	~<öc/£m.h
>

7 
__ölöe
 
	$bªakpoöt
(Ë
	`__©åibuã__
((
Æways_ölöe
));

8 
__ölöe
 
uöt8_t
 
	$öb
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

9 
__ölöe
 
	$ösb
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

10 
__ölöe
 
uöt16_t
 
	$öw
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

11 
__ölöe
 
	$ösw
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

12 
__ölöe
 
uöt32_t
 
	$öl
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

13 
__ölöe
 
	$ö¶
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

14 
__ölöe
 
	$outb
(
p‹t
, 
uöt8_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
__ölöe
 
	$outsb
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

16 
__ölöe
 
	$outw
(
p‹t
, 
uöt16_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

17 
__ölöe
 
	$outsw
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

18 
__ölöe
 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

19 
__ölöe
 
	$oué
(
p‹t
, 
uöt32_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

20 
__ölöe
 
	$övÕg
(*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

21 
__ölöe
 
	$lidt
(*
p
Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
__ölöe
 
	$Œdt
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

23 
__ölöe
 
	$…r
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

24 
__ölöe
 
	$l¸0
(
uöt32_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

25 
__ölöe
 
uöt32_t
 
	$r¸0
(Ë
	`__©åibuã__
((
Æways_ölöe
));

26 
__ölöe
 
uöt32_t
 
	$r¸2
(Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
__ölöe
 
	$l¸3
(
uöt32_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
__ölöe
 
uöt32_t
 
	$r¸3
(Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
__ölöe
 
	$l¸4
(
uöt32_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
__ölöe
 
uöt32_t
 
	$r¸4
(Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
__ölöe
 
	$ébÊush
(Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
__ölöe
 
uöt32_t
 
	$ªad_eÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

33 
__ölöe
 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

34 
__ölöe
 
uöt32_t
 
	$ªad_ebp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

35 
__ölöe
 
uöt32_t
 
	$ªad_e•
(Ë
	`__©åibuã__
((
Æways_ölöe
));

36 
__ölöe
 
	`˝uid
(
uöt32_t
 
öfo
, uöt32_à*
óxp
, uöt32_à*
ebxp
, uöt32_à*
ecxp
, uöt32_à*
edxp
);

37 
__ölöe
 
uöt32_t
 
	`˝uid_óx
(uöt32_à
func
);

38 
__ölöe
 
uöt32_t
 
	`˝uid_ebx
(uöt32_à
func
);

39 
__ölöe
 
uöt32_t
 
	`˝uid_ecx
(uöt32_à
func
);

40 
__ölöe
 
uöt32_t
 
	`˝uid_edx
(uöt32_à
func
);

41 
__ölöe
 
uöt64_t
 
	$ªad_tsc
(Ë
	`__©åibuã__
((
Æways_ölöe
));

42 
__ölöe
 
	`∑u£
();

43 
__ölöe
 
	`wrôe_m§
(
uöt32_t
 
m§
, 
uöt64_t
 
vÆ
);

44 
__ölöe
 
uöt64_t
 
	`ªad_m§
(
uöt32_t
 
m§
);

45 
__ölöe
 
	`©omic_dec
(
£m
 *sem);

46 
__ölöe
 
	`©omic_öc
(
£m
 *sem);

47 
__ölöe
 
uöt64_t
 
	`cmpxch
(
£m
 *£m, uöt64_à
v1
, uöt64_à
v2
);

48 
__ölöe
 
	`•ö_lock
(
£m
 *sem);

49 
__ölöe
 
	`•ö_u∆ock
(
£m
 *sem);

51 
__ölöe
 

52 
	$bªakpoöt
()

54 
__asm
 
	`__vﬁ©ûe
("int3");

55 
	}
}

57 
__ölöe
 
uöt8_t


58 
	$öb
(
p‹t
)

60 
uöt8_t
 
d©a
;

61 
__asm
 
	`__vﬁ©ûe
("öb %w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

62  
d©a
;

63 
	}
}

65 
__ölöe
 

66 
	$ösb
(
p‹t
, *
addr
, 
˙t
)

68 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsb" :

69 "=D" (
addr
), "=c" (
˙t
) :

70 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

72 
	}
}

74 
__ölöe
 
uöt16_t


75 
	$öw
(
p‹t
)

77 
uöt16_t
 
d©a
;

78 
__asm
 
	`__vﬁ©ûe
("öw %w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

79  
d©a
;

80 
	}
}

82 
__ölöe
 

83 
	$ösw
(
p‹t
, *
addr
, 
˙t
)

85 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsw" :

86 "=D" (
addr
), "=c" (
˙t
) :

87 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

89 
	}
}

91 
__ölöe
 
uöt32_t


92 
	$öl
(
p‹t
)

94 
uöt32_t
 
d©a
;

95 
__asm
 
	`__vﬁ©ûe
("ö»%w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

96  
d©a
;

97 
	}
}

99 
__ölöe
 

100 
	$ö¶
(
p‹t
, *
addr
, 
˙t
)

102 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsl" :

103 "=D" (
addr
), "=c" (
˙t
) :

104 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

106 
	}
}

108 
__ölöe
 

109 
	$outb
(
p‹t
, 
uöt8_t
 
d©a
)

111 
__asm
 
	`__vﬁ©ûe
("outb %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

112 
	}
}

114 
__ölöe
 

115 
	$outsb
(
p‹t
, c⁄° *
addr
, 
˙t
)

117 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsb" :

118 "=S" (
addr
), "=c" (
˙t
) :

119 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

121 
	}
}

123 
__ölöe
 

124 
	$outw
(
p‹t
, 
uöt16_t
 
d©a
)

126 
__asm
 
	`__vﬁ©ûe
("outw %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

127 
	}
}

129 
__ölöe
 

130 
	$outsw
(
p‹t
, c⁄° *
addr
, 
˙t
)

132 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsw" :

133 "=S" (
addr
), "=c" (
˙t
) :

134 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

136 
	}
}

138 
__ölöe
 

139 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
)

141 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsl" :

142 "=S" (
addr
), "=c" (
˙t
) :

143 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

145 
	}
}

147 
__ölöe
 

148 
	$oué
(
p‹t
, 
uöt32_t
 
d©a
)

150 
__asm
 
	`__vﬁ©ûe
("oué %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

151 
	}
}

153 
__ölöe
 

154 
	$övÕg
(*
addr
)

156 
__asm
 
	`__vﬁ©ûe
("övÕg (%0)" : : "r" (
addr
) : "memory");

157 
	}
}

159 
__ölöe
 

160 
	$lidt
(*
p
)

162 
__asm
 
	`__vﬁ©ûe
("lidà(%0)" : : "r" (
p
));

163 
	}
}

165 
__ölöe
 

166 
	$sidt
(*
p
)

168 
__asm
 
	`__vﬁ©ûe
("sidà(%0)" : : "r" (
p
));

169 
	}
}

171 
__ölöe
 

172 
	$Œdt
(
uöt16_t
 
£l
)

174 
__asm
 
	`__vﬁ©ûe
("Œdà%0" : : "r" (
£l
));

175 
	}
}

177 
__ölöe
 

178 
	$…r
(
uöt16_t
 
£l
)

180 
__asm
 
	`__vﬁ©ûe
("…∏%0" : : "r" (
£l
));

181 
	}
}

183 
__ölöe
 

184 
	$l¸0
(
uöt32_t
 
vÆ
)

186 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸0" : : "r" (
vÆ
));

187 
	}
}

189 
__ölöe
 
uöt32_t


190 
	$r¸0
()

192 
uöt32_t
 
vÆ
;

193 
__asm
 
	`__vﬁ©ûe
("mov»%%¸0,%0" : "Ù" (
vÆ
));

194  
vÆ
;

195 
	}
}

197 
__ölöe
 
uöt32_t


198 
	$r¸2
()

200 
uöt32_t
 
vÆ
;

201 
__asm
 
	`__vﬁ©ûe
("mov»%%¸2,%0" : "Ù" (
vÆ
));

202  
vÆ
;

203 
	}
}

205 
__ölöe
 

206 
	$l¸3
(
uöt32_t
 
vÆ
)

208 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸3" : : "r" (
vÆ
));

209 
	}
}

211 
__ölöe
 
uöt32_t


212 
	$r¸3
()

214 
uöt32_t
 
vÆ
;

215 
__asm
 
	`__vﬁ©ûe
("mov»%%¸3,%0" : "Ù" (
vÆ
));

216  
vÆ
;

217 
	}
}

219 
__ölöe
 

220 
	$l¸4
(
uöt32_t
 
vÆ
)

222 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸4" : : "r" (
vÆ
));

223 
	}
}

225 
__ölöe
 
uöt32_t


226 
	$r¸4
()

228 
uöt32_t
 
¸4
;

229 
__asm
 
	`__vﬁ©ûe
("mov»%%¸4,%0" : "Ù" (
¸4
));

230  
¸4
;

231 
	}
}

233 
__ölöe
 

234 
	$ébÊush
()

236 
uöt32_t
 
¸3
;

237 
__asm
 
	`__vﬁ©ûe
("mov»%%¸3,%0" : "Ù" (
¸3
));

238 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸3" : : "r" (
¸3
));

239 
	}
}

241 
__ölöe
 
uöt32_t


242 
	$ªad_eÊags
()

244 
uöt32_t
 
eÊags
;

245 
__asm
 
	`__vﬁ©ûe
("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

246  
eÊags
;

247 
	}
}

249 
__ölöe
 

250 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
)

252 
__asm
 
	`__vﬁ©ûe
("push»%0;Ö›Ê" : : "r" (
eÊags
));

253 
	}
}

255 
__ölöe
 
uöt32_t


256 
	$ªad_ebp
()

258 
uöt32_t
 
ebp
;

259 
__asm
 
	`__vﬁ©ûe
("mov»%%ebp,%0" : "Ù" (
ebp
));

260  
ebp
;

261 
	}
}

263 
__ölöe
 
uöt32_t


264 
	$ªad_e•
()

266 
uöt32_t
 
e•
;

267 
__asm
 
	`__vﬁ©ûe
("mov»%%e•,%0" : "Ù" (
e•
));

268  
e•
;

269 
	}
}

271 
__ölöe
 

272 
	$˝uid
(
uöt32_t
 
öfo
, uöt32_à*
óxp
, uöt32_à*
ebxp
, uöt32_à*
ecxp
, uöt32_à*
edxp
)

274 
uöt32_t
 
óx
, 
ebx
, 
ecx
, 
edx
;

275 
__asm
 
	`__vﬁ©ûe
("cpuid"

276 : "˜" (
óx
), "=b" (
ebx
), "=c" (
ecx
), "=d" (
edx
)

277 : "a" (
öfo
));

278 i‡(
óxp
)

279 *
óxp
 = 
óx
;

280 i‡(
ebxp
)

281 *
ebxp
 = 
ebx
;

282 i‡(
ecxp
)

283 *
ecxp
 = 
ecx
;

284 i‡(
edxp
)

285 *
edxp
 = 
edx
;

286 
	}
}

288 
__ölöe
 
uöt32_t


289 
	$˝uid_óx
(
uöt32_t
 
func
)

291 
uöt32_t
 
óx
;

292 
	`˝uid
(
func
, &
óx
, 
NULL
, NULL, NULL);

293  
óx
;

294 
	}
}

296 
__ölöe
 
uöt32_t


297 
	$˝uid_ebx
(
uöt32_t
 
func
)

299 
uöt32_t
 
ebx
;

300 
	`˝uid
(
func
, 
NULL
, &
ebx
, NULL, NULL);

301  
ebx
;

302 
	}
}

304 
__ölöe
 
uöt32_t


305 
	$˝uid_ecx
(
uöt32_t
 
func
)

307 
uöt32_t
 
ecx
;

308 
	`˝uid
(
func
, 
NULL
, NULL, &
ecx
, NULL);

309  
ecx
;

310 
	}
}

312 
__ölöe
 
uöt32_t


313 
	$˝uid_edx
(
uöt32_t
 
func
)

315 
uöt32_t
 
edx
;

316 
	`˝uid
(
func
, 
NULL
, NULL, NULL, &
edx
);

317  
edx
;

318 
	}
}

320 
__ölöe
 
uöt64_t


321 
	$ªad_tsc
()

323 
uöt64_t
 
tsc
;

324 
__asm
 
	`__vﬁ©ûe
("rdtsc" : "=A" (
tsc
));

325  
tsc
;

326 
	}
}

328 
__ölöe
 
	$∑u£
()

330 
__asm
 
	`__vﬁ©ûe
("pause"::);

331 
	}
}

333 
__ölöe
 
	$wrôe_m§
(
uöt32_t
 
m§
, 
uöt64_t
 
vÆ
)

335 
uöt32_t
 
lo
 = 
vÆ
 & 0xffffffff;

336 
uöt32_t
 
hi
 = 
vÆ
 >> 32;

337 
__asm
 
	`__vﬁ©ûe
("wrm§"::"c"(
m§
), "a"(
lo
), "d"(
hi
));

338 
	}
}

340 
__ölöe
 
uöt64_t
 
	$ªad_m§
(
uöt32_t
 
m§
)

342 
uöt32_t
 
lo
, 
hi
;

343 
__asm
 
	`__vﬁ©ûe
("rdm§":"=d"(
hi
), "˜"(
lo
): "c"(
m§
));

344  (((
uöt64_t
Ë
lo
Ë| (((uöt64_tË
hi
) << 32));

345 
	}
}

347 
__ölöe
 
	$©omic_öc
(
£m
 *sem)

349 
__asm
 
	`__vﬁ©ûe
("lock; incq %0":"+m"(
£m
->
£mph
)::"cc");

350 
	}
}

352 
__ölöe
 
	$©omic_dec
(
£m
 *sem)

354 
__asm
 
	`__vﬁ©ûe
("lock; decq %0":"+m"(
£m
->
£mph
)::"cc");

355 
	}
}

357 
__ölöe
 
uöt64_t
 
	$cmpxch
(
£m
 *£m, 
uöt64_t
 
v1
, uöt64_à
v2
)

359 
__asm
 
	`__vﬁ©ûe
("lock; cmpxchgq %2, %0":"=m"(
£m
->
£mph
):"A"(
v1
), "D"(
v2
):"memory", "%rax", "cc");

360  
£m
->
£mph
;

361 
	}
}

363 
__ölöe
 
	$•ö_lock
(
£m
 *sem)

365 
__asm
 
	`__vﬁ©ûe
(

374 "3:\n\t":"=m"(
£m
->
£mph
)::"memory", "cc");

375 
	}
}

377 
__ölöe
 
	$•ö_u∆ock
(
£m
 *sem)

379 
£m
->
£mph
 = 1;

380 
	}
}

382 
__ölöe
 
	$dißbÀ_m˚
()

384 
uöt32_t
 
Êag
 = 0;

385 
uöt64_t
 
m§
 = 0;

395 
__asm
 
	`__vﬁ©ûe
("mov %%cr4, %%rax\n\t"

400 
m§
 = 
	`ªad_m§
(0x179);

401 if((
m§
 & 0x100)!=0){

402 
	`wrôe_m§
(0x17b, 0);

404 
	}
}

	@kern/acpi.c

1 
	~<öc/a˝i.h
>

2 
	~<öc/°rög.h
>

3 
	~<öc/°dio.h
>

4 
	~<öc/mm≠.h
>

5 
	~<öc/˝u.h
>

7 
numa_node
 
	gnode
[
NR_NUMA
];

10 
rsdp
 *
	$rsdp_£¨ch
(
uöt64_t
 
ba£
, 
uöt32_t
 
limô
)

12 
uöt32_t
 
off£t
 = 0;

13 
uöt8_t
 *
rsdp
;

15 
off£t
 < 
limô
)

17 
rsdp
 = (
uöt8_t
 *)(
ba£
 + 
off£t
);

21 if(
	`memcmp
(
rsdp
, "RSD PTR ", 8) == 0)

22  (
rsdp
 *)rsdp;

23 
off£t
 += 16;

26 
	}
}

28 
rsdp
 *
	$rsdp_gë
()

30 
uöt8_t
 *
d©a
;

31 
uöt16_t
 
addr
;

32 
rsdp
 *rsdp;

33 
d©a
 = (
uöt8_t
 *)400;

34 
addr
 = (
d©a
[0xe] | (data[0xf]<<8))<<4;

35 if((
rsdp
 = 
	`rsdp_£¨ch
(
addr
, 1024)) != 0)

36  
rsdp
;

37 if((
rsdp
 = 
	`rsdp_£¨ch
(0xe0000,0x1ffff)) != 0)

38  
rsdp
;

40 
	}
}

42 
§©
 *
	$§©_gë
(
xsdt
 *
xt
)

44 
§©
 *
aff
;

45 
uöt32_t
 
ödex
 = 0;

47 
ödex
 = (
xt
->
hódî
.
Àngth
 - (
des_hódî
))/8;

49 
uöt32_t
 
i
 = 0; i < 
ödex
; i ++)

51 
aff
 = (
§©
 *Ë
xt
->
íåy
[
i
];

52 if(
	`memcmp
(
aff
->
hódî
.
sig
, "SRAT", 4) == 0)

53  
aff
;

56 
	}
}

58 
ivrs
 *
	$ivrs_gë
(
xsdt
 *
xt
)

60 
ivrs
 *ivrs;

61 
uöt32_t
 
ödex
 = 0;

63 
ödex
 = (
xt
->
hódî
.
Àngth
 - (
des_hódî
))/8;

65 
uöt32_t
 
i
 = 0; i < 
ödex
; i ++)

67 
ivrs
 = (ivr†*Ë
xt
->
íåy
[
i
];

68 if(
	`memcmp
(
ivrs
->
hódî
.
sig
, "IVRS", 4) == 0)

69  
ivrs
;

72 
	}
}

74 
madt
 *
	$madt_gë
(
xsdt
 *
xt
)

76 
madt
 *madt;

77 
uöt32_t
 
ödex
 = 0;

79 
ödex
 = (
xt
->
hódî
.
Àngth
 - (
des_hódî
))/8;

81 
uöt32_t
 
i
 = 0; i < 
ödex
; i ++)

83 
madt
 = (madt*Ë
xt
->
íåy
[
i
];

84 if(
	`memcmp
(
madt
->
hódî
.
sig
, "APIC", 4) == 0)

85  
madt
;

88 
	}
}

90 
h≥t
 *
	$h≥t_gë
(
xsdt
 *
xt
)

92 
h≥t
 *hpet;

93 
uöt32_t
 
ödex
 = 0;

95 
ödex
 = (
xt
->
hódî
.
Àngth
 - (
des_hódî
))/8;

97 
uöt32_t
 
i
 = 0; i < 
ödex
; i ++)

99 
h≥t
 = (h≥t*Ë
xt
->
íåy
[
i
];

100 if(
	`memcmp
(
h≥t
->
hódî
.
sig
, "HPET", 4) == 0)

101  
h≥t
;

104 
	}
}

106 
	$¥ï¨e_node_öfo
(
§©
 *srat)

108 *
p
 = 0;

109 
≠ic_aff
 *apic_aff = 0;

110 
mem_aff
 *mem_aff = 0;

111 
uöt32_t
 
domaö_id
;

112 
uöt32_t
 
íå_Àn
;

113 
uöt32_t
 
i
 = 0, 
j
 = 0;

114 
íå_Àn
 = 
§©
->
hódî
.
Àngth
 - (
des_hódî
) - 8;

115 
p
 = (*)
§©
->
íåy
;

117 
	`mem£t
(
node
, 0, 
NR_NUMA
*(
numa_node
));

119 ; 
p
 < (*)
§©
->
íåy
 + 
íå_Àn
;)

121 if(
p
[0] == 0 &&Ö[1] == 16)

123 
≠ic_aff
 = (≠ic_af‡*)
p
;

124 
domaö_id
 = 
≠ic_aff
->
¥oxi_domaö
;

125 
node
[
domaö_id
].
id
 = domain_id;

126 
node
[
domaö_id
].
œpicid
[node[domaö_id].
ödex
] = 
≠ic_aff
->
≠ic_id
;

127 if(
node
[
domaö_id
].
ödex
 == 0)

129 
node
[
domaö_id
].
boŸpid
 = 
≠ic_aff
->
≠ic_id
;

130 
˝us
[
œpicid_to_ödex
[
≠ic_aff
->
≠ic_id
]].
logiˇlid
 = 1;

132 
node
[
domaö_id
].
ödex
 ++;

133 
˝us
[
œpicid_to_ödex
[
≠ic_aff
->
≠ic_id
]].
nodeid

domaö_id
;

134 
p
 =Ö + 16;

135 
i
 ++;

137 if(
p
[0] == 1 &&Ö[1] == 40)

139 
mem_aff
 = (mem_af‡*)
p
;

140 
domaö_id
 = (
uöt32_t
Ë
mem_aff
->
¥oxi_domaö
;

141 
node
[
domaö_id
].
ba£_addr
 = (
uöt64_t
Ë
mem_aff
->
ba£_addr_low


142 + (((
uöt64_t
Ë
mem_aff
->
ba£_addr_high
)<<32);

143 
node
[
domaö_id
].
Àngth
 = (
uöt64_t
 ) 
mem_aff
->
Àngth_low


144 + (((
uöt64_t
Ë
mem_aff
->
Àngth_high
)<<32);

145 
	`lock_˝rötf
("node[%d]áddr:%lx, size:%lx\n",

146 
domaö_id
, 
node
[domaö_id].
ba£_addr
,Çode[domaö_id].
Àngth
);

148 
p
 =Ö + 40;

149 
j
 ++;

150 }if(
p
[0]==2 &&Ö[1]==24)

152 
	`lock_˝rötf
("x2APICÉntry\n");

153 
p
 += 24;

156 
	`lock_˝rötf
("Bad søàíåy,Ö[0]:%d,Ö[1]:%d\n", 
p
[0],Ö[1]);

161 
	}
}

164 *
	$dump_madt_∑ge
(
madt
 *madt, * 
madt_∑ge
)

166 *
madt_íd
;

167 
∑ges
;

168 if(
madt
->
hódî
.
Àngth
 <= 4096){

169 
∑ges
 = 
madt
->
hódî
.
Àngth
 + ((
uöt64_t
)madt & 0xfff) > 0xfff ? 2 : 1;

171 
∑ges
 = 
madt
->
hódî
.
Àngth
 + ((
uöt64_t
)madt & 0xfff) > 0xfff ? 2 : 1;

172 
∑ges
 +
madt
->
hódî
.
Àngth
 >> 12;

174 
	`lock_˝rötf
("MADTÜígth i†%dÖage(s)\n", 
∑ges
);

176 
madt_íd
 = (*)(((
uöt64_t
)
madt
 & ~0xfffULË+ 
∑ges
 * 4096);

177 
	`mem˝y
(
madt_∑ge
, (*)((
uöt64_t
)
madt
 & ~0xfffUL), 
∑ges
 * 4096);

179  
madt_íd
;

180 
	}
}

182 
	$Áke_a˝i_œpic
(
madt
 *
madt_Áke
, 
nodeid
)

184 
numa_node
 *
nd
 = &
node
[
nodeid
];

185 
uöt32_t
 
Àn
;

186 
œpic_íåy
 *
í
;

187 
uöt8_t
 
sum
 = 0;

190 
Àn
 = 
madt_Áke
->
hódî
.
Àngth
 - (
des_hódî
) - 8;

192 
uöt32_t
 
ödex
 = 0;

193 *
p
 = (*)
madt_Áke
->
íåy
;

194 *
t
 = (*)
madt
->
íåy
;

195 
	`lock_˝rötf
("madtÜength:%x, fakeÜength:%x\n",

196 
madt
->
hódî
.
Àngth
, 
madt_Áke
->header.length);

197 ; 
p
 < (*)
madt_Áke
->
íåy
 + 
Àn
; )

199 
p
[0]){

201 if(
t
[4] == 1)

203 
í
 = (
œpic_íåy
 *)
p
;

204 if(!
˝us
[
œpicid_to_ödex
[
í
->
œpicid
]].
nodeid
 ==Çodeid){

205 
í
->
Êags
 = 0;

207 
	`lock_˝rötf
("œpi¯id i†%d, fœg†i†%d\n", 
í
->
œpicid
,

208 
í
->
Êags
);

209 
í
->
Êags
 = 1;

213 
p
 += 8;

214 
t
 += 8;

217 
p
 += 12;

218 
t
 += 12;

221 
p
 += 10;

222 
t
 += 10;

225 
p
 += 8;

226 
t
 += 8;

229 
p
 += 6;

230 
t
 += 6;

233 
p
 += 12;

234 
t
 += 12;

237 
p
 += 16;

238 
t
 += 16;

241 
p
 +=Ö[1];

242 
t
 +
p
[1];

245 
p
 += 16;

246 
t
 += 16;

249 
p
 += 16;

250 
t
 += 16;

253 
p
 += 12;

254 
t
 += 12;

257 
p
 += 40;

258 
t
 += 40;

261 
p
 += 24;

262 
t
 += 24;

265 
	`lock_˝rötf
("APIC strcutÅypeÑeserved\n");

270 
	`lock_˝rötf
("madtÜength:%x, fakeÜength:%x\n",

271 
madt
->
hódî
.
Àngth
, 
madt_Áke
->header.length);

273 
p
 = (*)
madt_Áke
;

274 
i
 = 0; i < 
madt_Áke
->
hódî
.
Àngth
; i ++)

275 
sum
 +
p
[
i
];

276 
sum
 -
p
[9];

277 
p
[9] = (1<<8Ë- 
sum
;

278 
	`lock_˝rötf
("madtÜength:%x, fakeÜength:%x\n",

279 
madt
->
hódî
.
Àngth
, 
madt_Áke
->header.length);

282 
	}
}

	@kern/apic.c

1 
	~<öc/ty≥s.h
>

2 
	~<öc/≠ic.h
>

3 
	~<öc/pm≠.h
>

4 
	~<öc/x86.h
>

8 
uöt32_t
 
	$ªad_iﬂpic
(
uöt16_t
 
£l
)

10 
uöt32_t
 
vÆ
;

11 *((vﬁ©ûê
uöt32_t
 *Ë0x„c00000Ë
£l
;

12 
vÆ
 = *((vﬁ©ûê
uöt32_t
*)0xfec00010);

13  
vÆ
;

14 
	}
}

16 
	$wrôe_iﬂpic
(
uöt16_t
 
£l
, 
uöt32_t
 
d©a
)

18 *((vﬁ©ûê
uöt32_t
 *Ë0x„c00000Ë
£l
;

19 *((vﬁ©ûê
uöt32_t
 *Ë0x„c00010Ë
d©a
;

20 
	}
}

22 
uöt32_t
 
	$ªad_œpic
(
uöt32_t
 
off£t
)

24  *(vﬁ©ûê
uöt32_t
 *)((
uöt64_t
)0x„e00000 + 
off£t
);

25 
	}
}

27 
	$wrôe_œpic
(
uöt32_t
 
off£t
, uöt32_à
d©a
)

29 
uöt64_t
 
≠ic_ba£
 = 0;

31 
≠ic_ba£
 = 
	`ªad_m§
(0x1b);

32 
__asm__
 
	`__vﬁ©ûe__
("mfence":::"memory");

33 if((
≠ic_ba£
 & ~0xfff)!= 0xfee00000){

35 
	`lock_˝rötf
("LAPIC Ba£ ch™ged %#lx\n", 
≠ic_ba£
);

38 *(vﬁ©ûê
uöt32_t
 *)((
uöt64_t
)0x„e00000+ 
off£t
Ë
d©a
;

39 
	`ªad_œpic
(
off£t
);

40 
	}
}

42 
	$dißbÀ_m¸
(
mp_Âå
 *
Âå
)

44 if((
Âå
->
mp_„©uª
[1] & 0x80) == 0)

46 
	`outb
(0x22, 0x70);

47 
	`outb
(0x23, 0x1);

49 
	}
}

51 
uöt32_t
 
	$mul_ªad_iﬂpic
(
uöt16_t
 
£l
, 
uöt64_t
 
ba£
)

53 
uöt32_t
 
vÆ
;

54 *((vﬁ©ûê
uöt32_t
 *Ë
ba£
Ë
£l
;

55 
vÆ
 = *((vﬁ©ûê
uöt32_t
*)(
ba£
 + 0x10));

56  
vÆ
;

57 
	}
}

59 
	$mul_wrôe_iﬂpic
(
uöt16_t
 
£l
, 
uöt32_t
 
d©a
, 
uöt64_t
 
ba£
)

61 *((vﬁ©ûê
uöt8_t
 *Ë
ba£
Ë
£l
;

62 *((vﬁ©ûê
uöt32_t
 *Ë(
ba£
 + 0x10)Ë
d©a
;

63 
	}
}

65 
	$iﬂpic_èbÀ
(
uöt64_t
 
addr
)

67 
uöt32_t
 
öfo
 ;

68 
uöt64_t
 
öå_ªd
;

69 
íåõs
, 
i
;

70 
íåõs
 = (
	`mul_ªad_iﬂpic
(1, 
addr
)>>16) & 0xff;

71 
	`lock_˝rötf
("IOAPIC id:%d vîsi⁄:%d,É¡rõs:%d\n", (
	`mul_ªad_iﬂpic
(0, 
addr
)>>24) & 0xf,

72 
	`mul_ªad_iﬂpic
(1, 
addr
Ë& 0xff, 
íåõs
);

73 
i
=0; i<
íåõs
; i++){

74 
öå_ªd
 = 
	`mul_ªad_iﬂpic
(0x11+2*
i
, 
addr
);

75 
öå_ªd
 = intr_red << 32;

76 
öå_ªd
 +
	`mul_ªad_iﬂpic
(0x10+2*
i
, 
addr
);

77 
	`lock_˝rötf
("%lx\t", 
öå_ªd
);

79 
	`lock_˝rötf
("\n");

80 
	}
}

83 
	$dump_iﬂpic
(
mp_Âå
 *
Âå
)

85 
mp_c⁄f_hódî
 *
mp_hódî
;

86 
mp_iﬂpic
 *
iﬂpic
;

87 
mp_ioöå_assign
 *
ioöå
;

88 
mp_locöå_assign
 *
löå
;

90 c⁄° *
INT_TYPE
[4] = {

97 
mp_hódî
 = (
mp_c⁄f_hódî
 *)((
uöt64_t
Ë
Âå
->
tb_addr
 );

98 
uöt8_t
 *
p
 = (uöt8_à*)(
mp_hódî
 + 1);

99 
ödex
 = 0;

101 ; 
p
 < ((
uöt8_t
 *)
mp_hódî
 + mp_hódî->
ba£_t_Àngth
);)

103 *
p
)

105 
PROC
:

106 
p
 += 20;

108 
BUS
:

109 
p
 += 8;

111 
IOAPIC
:

112 
iﬂpic
 = (
mp_iﬂpic
 *Ë
p
;

113 
	`˝rötf
("IOAPIC[%d], vîsi⁄ %d, mem m≠≥dáddr:0x%x, <%d>\n", 
iﬂpic
->
iﬂpicid
,

114 
iﬂpic
->
iﬂpicvîs
, iﬂpic->
mmiﬂpic_addr
,iﬂpic->
iﬂpicÊag
);

115 
p
 += 8;

117 
IOINTR
:

118 
ioöå
 = (
mp_ioöå_assign
 *Ë
p
;

119 
	`lock_˝rötf
("IO intrássign [%s], Src bus:%d, irq:%d, Des IOAPIC:%d, INTIN#%d\n",

120 
INT_TYPE
[
ioöå
->
öå_ty≥
], ioöå->
sour˚busid
,

121 
ioöå
->
sour˚busúq
, ioöå->
desiﬂpicid
, ioöå->
desiﬂpicöä
);

122 
p
 += 8;

124 
LINTR
:

125 
löå
 = (
mp_locöå_assign
 *Ë
p
;

126 
	`lock_˝rötf
("Local intrássign [%s], Src bus:%d, irq:%d, Des LAPIC:%d, LINTIN#%d\n",

127 
INT_TYPE
[
löå
->
öå_ty≥
],Üöå->
sour˚busid
,

128 
löå
->
sour˚busúq
,Üöå->
de¶≠icid
,Üöå->
de¶≠icöä
);

129 
p
 += 8;

132 
	`˝rötf
("error! Unkown mp confÅype\n");

136 
	}
}

138 
	$iﬂpic_öô
(
mp_iﬂpic
 *
iﬂpic
[8], 
mp_Âå
 *
Âå
)

140 
uöt32_t
 
iﬂpic_ba£_addr
, 
d©a
;

141 
uöt8_t
 
iﬂpicid
, 
öå_ty≥
;

143 
mp_c⁄f_hódî
 *
mp_hódî
;

144 
mp_ioöå_assign
 *
ioöå
;

146 
mp_hódî
 = (
mp_c⁄f_hódî
 *)((
uöt64_t
Ë
Âå
->
tb_addr
 );

147 
uöt8_t
 *
p
 = (uöt8_à*)(
mp_hódî
 + 1);

149 
	`dißbÀ_m¸
(
Âå
);

151 
uöt32_t
 
LINT0
;

152 
LINT0
 = 
	`ªad_œpic
(0x350);

153 
	`lock_˝rötf
("LINT0 :%x\n", 
LINT0
);

154 
LINT0
 &= ~(1<<16);

155 
	`wrôe_œpic
(0x350, 
LINT0
);

158 ; 
p
 < ((
uöt8_t
 *)
mp_hódî
 + mp_hódî->
ba£_t_Àngth
);)

160 *
p
)

162 
PROC
:

163 
p
 += 20;

165 
IOINTR
:

166 
ioöå
 = (
mp_ioöå_assign
 *Ë
p
;

167 
iﬂpicid
 = 
ioöå
->
desiﬂpicid
;

168 
iﬂpic_ba£_addr
 = 
iﬂpic
[
iﬂpicid
]->
mmiﬂpic_addr
;

169 if(
iﬂpicid
 == 8){

170 if(
ioöå
->
öå_ty≥
 =0 && ioöå->
desiﬂpicöä
==2){

171 
d©a
 = 0 << 24;

172 
	`mul_wrôe_iﬂpic
(0x11 + 2 * 
ioöå
->
desiﬂpicöä
,

173 
d©a
, 
iﬂpic_ba£_addr
);

175 
d©a
 = 
ioöå
->
desiﬂpicöä
;

177 if((
ioöå
->
io_öåÊag
 & 0x3)==0x3){

178 
d©a
 |= 1<<13;

180 if((
ioöå
->
io_öåÊag
 & 0xc)==0xc){

181 
d©a
 |= 1<<15;

184 
d©a
 |= 0<<16;

186 
d©a
 += 0x30;

187 
	`mul_wrôe_iﬂpic
(0x10 + 2 * 
ioöå
->
desiﬂpicöä
,

188 
d©a
, 
iﬂpic_ba£_addr
);

189 
	`lock_˝rötf
("IOAPIC ba£áddr:%x\n", 
iﬂpic_ba£_addr
);

192 
p
 += 8;

194 
BUS
:

195 
IOAPIC
:

196 
LINTR
:

197 
p
 += 8;

200 
	`lock_˝rötf
("UnknownÉntry\n");

204 
	}
}

206 
	$keybﬂrd_úq_ªdúe˘
()

208 
i
 = 0;

209 
uöt32_t
 
low
, 
high
, 
íåõs
;

210 
uöt64_t
 
iﬂpic_ba£_addr
;

212 
iﬂpic_ba£_addr
 = 
iﬂpic
[0]->
mmiﬂpic_addr
;

213 
íåõs
 = (
	`mul_ªad_iﬂpic
(1, 
iﬂpic_ba£_addr
) >> 16) & 0xff;

228 
low
 = 
	`mul_ªad_iﬂpic
(0x10+2*19, 
iﬂpic_ba£_addr
);

229 
high
 = 
	`mul_ªad_iﬂpic
(0x11+2*19, 
iﬂpic_ba£_addr
);

230 
high
 &= 0xffffff;

231 
high
 |= 0x44000000;

232 
low
 |= 0x10000;

233 
	`mul_wrôe_iﬂpic
(0x10+2*19, 
low
, 
iﬂpic_ba£_addr
);

234 
	`mul_wrôe_iﬂpic
(0x11+2*19, 
high
, 
iﬂpic_ba£_addr
);

258 
	}
}

260 
	$íabÀ_úq
(
uöt32_t
 
úq
, uöt32_à
˝u
)

262 
	`wrôe_iﬂpic
((0x10 + (
úq
-32)*2), irq);

263 
	`wrôe_iﬂpic
((0x10 + (
úq
-32)*2 + 1), 
˝u
<<24);

264 
	}
}

266 
	$íabÀ_œpic
()

268 
uöt32_t
 
i
 = 
	`ªad_œpic
(0xf0);

269 
uöt64_t
 
≠ic_ba£_ªg
;

271 
≠ic_ba£_ªg
 = 
	`ªad_m§
(0x1B);

272 
	`lock_˝rötf
("APIC Ba£ Addªs†Regi°î:%lx\n", 
≠ic_ba£_ªg
);

273 if(
i
 & 0x100)

274 
	`lock_˝rötf
("lapic isÉnabled\n");

277 
i
 |= 0x100;

278 
	`wrôe_œpic
(0xf0, 
i
);

281 
	`wrôe_œpic
(0xf0, 0x100 | (32 + 31));

282 
	`wrôe_œpic
(0x370, 32+19);

284 
	`wrôe_œpic
(0x280, 0);

285 
	`wrôe_œpic
(0x280, 0);

287 
	`wrôe_œpic
(0x310, 0);

288 
	`wrôe_œpic
(0x300, 0x80000|0x500|0x8000|0x0);

289 
	`ªad_œpic
(0x300) & 0x1000);

291 
	`wrôe_œpic
(0xb0, 0);

292 
	`wrôe_œpic
(0x80, 0);

295 
	}
}

297 
	$≠ic_waô
()

299 
uöt64_t
 
i
 = 10000000;

300 
	`ªad_œpic
(0x300)&
DELIVER_ST
)

302 
	`dñay
(10);

303 
i
 --;

304 if(
i
 == 0)

306 
	`lock_˝rötf
("apic so busy\n");

311 
	}
}

313 
	$dñay
(
uöt64_t
 
cy˛es
)

315 
uöt64_t
 
now
;

316 
now
 = 
	`ªad_tsc
();

317 (
	`ªad_tsc
(Ë- 
now
Ë< 
cy˛es
)

318 
	`∑u£
();

320 
	}
}

322 
	$≠ic_ùi
(
uöt32_t
 
id
, uöt32_à
úq
)

324 
	`wrôe_œpic
(0x310, 
id
<<24);

325 
	`wrôe_œpic
(0x300, 
úq
 | 
FIXED
 | 
EDGE_TRIG
 | 
DE_ASS
);

326 
	`≠ic_waô
();

327 if(
	`ªad_œpic
(0x300Ë& 
DELIVER_ST
)

331 
	}
}

333 
	$≠ic_ùi_öô
(
uöt32_t
 
id
)

335 
	`wrôe_œpic
(0x310, 
id
<<24);

336 
	`wrôe_œpic
(0x300, 
id
 | 0x500 | 0x8000 | 0x4000);

337 
	`≠ic_waô
();

338 
	`dñay
(1500000);

339 
	`wrôe_œpic
(0x300, 
id
 | 0x500 | 0x8000 | 0x0);

340 
	`≠ic_waô
();

341 if(
	`ªad_œpic
(0x300Ë& 
DELIVER_ST
)

342 
	`lock_˝rötf
("deliver failed\n");

344 
	}
}

346 
	$boŸ_≠
(
uöt32_t
 
∑
, uöt32_à
id
)

348 
	`outb
(0x70, 0xf);

349 
	`outb
(0x71, 0x0a);

351 
uöt16_t
 *
w¨m_£tv
 = (uint16_t*)0x467;

352 
w¨m_£tv
[0] = 0;

353 
w¨m_£tv
[1] = 
∑
 >> 4;

354 
	`≠ic_ùi_öô
(
id
);

355 
	`dñay
(900000);

356 
	`ªad_œpic
(0x300Ë& 
DELIVER_ST
);

358 
	`wrôe_œpic
(0x310, 
id
<<24);

359 
	`wrôe_œpic
(0x300, 0x600 | (
∑
>>12));

360 
	`≠ic_waô
();

361 
	`ªad_œpic
(0x300Ë& 
DELIVER_ST
);

363 
	`dñay
(300000);

365 
	`≠ic_waô
();

366 
	`wrôe_œpic
(0x310, 
id
<<24);

367 
	`wrôe_œpic
(0x300, 0x600 | (
∑
>>12));

368 
	`≠ic_waô
();

369 
	`ªad_œpic
(0x300Ë& 
DELIVER_ST
);

370 
	`lock_˝rötf
("Bef‹ê%†ªtu∫, id:%d\n", 
__func__
, 
id
);

371 
	`dñay
(300000);

372 *
AP_BOOT_SIG
 != 0xdcba)

373 
__asm__
 
	`__vﬁ©ûe__
("pause");

376 
	}
}

378 
uöt32_t
 
	$œpicid
()

380 
uöt8_t
 
œpicid_to_ödex
[256];

381  (
œpicid_to_ödex
[(
	`ªad_œpic
(0x20)>>24)]);

382 
	}
}

	@kern/boot_linux.c

1 
	~<öc/ty≥s.h
>

2 
	~<öc/löux-hódî.h
>

3 
	~<öc/°dio.h
>

4 
	~<öc/°rög.h
>

5 
	~<öc/x86.h
>

8 
	#SECTSIZE
 512

	)

11 
	$waôdisk
()

14 (
	`öb
(0x1F7) & 0xC0) != 0x40)

16 
	}
}

19 
	$ªad£˘
(*
d°
, 
uöt32_t
 
off£t
)

24 
	`outb
(0x1F2, 1);

25 
	`outb
(0x1F3, 
off£t
);

26 
	`outb
(0x1F4, 
off£t
 >> 8);

27 
	`outb
(0x1F5, 
off£t
 >> 16);

28 
	`outb
(0x1F6, (
off£t
 >> 24) | 0xE0);

29 
	`outb
(0x1F7, 0x20);

35 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
 / 4);

36 
	}
}

41 
	$ªad£g
(
uöt64_t
 
va
, 
uöt32_t
 
cou¡
, uöt32_à
off£t
)

43 
uöt64_t
 
íd_va
;

45 
va
 &= 0xFFFFFF;

46 
íd_va
 = 
va
 + 
cou¡
;

49 
va
 &~(
SECTSIZE
 - 1);

52 
off£t
 = (off£à/ 
SECTSIZE
);

57 
	`ªad£˘
((
uöt8_t
 *Ë
va
, 
off£t
);

58 
	}
}

62 
lhódî
 *
	$gë_lhódî
(*
addr
)

64 
uöt8_t
 *
p
 = (uöt8_à*)
addr
;

65 
lhódî
 *
lh
;

67 
uöt32_t
 
i
 = 0; i < 8096; i ++)

69 
lh
 = (
lhódî
 *)
p
;

70 if(
lh
->
boŸ_Êags
 =0xAA55 &&Üh->
löux_sig
[0] == 'H'

71 && 
lh
->
löux_sig
[1] == 'd' &&Üh->linux_sig[2] == 'r'

72 && 
lh
->
löux_sig
[3] == 'S')

73  (
lhódî
 *)
lh
;

74 
p
 ++;

77 
	}
}

79 
	$löux_move
(*
addr
, 
uöt32_t
 
size
)

81 *
kîn_p
;

82 
lhódî
 *
lh
;

83 
uöt32_t
 
£tup_size
;

85 
kîn_p
 = (*Ë
addr
;

87 
lh
 = 
	`gë_lhódî
(
addr
);

89 
lh
->
code32_°¨t
 = 
LINUX_KERN_ADDR
;

90 
lh
->
lﬂdÊags
 |= 0x80;

91 
lh
->
lﬂdÊags
 |= 0x10;

92 
lh
->
hóp_íd_±r
 = 0x9800 - 0x200;

93 
lh
->
ty≥_of_lﬂdî
 = 0x71;

94 
£tup_size
 = (
lh
->
£tup_£˘‹s
 + 1) * 512;

95 
kîn_p
 +
£tup_size
;

97 
	`memmove
((*)
LINUX_REAL_ADDR
, 
addr
, 
£tup_size
);

98 
	`memmove
((*)
LINUX_KERN_ADDR
, (*)
kîn_p
, (
size
 - 
£tup_size
));

99 
	}
}

	@kern/console.c

3 
	~<öc/x86.h
>

4 
	~<öc/memœyout.h
>

5 
	~<öc/kbdªg.h
>

6 
	~<öc/°rög.h
>

7 
	~<öc/as£π.h
>

8 
	~<öc/ötma¸o.h
>

10 
	~<kîn/c⁄sﬁe.h
>

12 
£m
 
¥öt_£m
;

14 
c⁄s_öå
((*
¥oc
)());

19 
	#COM1
 0x3F8

	)

21 
	#COM_TX
 0

	)

22 
	#COM_RX
 0

23 
	#COM_DLL
 0

24 
	#COM_DLH
 1

25 
	#COM_IER
 1

26 
	#COM_IER_RDI
 0x01

27 
	#COM_IIR
 2

28 
	#COM_FCR
 2

29 
	#COM_LCR
 3

30 
	#COM_LCR_DLAB
 0x80

31 
	#COM_LCR_WLEN8
 0x03

32 
	#COM_MCR
 4

33 
	#COM_MCR_RTS
 0x02

34 
	#COM_MCR_DTR
 0x01

35 
	#COM_MCR_OUT2
 0x08

36 
	#COM_LSR
 5

37 
	#COM_LSR_DATA
 0x01

38 
	#COM_LSR_TXRDY
 0x20

	)

40 
	#OSV_SERIAL
 1

	)

42 
boﬁ_t
 
£rül_exi°s
;

46 
	$dñay
()

48 
	`öb
(0x84);

49 
	`öb
(0x84);

50 
	`öb
(0x84);

51 
	`öb
(0x84);

52 
	}
}

56 
	$£rül_¥oc_d©a
()

58 i‡(!(
	`öb
(
COM1
+
COM_LSR
Ë& 
COM_LSR_DATA
))

60  
	`öb
(
COM1
+
COM_RX
);

61 
	}
}

64 
	$£rül_öå
()

66 i‡(
£rül_exi°s
)

67 
	`c⁄s_öå
(
£rül_¥oc_d©a
);

68 
	}
}

70 
	$£rül_putc
(
c
)

72 
i
 = 0;

73 !(
	`öb
(
COM1
 + 
COM_LSR
Ë& 
COM_LSR_TXRDY
Ë&& 
i
 < 12800;

74 
i
++)

75 
	`dñay
();

76 
	`outb
(
COM1
 + 
COM_TX
, 
c
);

77 
	}
}

80 
	$£rül_öô
()

83 
	`outb
(
COM1
+
COM_LCR
, 
COM_LCR_DLAB
);

85 
	`outb
(
COM1
+
COM_DLL
, 1);

87 
	`outb
(
COM1
+
COM_DLH
, 0);

95 
	`outb
(
COM1
+
COM_LCR
, 
COM_LCR_WLEN8
);

97 
	`outb
(
COM1
+
COM_IER
, 0);

99 
	`outb
(
COM1
+
COM_FCR
, 0);

100 
	`outb
(
COM1
+
COM_MCR
, 0xb);

101 
	}
}

110 
	$Õt_putc
(
c
)

112 
i
;

114 
i
 = 0; !(
	`öb
(0x378+1) & 0x80) && i < 12800; i++)

115 
	`dñay
();

116 
	`outb
(0x378+0, 
c
);

117 
	`outb
(0x378+2, 0x08|0x04|0x01);

118 
	`outb
(0x378+2, 0x08);

119 
	}
}

126 
	gaddr_6845
;

127 
uöt16_t
 *
	g¸t_buf
;

128 
uöt16_t
 *
	gvga_buf
;

129 vﬁ©ûê
uöt16_t
 
	g¸t_pos
;

131 #i‡
CRT_SAVEROWS
 > 0

132 
uöt16_t
 
	g¸tßve_buf
[
CRT_SAVEROWS
 * 
CRT_COLS
];

133 
uöt16_t
 
	g¸tßve_pos
;

134 
öt16_t
 
	g¸tßve_backs¸ﬁl
;

135 
uöt16_t
 
	g¸tßve_size
;

139 
	$cga_öô
()

141 vﬁ©ûê
uöt16_t
 *
˝
;

142 
uöt16_t
 
was
;

143 
pos
;

145 
˝
 = (
uöt16_t
*Ë(
KERNBASE
 + 
CGA_BUF
);

146 
was
 = *
˝
;

147 *
˝
 = (
uöt16_t
) 0xA55A;

148 i‡(*
˝
 != 0xA55A) {

149 
˝
 = (
uöt16_t
*Ë(
KERNBASE
 + 
MONO_BUF
);

150 
addr_6845
 = 
MONO_BASE
;

152 *
˝
 = 
was
;

153 
addr_6845
 = 
CGA_BASE
;

157 
	`outb
(
addr_6845
, 14);

158 
pos
 = 
	`öb
(
addr_6845
 + 1) << 8;

159 
	`outb
(
addr_6845
, 15);

160 
pos
 |
	`öb
(
addr_6845
 + 1);

162 
¸t_buf
 = (
uöt16_t
*Ë
˝
;

163 
¸t_pos
 = 
pos
;

164 
	}
}

166 #i‡
CRT_SAVEROWS
 > 0

170 
	$cga_ßvebuf_c›y
(
fú°_löe
, 
boﬁ_t
 
to_s¸ìn
)

172 
uöt16_t
 *
pos
;

173 
uöt16_t
 *
íd
;

174 
uöt16_t
 *
åuìnd
;

177 
pos
 = 
¸tßve_buf
 + (
fú°_löe
 % 
CRT_SAVEROWS
Ë* 
CRT_COLS
;

178 
íd
 = 
pos
 + 
CRT_ROWS
 * 
CRT_COLS
;

180 
åuìnd
 = 
	`JMIN
(
íd
, 
¸tßve_buf
 + 
CRT_SAVEROWS
 * 
CRT_COLS
);

183 i‡(
to_s¸ìn
)

184 
	`mem˝y
(
¸t_buf
, 
pos
, (
åuìnd
 -ÖosË* (
uöt16_t
));

186 
	`mem˝y
(
pos
, 
¸t_buf
, (
åuìnd
 -ÖosË* (
uöt16_t
));

189 i‡(
íd
 =
åuìnd
)

191 i‡(
to_s¸ìn
)

192 
	`mem˝y
(
¸t_buf
 + (
åuìnd
 - 
pos
), 
¸tßve_buf
,

193 (
íd
 - 
åuìnd
Ë* (
uöt16_t
));

195 
	`mem˝y
(
¸tßve_buf
, 
¸t_buf
 + (
åuìnd
 - 
pos
),

196 (
íd
 - 
åuìnd
Ë* (
uöt16_t
));

197 
	}
}

203 
	$cga_putc
(
c
)

206 #i‡
CRT_SAVEROWS
 > 0

208 i‡(
¸tßve_backs¸ﬁl
 > 0) {

209 
	`cga_ßvebuf_c›y
(
¸tßve_pos
 + 
¸tßve_size
, 1);

210 
¸tßve_backs¸ﬁl
 = 0;

215 i‡(!(
c
 & ~0xFF))

216 
c
 |= 0x0700;

218 
c
 & 0xff) {

220 i‡(
¸t_pos
 > 0) {

221 
¸t_pos
--;

222 
¸t_buf
[
¸t_pos
] = (
c
 & ~0xff) | ' ';

226 
¸t_pos
 +
CRT_COLS
;

229 
¸t_pos
 -(¸t_po†% 
CRT_COLS
);

232 
	`c⁄s_putc
(' ');

233 
	`c⁄s_putc
(' ');

234 
	`c⁄s_putc
(' ');

235 
	`c⁄s_putc
(' ');

236 
	`c⁄s_putc
(' ');

239 
¸t_buf
[
¸t_pos
++] = 
c
;

244 i‡(
¸t_pos
 >
CRT_SIZE
) {

245 
i
;

247 #i‡
CRT_SAVEROWS
 > 0

249 i‡(
¸tßve_size
 =
CRT_SAVEROWS
 - 
CRT_ROWS
)

250 
¸tßve_pos
 = (¸tßve_po†+ 1Ë% 
CRT_SAVEROWS
;

252 
¸tßve_size
++;

253 
	`mem˝y
(
¸tßve_buf
 +

254 ((
¸tßve_pos
 + 
¸tßve_size
 - 1Ë% 
CRT_SAVEROWS
Ë* 
CRT_COLS
,

255 
¸t_buf
, 
CRT_COLS
 * (
uöt16_t
));

258 
	`mem˝y
(
¸t_buf
, cπ_bu‡+ 
CRT_COLS
, (
CRT_SIZE
 - CRT_COLSË* (
uöt16_t
));

259 
i
 = 
CRT_SIZE
 - 
CRT_COLS
; i < CRT_SIZE; i++)

260 
¸t_buf
[
i
] = 0x0700 | ' ';

261 
¸t_pos
 -
CRT_COLS
;

265 
	`outb
(
addr_6845
, 14);

266 
	`outb
(
addr_6845
 + 1, 
¸t_pos
 >> 8);

267 
	`outb
(
addr_6845
, 15);

268 
	`outb
(
addr_6845
 + 1, 
¸t_pos
);

269 
	}
}

272 #i‡
CRT_SAVEROWS
 > 0

274 
	$cga_s¸ﬁl
(
dñè
)

276 
√w_backs¸ﬁl
 = 
	`JMIN
(
¸tßve_backs¸ﬁl
 - 
dñè
, 
¸tßve_size
);

277 
√w_backs¸ﬁl
 = 
	`JMAX
(new_backscroll, 0);

279 i‡(
√w_backs¸ﬁl
 =
¸tßve_backs¸ﬁl
)

281 i‡(
¸tßve_backs¸ﬁl
 == 0)

283 
	`cga_ßvebuf_c›y
(
¸tßve_pos
 + 
¸tßve_size
, 0);

285 
¸tßve_backs¸ﬁl
 = 
√w_backs¸ﬁl
;

286 
	`cga_ßvebuf_c›y
(
¸tßve_pos
 + 
¸tßve_size
 - 
¸tßve_backs¸ﬁl
, 1);

287 
	}
}

293 
	#NO
 0

	)

295 
	#SHIFT
 (1<<0)

	)

296 
	#CTL
 (1<<1)

	)

297 
	#ALT
 (1<<2)

	)

299 
	#CAPSLOCK
 (1<<3)

	)

300 
	#NUMLOCK
 (1<<4)

	)

301 
	#SCROLLLOCK
 (1<<5)

	)

303 
	#E0ESC
 (1<<6)

	)

305 
uöt8_t
 
	gshi·code
[256] =

307 [0x1D] 
CTL
,

308 [0x2A] 
SHIFT
,

309 [0x36] 
SHIFT
,

310 [0x38] 
ALT
,

311 [0x9D] 
CTL
,

312 [0xB8] 
ALT


315 
uöt8_t
 
	gtoggÀcode
[256] =

317 [0x3A] 
CAPSLOCK
,

318 [0x45] 
NUMLOCK
,

319 [0x46] 
SCROLLLOCK


322 
uöt8_t
 
	gn‹mÆm≠
[256] =

324 
NO
, 0x1B, '1', '2', '3', '4', '5', '6',

327 'o', 'p', '[', ']', '\n', 
NO
, 'a', 's',

329 '\'', '`', 
NO
, '\\', 'z', 'x', 'c', 'v',

330 'b', 'n', 'm', ',', '.', '/', 
NO
, '*',

331 
NO
, ' ', NO, NO, NO, NO, NO, NO,

332 
NO
, NO, NO, NO, NO, NO, NO, '7',

334 '2', '3', '0', '.', 
NO
, NO, NO, NO,

335 [0xC7] 
KEY_HOME
, [0x9C] '\n' ,

336 [0xB5] '/' , [0xC8] 
KEY_UP
,

337 [0xC9] 
KEY_PGUP
, [0xCB] 
KEY_LF
,

338 [0xCD] 
KEY_RT
, [0xCF] 
KEY_END
,

339 [0xD0] 
KEY_DN
, [0xD1] 
KEY_PGDN
,

340 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


343 
uöt8_t
 
	gshi·m≠
[256] =

345 
NO
, 033, '!', '@', '#', '$', '%', '^',

348 'O', 'P', '{', '}', '\n', 
NO
, 'A', 'S',

350 '"', '~', 
NO
, '|', 'Z', 'X', 'C', 'V',

351 'B', 'N', 'M', '<', '>', '?', 
NO
, '*',

352 
NO
, ' ', NO, NO, NO, NO, NO, NO,

353 
NO
, NO, NO, NO, NO, NO, NO, '7',

355 '2', '3', '0', '.', 
NO
, NO, NO, NO,

356 [0xC7] 
KEY_HOME
, [0x9C] '\n' ,

357 [0xB5] '/' , [0xC8] 
KEY_UP
,

358 [0xC9] 
KEY_PGUP
, [0xCB] 
KEY_LF
,

359 [0xCD] 
KEY_RT
, [0xCF] 
KEY_END
,

360 [0xD0] 
KEY_DN
, [0xD1] 
KEY_PGDN
,

361 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


364 
	#C
(
x
Ë(x - '@')

	)

366 
uöt8_t
 
	g˘lm≠
[256] =

368 
NO
, NO, NO, NO, NO, NO, NO, NO,

369 
NO
, NO, NO, NO, NO, NO, NO, NO,

370 
C
('Q'), C('W'), C('E'), C('R'), C('T'), C('Y'), C('U'), C('I'),

371 
C
('O'), C('P'), 
NO
, NO, '\r', NO, C('A'), C('S'),

372 
C
('D'), C('F'), C('G'), C('H'), C('J'), C('K'), C('L'), 
NO
,

373 
NO
, NO, NO, 
C
('\\'), C('Z'), C('X'), C('C'), C('V'),

374 
C
('B'), C('N'), C('M'), 
NO
, NO, C('/'), NO, NO,

375 [0x97] 
KEY_HOME
,

376 [0xB5] 
C
('/'), [0xC8] 
KEY_UP
,

377 [0xC9] 
KEY_PGUP
, [0xCB] 
KEY_LF
,

378 [0xCD] 
KEY_RT
, [0xCF] 
KEY_END
,

379 [0xD0] 
KEY_DN
, [0xD1] 
KEY_PGDN
,

380 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


383 
uöt8_t
 *
	gch¨code
[4] = {

384 
n‹mÆm≠
,

385 
shi·m≠
,

386 
˘lm≠
,

387 
˘lm≠


395 
	$kbd_¥oc_d©a
()

397 
c
;

398 
uöt8_t
 
d©a
;

399 
uöt32_t
 
shi·
;

401 i‡((
	`öb
(
KBSTATP
Ë& 
KBS_DIB
) == 0)

404 
d©a
 = 
	`öb
(
KBDATAP
);

406 i‡(
d©a
 == 0xE0) {

408 
shi·
 |
E0ESC
;

410 } i‡(
d©a
 & 0x80) {

412 
d©a
 = (
shi·
 & 
E0ESC
 ? data : data & 0x7F);

413 
shi·
 &~(
shi·code
[
d©a
] | 
E0ESC
);

415 } i‡(
shi·
 & 
E0ESC
) {

417 
d©a
 |= 0x80;

418 
shi·
 &~
E0ESC
;

421 
shi·
 |
shi·code
[
d©a
];

422 
shi·
 ^
toggÀcode
[
d©a
];

424 
c
 = 
ch¨code
[
shi·
 & (
CTL
 | 
SHIFT
)][
d©a
];

425 i‡(
shi·
 & 
CAPSLOCK
) {

426 i‡('a' <
c
 && c <= 'z')

427 
c
 += 'A' - 'a';

428 i‡('A' <
c
 && c <= 'Z')

429 
c
 += 'a' - 'A';

434 i‡(!(~
shi·
 & (
CTL
 | 
ALT
)Ë&& 
c
 =
KEY_DEL
) {

435 
	`˝rötf
("Rebooting!");

436 
uöt32_t
 
i
 = 0; i < 5; i ++)

438 
	`˝rötf
(".");

439 
uöt32_t
 
j
 = 0; j < 300000000; j ++)

440 
__asm
 
	`__vﬁ©ûe
("pause"::);

443 
	`outb
(0x92, 0x3);

446  
c
;

447 
	}
}

450 
	$kbd_öå
()

452 
	`c⁄s_öå
(
kbd_¥oc_d©a
);

453 
	}
}

456 
	$kbd_öô
()

458 
	}
}

467 
	#CONSBUFSIZE
 512

	)

470 
uöt8_t
 
	mbuf
[
CONSBUFSIZE
];

471 
uöt32_t
 
	mΩos
;

472 
uöt32_t
 
	mwpos
;

473 } 
	gc⁄s
;

478 
c⁄s_öå
((*
¥oc
)())

480 
c
;

482 (
c
 = (*
¥oc
)()) != -1) {

483 i‡(
c
 == 0)

485 
c⁄s
.
buf
[c⁄s.
wpos
++] = 
c
;

486 i‡(
c⁄s
.
wpos
 =
CONSBUFSIZE
)

487 
c⁄s
.
wpos
 = 0;

489 
	}
}

493 
	$c⁄s_gëc
()

495 
c
;

500 
	`£rül_öå
();

501 
	`kbd_öå
();

504 i‡(
c⁄s
.
Ωos
 !c⁄s.
wpos
) {

505 
c
 = 
c⁄s
.
buf
[c⁄s.
Ωos
++];

506 i‡(
c⁄s
.
Ωos
 =
CONSBUFSIZE
)

507 
c⁄s
.
Ωos
 = 0;

508  
c
;

511 
	}
}

515 
	$c⁄s_putc
(
c
)

518 #ifde‡
OSV_SERIAL


519 
	`£rül_putc
(
c
);

521 
	`cga_putc
(
c
);

524 
	}
}

528 
	$c⁄s_öô
()

530 
¥öt_£m
.
£mph
 = 1;

531 #ifde‡
OSV_SERIAL


532 
	`£rül_öô
();

534 
	`cga_öô
();

535 
	`kbd_öô
();

537 
	}
}

543 
	$˝utch¨
(
c
)

545 
	`c⁄s_putc
(
c
);

546 
	}
}

549 
	$gëch¨
()

551 
c
;

553 (
c
 = 
	`c⁄s_gëc
()) == 0)

555  
c
;

556 
	}
}

559 
	$isc⁄s
(
fdnum
)

563 
	}
}

	@kern/console.h

3 #i‚de‡
_CONSOLE_H_


4 
	#_CONSOLE_H_


	)

5 #i‚de‡
JOS_KERNEL


9 
	~<öc/ty≥s.h
>

11 
	#MONO_BASE
 0x3B4

	)

12 
	#MONO_BUF
 0xB0000

	)

13 
	#CGA_BASE
 0x3D4

	)

14 
	#CGA_BUF
 0xB8000

	)

15 
	#VGA_BUF
 0xA0000

	)

17 
	#CRT_SAVEROWS
 1024

	)

20 
	#CRT_ROWS
 25

	)

21 
	#CRT_COLS
 80

	)

22 
	#CRT_SIZE
 (
CRT_ROWS
 * 
CRT_COLS
)

	)

24 
c⁄s_öô
();

25 
c⁄s_putc
(
c
);

26 
c⁄s_gëc
();

28 
kbd_öå
();

29 
£rül_öå
();

	@kern/detectmem.c

1 
	~<öc/°dio.h
>

2 
	~<öc/°rög.h
>

3 
	~<öc/as£π.h
>

4 
	~<öc/ty≥s.h
>

6 
	~<kîn/m⁄ô‹.h
>

7 
	~<kîn/c⁄sﬁe.h
>

9 
	se820_íåy


11 
uöt64_t
 
	m°¨t
;

12 
uöt64_t
 
	msize
;

13 
uöt32_t
 
	mty≥
;

16 
	#E820_ENTRY
 ((
e820_íåy
 *Ë0x3000)

	)

17 
	#E820_NR
 ((
uöt8_t
 *Ë0x1e8)

	)

19 
	$dëe˘_mem
()

21 
uöt8_t
 
i
;

22 
e820_íåy
 *
íåy
;

23 
íåy
 = 
E820_ENTRY
;

24 
	`˝rötf
("tŸÆÑ™ge†%d\n", *
E820_NR
);

25 
i
 = 0; i < *
E820_NR
; i ++ )

27 
	`˝rötf
("øngê%d\n", 
i
);

28 
	`˝rötf
("°¨àadd∏0x%lx, sizê0x%lx,Åy≥ %d\n", 
íåy
->
°¨t
,É¡ry->
size
,É¡ry->
ty≥
);

29 
íåy
 ++;

31 
	}
}

	@kern/domain.c

1 
	~<öc/domaö.h
>

2 
	~<öc/°rög.h
>

3 
	~<öc/svm.h
>

4 
	~<öc/vm±.h
>

5 
	~<öc/˝u.h
>

6 
	~<öc/≈t.h
>

14 
domaö_t
 
	gdomaös
[
NR_DOMAINS
];

17 
uöt64_t
 
Re£rve_Mem
;

18 
uöt64_t
 
domu_ßve
;

20 
	$öô_e820m≠
(
id
)

22 
domaö_t
 *
domaö
 = &
domaös
[
id
];

23 
boŸ_∑øms
 *
∑øms
 = 
domaö
->boot_params;

24 
e820íåy
 *
íåy
 = 
∑øms
->
e820_m≠
;

25 
íåõs
 = 
∑øms
->
e820_íåõs
;

26 
uöt64_t
 
°¨t
 = 
domaö
->
mem_°¨t
;

27 
uöt64_t
 
size
 = 
domaö
->
mem_Àngth
;

32 
	`˝rötf
("°¨ài†0x%lx\n", 
°¨t
);

33 
i
 = 0; i < 
íåõs
; i ++)

35 if(
íåy
[
i
].
ty≥
 == 1)

37 if(
íåy
[
i
].
addr
 == 0)

41 
íåy
[
i
].
size
 = 
domaö
->
mem_Àngth
;

42 
	`˝rötf
("íåy[%d].add∏=0\n", 
i
);

46 
íåy
[
i
].
ty≥
 = 2;

48 if(
íåy
[
i
].
addr
 +É¡ry[i].
size
 < 
°¨t
 &&Éntry[i].addr +Éntry[i].size < 0xFFFFFFFF)

50 
íåy
[
i
].
addr
 = 
VMM_RESERVED
 + 
id
*0x1a000000;

51 
íåy
[
i
].
size
 = 0x1a000000 - 
MEM_GAP
;

53 if(
íåy
[
i
].
addr
 +É¡ry[i].
size
 > 
°¨t
 &&

54 
íåy
[
i
].
addr
 < 
°¨t
 &&

55 
íåy
[
i
].
addr
 +É¡ry[i].
size
 < 
°¨t
 + size)

57 
íåy
[
i
].
addr
 = 
°¨t
;

58 
íåy
[
i
].
size
 -(
°¨t
 -É¡ry[i].
addr
);

59 
size
 -
íåy
[
i
].size;

60 
°¨t
 = 
íåy
[
i
].
addr
 +É¡ry[i].
size
;

62 if(
íåy
[
i
].
addr
 < 
°¨t
 &&

63 
íåy
[
i
].
addr
 +É¡ry[i].
size
 >
°¨t
 + size)

65 
íåy
[
i
].
addr
 = 
°¨t
;

66 if(
id
 == 1){

67 
íåy
[
i
].
size
 = sizê- 
MEM_GAP
 - 1024*1024*800;

68 
Re£rve_Mem
 = 
°¨t
 + 
íåy
[
i
].
size
;

71 
íåy
[
i
].
size
 = sizê- 
MEM_GAP
;

73 if((
íåy
[
i
].
addr
 > 
°¨t
 &&Éntry[i].addr +

74 
íåy
[
i
].
size
 > 
°¨t
 + size))

75 
íåy
[
i
].
size
 = 
°¨t
 + sizê-É¡ry[i].
addr
;

76 if(
íåy
[
i
].
addr
 > 
°¨t
 + 
size
)

77 
íåy
[
i
].
ty≥
 = 2;

83 
	}
}

86 
	$c⁄°ru˘_domu_e820m≠
(
e820íåy
 *
‹igöÆ
, 
íåõs
, e820íåy *
√w
, 
did
)

88 
uöt64_t
 
i
, 
j
, 
Àngth
 = 0, 
off£t
 = 
node
[
did
].
ba£_addr
;

90 
i
=0,
j
=0; i<
íåõs
; i++){

91 if(
‹igöÆ
[
i
].
ty≥
 == 1)

93 if(
‹igöÆ
[
i
].
addr
 == 0){

94 
√w
[
j
].
addr
 = 0;

95 
√w
[
j
].
size
 = 0xa0000;

96 
√w
[
j
].
ty≥
 = 1;

97 
	`öô_≈t_ønge
(
√w
[
j
].
addr
,Çew[j].
size
, 
did
, 
off£t
);

98 
j
++;

101 if(
‹igöÆ
[
i
].
addr
 == 0x100000)

103 
√w
[
j
].
addr
 = 
‹igöÆ
[
i
].addr;

104 
√w
[
j
].
size
 = 
VMM_RESERVED
 - 
‹igöÆ
[
i
].
addr
;

105 
√w
[
j
].
ty≥
 = 2;

106 
j
++;

107 
√w
[
j
].
addr
 = 
VMM_RESERVED
;

108 
√w
[
j
].
size
 = 
‹igöÆ
[
i
].size -Çew[j-1].size;

109 
Àngth
 = 
VMM_RESERVED
 + 
√w
[
j
].
size
;

111 
√w
[
j
].
ty≥
 = 1;

112 
	`öô_≈t_ønge
(
√w
[
j
].
addr
,Çew[j].
size
, 
did
, 
off£t
);

114 
j
++;

117 if(
‹igöÆ
[
i
].
addr
 == 0x100000000UL){

118 
√w
[
j
].
addr
 = 
‹igöÆ
[
i
].addr;

119 
√w
[
j
].
size
 = 
node
[
did
].
ba£_addr
 - 0x100000000UL + 
Àngth
;

120 
√w
[
j
].
ty≥
 = 2;

123 
j
++;

126 
√w
[
j
].
addr
 = 
node
[
did
].
ba£_addr
 + 
Àngth
;

127 
√w
[
j
].
size
 = 
node
[
did
].
Àngth
 - 
NPT_TAB_RESERVE_MEM
 -Üength;

128 
√w
[
j
].
ty≥
 = 1;

130 
	`öô_≈t_ønge
(
√w
[
j
].
addr
,Çew[j].
size
, 
did
, 0);

131 
j
++;

133 
√w
[
j
].
addr
 =Çew[j-1].add∏+Çew[j-1].
size
;

134 
√w
[
j
].
size
 = 
node
[3].
Àngth
 +Çode[3].
ba£_addr
 -Çew[j].
addr
;

135 
√w
[
j
].
ty≥
 = 2;

137 
j
++;

141 
√w
[
j
].
addr
 = 
‹igöÆ
[
i
].addr;

142 
√w
[
j
].
size
 = 
‹igöÆ
[
i
].size;

143 
√w
[
j
].
ty≥
 = 
‹igöÆ
[
i
].type;

145 
j
++;

148  
j
;

149 
	}
}

151 
	$c⁄°ru˘_e820m≠
(
e820íåy
 *
‹igöÆ
, 
íåõs
, e820íåy *
√w
)

153 
i
, 
j
;

154 
i
=0,
j
=0; i<
íåõs
; i++){

155 if(
‹igöÆ
[
i
].
ty≥
 == 1)

157 if(
‹igöÆ
[
i
].
addr
 == 0){

158 
√w
[
j
].
addr
 = 0;

159 
√w
[
j
].
size
 = 0x9d800;

160 
√w
[
j
].
ty≥
 = 1;

161 
j
++;

164 if(
‹igöÆ
[
i
].
addr
 == 0x100000)

166 
√w
[
j
].
addr
 = 
‹igöÆ
[
i
].addr;

167 
√w
[
j
].
size
 = 
VMM_RESERVED
 - 
‹igöÆ
[
i
].
addr
;

168 
√w
[
j
].
ty≥
 = 2;

169 
j
++;

170 
√w
[
j
].
addr
 = 
VMM_RESERVED
;

171 
√w
[
j
].
size
 = 
‹igöÆ
[
i
].size -Çew[j-1].size;

172 
√w
[
j
].
ty≥
 = 1;

173 
j
++;

176 if(
‹igöÆ
[
i
].
addr
>
node
[0].
ba£_addr
 +Çode[0].
Àngth
){

177 
√w
[
j
].
addr
 = 
‹igöÆ
[
i
].addr;

178 
√w
[
j
].
size
 = 
‹igöÆ
[
i
].size;

179 
√w
[
j
].
ty≥
 = 2;

180 
j
++;

183 if(
‹igöÆ
[
i
].
addr
 + origöÆ[i].
size
 >
node
[0].
ba£_addr
 +Çode[0].
Àngth
){

184 
√w
[
j
].
addr
 = 
‹igöÆ
[
i
].addr;

186 
√w
[
j
].
size
 = 
node
[0].
Àngth
 - 512 * 1024 * 1024;

187 
√w
[
j
].
ty≥
 = 1;

188 
j
++;

189 
√w
[
j
].
addr
 =Çew[j-1].add∏+Çew[j-1].
size
;

190 
√w
[
j
].
size
 = 
‹igöÆ
[
i
].size -Çew[j-1].size;

191 
√w
[
j
].
ty≥
 = 2;

192 
j
++;

195 
√w
[
j
].
addr
 = 
‹igöÆ
[
i
].addr;

196 
√w
[
j
].
size
 = 
‹igöÆ
[
i
].size;

197 
√w
[
j
].
ty≥
 = 
‹igöÆ
[
i
].type;

198 
j
++;

201  
j
;

202 
	}
}

204 
	$¸óã_domu
(
boŸ_∑øms
 *
∑øms
, 
moduÀ_t
 *
mdl
, 
did
)

206 
size_t
 
size_k
, 
size_i
;

207 
moduÀ_t
 *
kî√l
, *
öôrd
;

208 
lhódî
 *
lh
;

209 *
kîn_p
;

210 
uöt32_t
 
£tup_size
;

211 *
cmdlöe
;

212 
uöt64_t
 
cmdaddr
, 
ba£_addr
;

213 
boŸ_∑øms
 * boot_params;

215 
ba£_addr
 = 
node
[
did
].base_addr;

216 
domaö_t
 *
domaö
 = &
domaös
[
did
];

222 
	`lock_˝rötf
("Cª©êDomU: %d\n", 
did
);

223 
domaö
->
k_addr
 = 0xa000000 * 2 + 
ba£_addr
;

224 
domaö
->
i_addr
 = 0xa000000 * 3 + 
ba£_addr
;

225 
domaö
->
boŸ_∑øms
 = (boŸ_∑øm†*)(0xa000000*4 + 
ba£_addr
);

226 
domaö
->
dom_ty≥
 = 1;

227 
kî√l
 = 
mdl
;

228 
öôrd
 = &
mdl
[1];

230 
cmdlöe
 = (*)((
uöt64_t
)
kî√l
->
°rög
);

231 
cmdaddr
 = (
uöt64_t
)(
domaö
->
boŸ_∑øms
 + 1);

232 
	`mem˝y
((*)
cmdaddr
, 
cmdlöe
, 256);

236 
size_k
 = 
kî√l
->
mode_íd
 - kî√l->
mode_°¨t
;

237 
size_i
 = 
öôrd
->
mode_íd
 - inôrd->
mode_°¨t
;

239 
	`memmove
((*)(
uöt64_t
)
domaö
->
k_addr
, (*)((uöt64_t)
kî√l
->
mode_°¨t
),

240 
size_k
);

242 
	`memmove
((*)(
uöt64_t
)
domaö
->
i_addr
, (*)((uöt64_t)
öôrd
->
mode_°¨t
),

243 
size_i
);

244 if(
size_i
 > 0xa000000){

245 
	`lock_˝rötf
("Initrd isÅoÜarge\n");

249 
	`mem˝y
(
domaö
->
boŸ_∑øms
, 
∑øms
, (boot_params));

251 
kîn_p
 = (*)(
uöt64_t
)
domaö
->
k_addr
;

252 
lh
 = 
	`gë_lhódî
((*)(
uöt64_t
)
domaö
->
k_addr
);

253 if(
lh
)

255 
	`lock_˝rötf
("Linux sig found :");

256 
uöt32_t
 
i
 = 0; i < 4; i ++)

257 
	`lock_˝rötf
("%c", 
lh
->
löux_sig
[
i
]);

258 
	`lock_˝rötf
("\n");

260 
lh
->
lﬂdÊags
 |= 0x80;

261 
lh
->
lﬂdÊags
 |= 0x10;

262 
lh
->
hóp_íd_±r
 = 0x9800 - 0x200;

263 
lh
->
ty≥_of_lﬂdî
 = 0x71;

264 
£tup_size
 = (
lh
->
£tup_£˘‹s
 + 1) * 512;

265 
kîn_p
 +
£tup_size
;

267 
domaö
->
code32_°¨t
 = 0xa000000;

268 
lh
->
code32_°¨t
 = 
domaö
->code32_start;

269 
	`mem˝y
(&(
domaö
->
boŸ_∑øms
->
hdr
), &
lh
->
£tup_£˘‹s
,

270 (
domaö
->
boŸ_∑øms
->
hdr
));

271 
	`memmove
((*)(
uöt64_t
)
domaö
->
code32_°¨t
 + 
ba£_addr
, (*)
kîn_p
, 
size_k
 - 
£tup_size
);

276 
domaö
->
boŸ_∑øms
->
hdr
.
cmd_löe_±r
 = 
cmdaddr
 - 
ba£_addr
;

277 
domaö
->
boŸ_∑øms
->
hdr
.
ømdisk_image
 = domaö->
i_addr
 - 
ba£_addr
;

278 
domaö
->
boŸ_∑øms
->
hdr
.
ømdisk_size
 = 
size_i
;

279 
domaö
->
boŸ_∑øms
->
hdr
.
code32_°¨t
 = domain->code32_start;

280 
domaö
->
boŸ_∑øms
->
s¸ìn_öfo
.
‹ig_video_ega_bx
 = 0x10;

284 
boŸ_∑øms
 = 
domaö
->boot_params;

285 
boŸ_∑øms
->
e820_íåõs
 = 
	`c⁄°ru˘_domu_e820m≠
(
∑øms
->
e820_m≠
,Ö¨ams->e820_íåõs, boŸ_∑øms->e820_m≠, 
did
);

287 
i
;

288 
	`lock_˝rötf
("DomainUÉ820 map dump\n");

289 
i
=0;i<
boŸ_∑øms
->
e820_íåõs
; i++){

290 
	`lock_˝rötf
("Mem‹y sèπ:%lx, size:%lx,Åy≥:%d\n", 
boŸ_∑øms
->
e820_m≠
[
i
].
addr
,

291 
boŸ_∑øms
->
e820_m≠
[
i
].
size
, boŸ_∑øms->e820_m≠[i].
ty≥
);

293 
	`lock_˝rötf
("DomainUÉ820 mapÉnd\n");

296 
	}
}

298 
	$¸óã_xí_domaö
(
boŸ_∑øms
 *
∑øms
, 
moduÀ_t
 *
mdl
, 
did
)

300 
size_t
 
size
;

301 
moduÀ_t
 *
xí
, *
kî√l
, *
öôrd
;

302 
lhódî
 *
lh
;

303 *
kîn_p
;

304 
uöt32_t
 
£tup_size
, 
i
, 
j
, *
mu…iboŸ_magic
;

305 *
cmdlöe
;

306 
moduÀ_t
 *
mb_mdl
;

307 
uöt64_t
 
cmdaddr
, 
ba£_addr
, 
addr_°¨t
, 
addr_Àn
;

308 
mu…iboŸ_hódî
 *
m_hódî
 = 
NULL
;

309 
mu…iboŸ_öfo
 *
dom_mbf_öfo
;

310 
mem‹y_m≠_t
 *
e820_mem_m≠
;

312 
uöt64_t
 *
xí_code_ã°
;

314 
domaö_t
 *
domaö
 = &
domaös
[
did
];

316 
xí
 = 
mdl
;

317 
kî√l
 = &
mdl
[1];

318 
öôrd
 = &
mdl
[2];

324 
cmdlöe
 = (*)((
uöt64_t
)
xí
->
°rög
);

327 
mu…iboŸ_magic
 = (
uöt32_t
 *)(
uöt64_t
)
xí
->
mode_°¨t
;

328 
i
=0; i<8192/4;i++,
mu…iboŸ_magic
++){

329 if(*
mu…iboŸ_magic
 =
MULTIBOOT_HEADER_MAGIC
){

330 
m_hódî
 = (
mu…iboŸ_hódî
 *Ë
mu…iboŸ_magic
;

334 if(
m_hódî
 =
NULL
){

335 
	`lock_˝rötf
("Cannot find Xen multiboot header\n");

338 
domaö
->
code32_°¨t
 = (
uöt64_t
)
m_hódî
 - 8;

340 
	`lock_˝rötf
("Find Xen multiboot header\n");

341 
	`lock_˝rötf
("magic: %x, fœgs: %x, checksum: %x\n", 
m_hódî
->
magic
, m_hódî->
Êags
, m_hódî->
checksum
);

342 
	`lock_˝rötf
("header_addr: %x,Üoad_addr: %x,Üoad_end_addr: %x\n",

343 
m_hódî
->
hódî_addr
, m_hódî->
lﬂd_addr
, m_hódî->
lﬂd_íd_addr
);

344 
	`lock_˝rötf
("bss_end_addr: %x,Éntry_addr: %x, mode_type: %x\n",

345 
m_hódî
->
bss_íd_addr
, m_hódî->
íåy_addr
, m_hódî->
mode_ty≥
);

346 
	`lock_˝rötf
("width: %x, height: %x, depth: %x\n",

347 
m_hódî
->
width
, m_hódî->
height
, m_hódî->
dïth
);

348 
	`gëch¨
();

360 
size
 = 
xí
->
mode_íd
 - 
domaö
->
code32_°¨t
;

361 
ba£_addr
 = 
VMM_RESERVED
;

362 
	`memmove
((*)
ba£_addr
, (*)(
uöt64_t
)
domaö
->
code32_°¨t
, 
size
);

363 
domaö
->
code32_°¨t
 = 0x100000;

365 
dom_mbf_öfo
 = (
mu…iboŸ_öfo
 *Ë((
VMM_RESERVED
 + 
size
 + 0x1000) & ~0xfffUL);

366 
domaö
->
mb_öfo_addr
 = (
uöt64_t
Ë
dom_mbf_öfo
 - 
VMM_RESERVED
 + 0x100000;

370 
dom_mbf_öfo
->
Êags
 = (1<<0) | (1<<2) | (1<<3) | (1<<6) | (1<<9);

371 
dom_mbf_öfo
->
cmdlöe
 = (
uöt64_t
)(dom_mbf_info + 1);

372 
dom_mbf_öfo
->
mem_lowî
 = 0x280;

373 
dom_mbf_öfo
->
mem_uµî
 = 0x2eede4;

374 
	`mem˝y
((*)(
uöt64_t
)
dom_mbf_öfo
->
cmdlöe
, (*)cmdline, 256);

375 
	`mem˝y
((*)(
uöt64_t
)
dom_mbf_öfo
->
cmdlöe
+240, "OSV\0", 4);

376 
dom_mbf_öfo
->
mm≠_addr
 = dom_mbf_öfo->
cmdlöe
 + 256;

377 
e820_mem_m≠
 =(
mem‹y_m≠_t
 *)(
uöt64_t
)
dom_mbf_öfo
->
mm≠_addr
;

378 
dom_mbf_öfo
->
cmdlöe
 -
VMM_RESERVED
 - 0x100000;

379 
dom_mbf_öfo
->
boŸ_lﬂdî_«me
 = dom_mbf_öfo->
cmdlöe
 + 240;

381 
i
=0,
j
=0; i<
∑øms
->
e820_íåõs
; i++){

382 if(
∑øms
->
e820_m≠
[
i
].
addr
 >

383 
node
[0].
ba£_addr
 +Çode[0].
Àngth
){

386 if(
∑øms
->
e820_m≠
[
i
].
addr
 == 0x100000){

387 
e820_mem_m≠
[
j
].
ba£_addr_low
 = 0x100000;

388 
e820_mem_m≠
[
j
].
ba£_addr_high
 = 0x0;

389 
e820_mem_m≠
[
j
].
Àngth_low
 = 0x40000000 - 
VMM_RESERVED
;

390 
e820_mem_m≠
[
j
].
Àngth_high
 = 0x0;

391 
e820_mem_m≠
[
j
].
ty≥
 = 1;

392 
e820_mem_m≠
[
j
].
size
 = 20;

393 
	`öô_≈t_ønge
(0x100000, 0x40000000 - 
VMM_RESERVED
,

394 
did
, 
VMM_RESERVED
 - 0x100000);

395 
j
++;

396 
e820_mem_m≠
[
j
].
ba£_addr_low
 = 0x40000000 - 
VMM_RESERVED
 + 0x100000;

397 
e820_mem_m≠
[
j
].
ba£_addr_high
 = 0x0;

398 
e820_mem_m≠
[
j
].
Àngth_low
 = 
VMM_RESERVED
 - 0x100000;

399 
e820_mem_m≠
[
j
].
Àngth_high
 = 0x0;

400 
e820_mem_m≠
[
j
].
ty≥
 = 2;

401 
e820_mem_m≠
[
j
].
size
 = 20;

402 
j
++;

404 
e820_mem_m≠
[
j
].
ba£_addr_low
 = 0x40000000;

405 
e820_mem_m≠
[
j
].
ba£_addr_high
 = 0x0;

406 
e820_mem_m≠
[
j
].
Àngth_low
 = 
∑øms
->
e820_m≠
[
i
].
size
 + 0x100000 - 0x40000000;

407 
e820_mem_m≠
[
j
].
Àngth_high
 = 0x0;

408 
e820_mem_m≠
[
j
].
ty≥
 = 1;

409 
e820_mem_m≠
[
j
].
size
 = 20;

410 
	`lock_˝rötf
("°¨t:%lx,Énd:%lx\n", 
e820_mem_m≠
[
j
].
ba£_addr_low
 +

411 ((
uöt64_t
)
e820_mem_m≠
[
j
].
ba£_addr_high
 << 32),

412 
e820_mem_m≠
[
j
].
ba£_addr_low
 +

413 ((
uöt64_t
)
e820_mem_m≠
[
j
].
ba£_addr_high
 << 32) +

414 
e820_mem_m≠
[
j
].
Àngth_low
 +

415 ((
uöt64_t
)
e820_mem_m≠
[
j
].
Àngth_high
 << 32));

416 
	`öô_≈t_ønge
(0x40000000, 
e820_mem_m≠
[
j
].
Àngth_low
 ,

417 
did
, 0);

418 
j
++;

422 
e820_mem_m≠
[
j
].
ba£_addr_low
 = 
∑øms
->
e820_m≠
[
i
].
addr
 & 0xffffffff;

423 
e820_mem_m≠
[
j
].
ba£_addr_high
 = 
∑øms
->
e820_m≠
[
i
].
addr
 >> 32;

424 
e820_mem_m≠
[
j
].
Àngth_low
 = 
∑øms
->
e820_m≠
[
i
].
size
 & 0xffffffff;

425 
e820_mem_m≠
[
j
].
Àngth_high
 = 
∑øms
->
e820_m≠
[
i
].
size
 >> 32;

426 
e820_mem_m≠
[
j
].
ty≥
 = 
∑øms
->
e820_m≠
[
i
].type;

427 
e820_mem_m≠
[
j
].
size
 = 20;

429 
addr_°¨t
 = 
∑øms
->
e820_m≠
[
i
].
addr
;

430 
addr_Àn
 = 
∑øms
->
e820_m≠
[
i
].
size
;

432 if(
addr_°¨t
 + 
addr_Àn
 >=

433 
node
[0].
ba£_addr
 +Çode[0].
Àngth
){

434 
e820_mem_m≠
[
j
].
Àngth_low
 = (
node
[0].
ba£_addr
+node[0].
Àngth
 -

435 
addr_°¨t
 - 
NPT_TAB_RESERVE_MEM
) & 0xffffffff;

436 
e820_mem_m≠
[
j
].
Àngth_high
 = (
node
[0].
ba£_addr
+node[0].
Àngth
 -

437 
addr_°¨t
 - 
NPT_TAB_RESERVE_MEM
) >> 32;

438 
	`öô_≈t_ønge
(
addr_°¨t
, 
node
[0].
ba£_addr
+node[0].
Àngth
 -áddr_°¨à- 
NPT_TAB_RESERVE_MEM
, 
did
, 0);

439 
	`lock_˝rötf
("°¨t:%lx,Énd:%lx\n", 
e820_mem_m≠
[
j
].
ba£_addr_low
 +

440 ((
uöt64_t
)
e820_mem_m≠
[
j
].
ba£_addr_high
 << 32),

441 
e820_mem_m≠
[
j
].
ba£_addr_low
 +

442 ((
uöt64_t
)
e820_mem_m≠
[
j
].
ba£_addr_high
 << 32) +

443 
e820_mem_m≠
[
j
].
Àngth_low
 +

444 ((
uöt64_t
)
e820_mem_m≠
[
j
].
Àngth_high
 << 32));

445 
i
++;

446 
j
++;

449 
	`lock_˝rötf
("°¨t:%lx,Énd:%lx\n", 
e820_mem_m≠
[
j
].
ba£_addr_low
 +

450 ((
uöt64_t
)
e820_mem_m≠
[
j
].
ba£_addr_high
 << 32),

451 
e820_mem_m≠
[
j
].
ba£_addr_low
 +

452 ((
uöt64_t
)
e820_mem_m≠
[
j
].
ba£_addr_high
 << 32) +

453 
e820_mem_m≠
[
j
].
Àngth_low
 +

454 ((
uöt64_t
)
e820_mem_m≠
[
j
].
Àngth_high
 << 32));

456 if(
∑øms
->
e820_m≠
[
i
].
ty≥
 == 1){

457 
	`öô_≈t_ønge
(
addr_°¨t
, 
addr_Àn
, 
did
, 0);

459 
j
++;

461 
	`lock_˝rötf
("node[0] sèπ:%lx,Üígth:%lx\n", 
node
[0].
ba£_addr
,Çode[0].
Àngth
);

463 
dom_mbf_öfo
->
mm≠_Àngth
 = 
j
*(
mem‹y_m≠_t
);

464 
dom_mbf_öfo
->
mods_addr
 = dom_mbf_öfo->
mm≠_Àngth
 + dom_mbf_öfo->
mm≠_addr
;

465 
dom_mbf_öfo
->
mods_cou¡
 = 2;

466 
mb_mdl
 = (
moduÀ_t
 *)(
uöt64_t
)
dom_mbf_öfo
->
mods_addr
;

467 
dom_mbf_öfo
->
mm≠_addr
 -
VMM_RESERVED
 - 0x100000;

470 
ba£_addr
 = (
dom_mbf_öfo
->
mods_addr
 + 2*(
moduÀ_t
) + 0x1000) & ~0xfffUL;

471 
dom_mbf_öfo
->
mods_addr
 -
VMM_RESERVED
 - 0x100000;

472 
size
 = 
kî√l
->
mode_íd
 - kî√l->
mode_°¨t
;

473 
	`memmove
((*)
ba£_addr
, (*)((
uöt64_t
)
kî√l
->
mode_°¨t
), 
size
);

474 
mb_mdl
[0].
mode_°¨t
 = 
ba£_addr
 - 
VMM_RESERVED
 + 0x100000;

475 if(
kî√l
->
°rög
){

476 
mb_mdl
[0].
°rög
 = 
ba£_addr
 + 
size
;

477 
	`mem˝y
((*)(
uöt64_t
)
mb_mdl
[0].
°rög
, (*)(uöt64_t)
kî√l
->string, 256);

478 
mb_mdl
[0].
°rög
 -
VMM_RESERVED
 - 0x100000;

480 
mb_mdl
[0].
°rög
 = 0;

482 
mb_mdl
[0].
mode_íd
 = mb_mdl[0].
mode_°¨t
 + 
size
;

484 
ba£_addr
 +
size
 + 256;

485 
ba£_addr
 = (base_addr + 0x1000) & ~0xfffUL;

486 
size
 = 
öôrd
->
mode_íd
 - inôrd->
mode_°¨t
;

487 
	`memmove
((*)
ba£_addr
, (*)((
uöt64_t
)
öôrd
->
mode_°¨t
), 
size
);

488 
mb_mdl
[1].
mode_°¨t
 = 
ba£_addr
 - 
VMM_RESERVED
 + 0x100000;

489 if(
öôrd
->
°rög
){

490 
mb_mdl
[1].
°rög
 = 
ba£_addr
 + 
size
;

491 
	`mem˝y
((*)(
uöt64_t
)
mb_mdl
[1].
°rög
, (*)(uöt64_t)
öôrd
->string, 256);

492 
mb_mdl
[1].
°rög
 -
VMM_RESERVED
 - 0x100000;

494 
mb_mdl
[1].
°rög
 = 0;

496 
mb_mdl
[1].
mode_íd
 = mb_mdl[1].
mode_°¨t
 + 
size
;

501 
	}
}

503 
	$¸óã_löux_domaö
(
boŸ_∑øms
 *
∑øms
, 
moduÀ_t
 *
mdl
, 
did
)

505 
size_t
 
size_k
, 
size_i
;

506 
moduÀ_t
 *
kî√l
, *
öôrd
;

507 
lhódî
 *
lh
;

508 *
kîn_p
;

509 
uöt32_t
 
£tup_size
;

510 *
cmdlöe
;

511 
uöt64_t
 
cmdaddr
;

512 
boŸ_∑øms
 * boot_params;

513 
i
, 
j
;

515 
domaö_t
 *
domaö
 = &
domaös
[
did
];

516 
domaö
->
k_addr
 = 
VMM_RESERVED
 + 0xa000000 * 2;

517 
domaö
->
i_addr
 = 
VMM_RESERVED
 + 0xa000000 * 3;

518 
domaö
->
boŸ_∑øms
 = (boot_params *)0xa000000;

519 
kî√l
 = 
mdl
;

520 
öôrd
 = &
mdl
[1];

522 
cmdlöe
 = (*)((
uöt64_t
)
kî√l
->
°rög
);

524 
cmdaddr
 = (
uöt64_t
)(
domaö
->
boŸ_∑øms
 + 1);

526 
	`mem˝y
((*)
cmdaddr
, 
cmdlöe
, 256);

529 
size_k
 = 
kî√l
->
mode_íd
 - kî√l->
mode_°¨t
;

530 
size_i
 = 
öôrd
->
mode_íd
 - inôrd->
mode_°¨t
;

539 
	`memmove
((*)(
uöt64_t
)
domaö
->
k_addr
, (*)((uöt64_t)
kî√l
->
mode_°¨t
),

540 
size_k
);

543 
	`memmove
((*)(
uöt64_t
)
domaö
->
i_addr
, (*)((uöt64_t)
öôrd
->
mode_°¨t
),

544 
size_i
);

546 
	`mem˝y
(
domaö
->
boŸ_∑øms
, 
∑øms
, (boot_params));

549 
kîn_p
 = (*)(
uöt64_t
)
domaö
->
k_addr
;

550 
lh
 = 
	`gë_lhódî
((*)(
uöt64_t
)
domaö
->
k_addr
);

551 if(
lh
)

553 
	`lock_˝rötf
("Linux sig found :");

554 
uöt32_t
 
i
 = 0; i < 4; i ++)

555 
	`lock_˝rötf
("%c", 
lh
->
löux_sig
[
i
]);

556 
	`lock_˝rötf
("\n");

558 
lh
->
lﬂdÊags
 |= 0x80;

559 
lh
->
lﬂdÊags
 |= 0x10;

560 
lh
->
hóp_íd_±r
 = 0x9800 - 0x200;

561 
lh
->
ty≥_of_lﬂdî
 = 0x71;

562 
£tup_size
 = (
lh
->
£tup_£˘‹s
 + 1) * 512;

563 
kîn_p
 +
£tup_size
;

565 
domaö
->
code32_°¨t
 = 0xa000000 + 
VMM_RESERVED
;

566 
lh
->
code32_°¨t
 = 
domaö
->code32_start;;

567 
	`mem˝y
(&(
domaö
->
boŸ_∑øms
->
hdr
), &
lh
->
£tup_£˘‹s
,

568 (
domaö
->
boŸ_∑øms
->
hdr
));

569 
	`memmove
((*)(
uöt64_t
)
domaö
->
code32_°¨t
, (*)
kîn_p
, 
size_k
 - 
£tup_size
);

571 
domaö
->
boŸ_∑øms
->
hdr
.
cmd_löe_±r
 = 
cmdaddr
;

572 
domaö
->
boŸ_∑øms
->
hdr
.
ømdisk_image
 = domaö->
i_addr
;

573 
domaö
->
boŸ_∑øms
->
hdr
.
ømdisk_size
 = 
size_i
;

574 
domaö
->
boŸ_∑øms
->
hdr
.
code32_°¨t
 = domain->code32_start;

575 
domaö
->
boŸ_∑øms
->
s¸ìn_öfo
.
‹ig_video_ega_bx
 = 0x10;

579 
boŸ_∑øms
 = 
domaö
->boot_params;

580 
i
=0, 
j
=0; i<
∑øms
->
e820_íåõs
; i++){

581 if(
∑øms
->
e820_m≠
[
i
].
addr
 >

582 
node
[
did
].
ba£_addr
 +Çode[did].
Àngth
){

585 if(
∑øms
->
e820_m≠
[
i
].
addr
 == 0x100000){

586 
boŸ_∑øms
->
e820_m≠
[
j
].
addr
 = 0x100000;

587 
boŸ_∑øms
->
e820_m≠
[
j
].
size
 = 
VMM_RESERVED
 - 
∑øms
->e820_m≠[
i
].
addr
;

588 
boŸ_∑øms
->
e820_m≠
[
j
].
ty≥
 = 2;

589 
j
++;

590 
boŸ_∑øms
->
e820_m≠
[
j
].
addr
 = 
VMM_RESERVED
;

591 
boŸ_∑øms
->
e820_m≠
[
j
].
size
 = 
∑øms
->e820_m≠[
i
].size - boot_params->e820_map[j-1].size;

592 
boŸ_∑øms
->
e820_m≠
[
j
].
ty≥
 = 1;

593 
	`öô_≈t_ønge
(
boŸ_∑øms
->
e820_m≠
[
j
].
addr
, boŸ_∑øms->e820_m≠[j].
size
,

594 
did
, 0);

598 
j
++;

601 
boŸ_∑øms
->
e820_m≠
[
j
].
addr
 = 
∑øms
->e820_m≠[
i
].addr;

602 
boŸ_∑øms
->
e820_m≠
[
j
].
size
 = 
∑øms
->e820_m≠[
i
].size;

603 
boŸ_∑øms
->
e820_m≠
[
j
].
ty≥
 = 
∑øms
->e820_m≠[
i
].type;

605 if(
boŸ_∑øms
->
e820_m≠
[
j
].
addr
 + boŸ_∑øms->e820_m≠[j].
size
 >=

606 
node
[0].
ba£_addr
 +Çode[0].
Àngth
){

607 
boŸ_∑øms
->
e820_m≠
[
j
].
size
 = 
node
[0].
ba£_addr
+node[0].
Àngth
 -

608 
boŸ_∑øms
->
e820_m≠
[
j
].
addr
 - 
NPT_TAB_RESERVE_MEM
 - 
SNULL_RESERVE_MEM
;

609 
	`öô_≈t_ønge
(
boŸ_∑øms
->
e820_m≠
[
j
].
addr
, boŸ_∑øms->e820_m≠[j].
size
 + 
SNULL_RESERVE_MEM
,

610 
did
, 0);

614 
i
++;

615 
j
++;

618 if(
boŸ_∑øms
->
e820_m≠
[
j
].
ty≥
 == 1){

621 
	`öô_≈t_ønge
(
boŸ_∑øms
->
e820_m≠
[
j
].
addr
, boŸ_∑øms->e820_m≠[j].
size
,

622 
did
, 0);

624 
j
++;

626 
boŸ_∑øms
->
e820_íåõs
 = 
j
;

628 
i
=0;i<
boŸ_∑øms
->
e820_íåõs
; i++){

629 
	`lock_˝rötf
("Mem‹y sèπ:%lx, size:%lx,Åy≥:%d\n", 
boŸ_∑øms
->
e820_m≠
[
i
].
addr
,

630 
boŸ_∑øms
->
e820_m≠
[
i
].
size
, boŸ_∑øms->e820_m≠[i].
ty≥
);

634 
	}
}

636 
	$¸óã_domaö
(
boŸ_∑øms
 *
∑øms
, 
moduÀ_t
 *
mdl
, 
did
)

638 
lhódî
 *
lh
;

640 
lh
 = 
	`gë_lhódî
((*)(
uöt64_t
)
mdl
->
mode_°¨t
);

641 if(
lh
)

648 
	`¸óã_löux_domaö
(
∑øms
, 
mdl
, 
did
);

649 
domaös
[
did
].
dom_ty≥
 = 1;

652 
	`¸óã_xí_domaö
(
∑øms
, 
mdl
, 
did
);

653 
domaös
[
did
].
dom_ty≥
 = 2;

656 
	}
}

659 
	$öô_maödomaö
(
boŸ_∑øms
 *
∑øm
, 
uöt64_t
 
kaddr
)

661 
domaö_t
 *
domaö
 = &
domaös
[0];

662 
domaö
->
boŸ_∑øms
 = 
∑øm
;

663 
domaö
->
code32_°¨t
 = 
kaddr
;

665 
	}
}

668 
	$°¨t_vm
(
gíîl_ªgs
 *
ªgs
)

670 
id
 = 
ªgs
->
rdi
;

671 
≈t_öô
;

672 
≈t_öô
 = 0;

674 
	`lock_˝rötf
("Sèπ Domaö %ld\n", 
ªgs
->
rdi
);

676 
	`¸óã_m±
(
gÂå
);

677 
	`m±_domaö_£t
(
id
, (*)
VMPT_ADDR
);

678 
˝us
[
œpicid_to_ödex
[
node
[
id
].
boŸpid
]].
svm
 = 1;

679 
	}
}

	@kern/gosmm.c

1 
	~<öc/ty≥s.h
>

2 
	~<öc/gue°os.h
>

4 
	#PAGE_SHIFT
 12

	)

6 
	#PAGE_SIZE
 (1UL<<
PAGE_SHIFT
)

	)

7 
	#PAGE_OFF
 (
PAGE_SIZE
 - 1)

	)

8 
	#PAGE_MASK
 (~
PAGE_OFF
)

	)

11 
	#PAGE_TABLE_OFFSET
 ((1UL<<10Ë- 1)

	)

12 
	#PAGE_L_SHIFT
(
x
Ë(
PAGE_SHIFT
 + 9*(x-1))

	)

15 
	#PAGE_L_MASK
(
x
Ë(
PAGE_TABLE_OFFSET
<<
	`PAGE_L_SHIFT
(x))

	)

16 
	#PAGE_L_OFF
(
x
, 
vaddr
Ë((
	`PAGE_L_MASK
(x)&vaddr)>>
	`PAGE_L_SHIFT
(x))

	)

19 
pml4e
 
	$vmm_gë_gue°_pml4_phy
(
pgd
Ögd, 
uöt64_t
 
vaddr
)

21  (
pml4e
)(((
uöt64_t
Ë
pgd
[
	`PAGE_L_OFF
(4, 
vaddr
)])&
PAGE_MASK
);

22 
	}
}

24 
pd≥
 
	$vmm_gë_gue°_pd≥_phy
(
pml4e
 
pml4
, 
uöt64_t
 
vaddr
)

26  (
pd≥
)(((
uöt64_t
Ë
pml4
[
	`PAGE_L_OFF
(3, 
vaddr
)])&
PAGE_MASK
);

27 
	}
}

29 
pde
 
	$vmm_gë_gue°_pde_phy
(
pd≥
Öd≥, 
uöt64_t
 
vaddr
)

31  (
pde
)(((
uöt64_t
Ë
pd≥
[
	`PAGE_L_OFF
(2, 
vaddr
)])&
PAGE_MASK
);

32 
	}
}

34 
±e
 
	$vmm_gë_gue°_±e_phy
(
pde
Öde, 
uöt64_t
 
vaddr
)

36  (
±e
)(
pde
[
	`PAGE_L_OFF
(1, 
vaddr
)]&
PAGE_MASK
);

37 
	}
}

39 
uöt64_t
 
	$vmm_gë_gue°_vút_to_phy
(
uöt64_t
 
¸3
, uöt64_à
vaddr
)

41 
pml4e
 
pml4
 = 
	`vmm_gë_gue°_pml4_phy
((
pgd
Ë
¸3
, 
vaddr
);

42 if(!
pml4
)

44 
pd≥
 
pdp
 = 
	`vmm_gë_gue°_pd≥_phy
(
pml4
, 
vaddr
);

45 if(!
pdp
)

47 
pde
 
pd
 = 
	`vmm_gë_gue°_pde_phy
(
pdp
, 
vaddr
);

48 if(!
pd
)

50 
±e
 
±
 = 
	`vmm_gë_gue°_±e_phy
(
pd
, 
vaddr
);

51 if(!
±
)

54  (
uöt64_t
)((
±
&
PAGE_MASK
)|(
vaddr
&
PAGE_OFF
));

55 
	}
}

	@kern/guest_syscall.c

1 
	~<öc/gue°_sysˇŒ.h
>

3 
ölöe
 *
	$gë_gue°_buf
(
˝uid
, 
uöt64_t
 
¸3
)

5 *
ªt
 = 
NULL
;

6  
ªt
;

7 
	}
}

11 
uöt64_t
 
	gåamp_addr
 = 0;

13 
	$ªgi°î_åam∂öe
(
uöt64_t
 
addr
, uöt64_à
¸3
)

16 
åamp_addr
 = 
addr
;

18 
	}
}

20 
ölöe
 
uöt64_t
 
	$gë_åam∂öe_addr
(
uöt64_t
 
¸3
)

22 
uöt64_t
 
ªt
 = 0UL;

23  
åamp_addr
;

24 
	}
}

25 
	#STAT
 0

	)

26 
	#POLLFD
 1

	)

27 
uöt32_t
 
	g°ru˘_size
[100] = {

30 
uöt64_t
 
	ggue°_r•
[32];

41 
	$∑r£_gue°_sysˇŒ
(
vmcb
 *vmcb, 
gíîl_ªgs
 *
ªgs
, 
uöt64_t
 
¥ocid
)

43 
sysˇŒ_num
 = 
vmcb
->
øx
;

44 *
buf
 = 
	`gë_gue°_buf
(
¥ocid
, 
vmcb
->
¸3
);

46 
uöt64_t
 *
p_ßve
 = (uöt64_à*)(
vmcb
->
r•
);

62 
sysˇŒ_num
){

64 *
p_ßve
 = 
ªgs
->
rcx
;

65 
ªgs
->
rcx
 = 
	`gë_shim_addr
(
vmcb
->
¸3
);

66 if(
ªgs
->
rdx
 < 4096){

67 
	`mem˝y
(
buf
, (*)
	`phy_to_machöe
(
ªgs
->
rsi
, 0,

68 
vmcb
, 0, 
__LINE__
), 
ªgs
->
rdx
);

69 
ªgs
->
rsi
 = (
uöt64_t
)
buf
;

74 *
p_ßve
 = 
ªgs
->
rcx
;

75 
	`°r˝y
(
buf
, (*)
	`phy_to_machöe
(
ªgs
->
rdi
, 0,

76 
vmcb
, 0, 
__LINE__
));

77 
ªgs
->
rdi
 = (
uöt64_t
)
buf
;

78 
ªgs
->
rcx
 = 
	`gë_shim_addr
(
vmcb
->
¸3
);

82 *
p_ßve
 = 
ªgs
->
rcx
;

83 
ªgs
->
rcx
 = 
	`gë_shim_addr
(
vmcb
->
¸3
);

84 
	`°r˝y
(
buf
, (*)
	`phy_to_machöe
(
ªgs
->
rdi
, 0,

85 
vmcb
, 0, 
__LINE__
));

86 
ªgs
->
rdi
 = (
uöt64_t
)
buf
;

88 
p_ßve
 ++;

89 *
p_ßve
 = 1;

90 
p_ßve
 ++;

91 *
p_ßve
 = 
ªgs
->
rsi
;

92 
p_ßve
 ++;

93 *
p_ßve
 = 
°ru˘_size
[
STAT
];

96 *
p_ßve
 = 
ªgs
->
rcx
;

97 
ªgs
->
rcx
 = 
	`gë_shim_addr
(
vmcb
->
¸3
);

98 
	`°r˝y
(
buf
, (*)
	`phy_to_machöe
(
ªgs
->
rdi
, 0,

99 
vmcb
, 0, 
__LINE__
));

100 
ªgs
->
rdi
 = (
uöt64_t
)
buf
;

102 
p_ßve
 ++;

103 *
p_ßve
 = 1;

104 
p_ßve
 ++;

105 *
p_ßve
 = 
ªgs
->
rsi
;

106 
p_ßve
 ++;

107 *
p_ßve
 = 
°ru˘_size
[
STAT
];

110 *
p_ßve
 = 
ªgs
->
rcx
;

111 
ªgs
->
rcx
 = 
	`gë_shim_addr
(
vmcb
->
¸3
);

112 
p_ßve
 ++;

113 *
p_ßve
 = 1;

114 
p_ßve
 ++;

115 *
p_ßve
 = 
ªgs
->
rdi
;

116 
p_ßve
 ++;

117 *
p_ßve
 = 
°ru˘_size
[
POLLFD
];

120 *
p_ßve
 = 
ªgs
->
rcx
;

121 
ªgs
->
rcx
 = 
	`gë_shim_addr
(
vmcb
->
¸3
);

122 if(
ªgs
->
rdx
<4096){

123 
	`mem˝y
(
buf
, (*)
	`phy_to_machöe
(
ªgs
->
rsi
, 0,

124 
vmcb
, 0, 
__LINE__
), 
ªgs
->
rdx
);

125 
ªgs
->
rsi
 = (
uöt64_t
)
buf
;

359 *
p_ßve
 = 
ªgs
->
rcx
;

360 
ªgs
->
rcx
 = 
	`gë_shim_addr
(
vmcb
->
¸3
);

361 
p_ßve
 ++;

362 *
p_ßve
 = 
ªgs
->
rsi
;

363 
p_ßve
 ++;

364 *
p_ßve
 = 
ªgs
->
rdx
;

367 *
p_ßve
 = 
ªgs
->
rcx
;

368 
ªgs
->
rcx
 = 
	`gë_shim_addr
(
vmcb
->
¸3
);

369 
p_ßve
 ++;

370 *
p_ßve
 = 
ªgs
->
rsi
;

371 
p_ßve
 ++;

372 *
p_ßve
 = 
°ru˘_size
[
STAT
];

811 
	`lock_˝rötf
("Unknow¿sysˇŒÇumbî:%d\n", 
sysˇŒ_num
);

813 
	}
}

816 
gue°_brk_›s
 
	gbrk_ªc‹d
[32];

817 
gue°_unm≠_›s
 
	gunm≠_ªc‹d
[32];

818 
unmask_u§_mem_ønge
(
vmcb
* vmcb, 
uöt64_t
 
addr_°¨t
, uöt64_à
addr_íd
);

819 
¥o˚ss_exô_h™dÀ
(
vmcb
 *vmcb);

820 
uöt64_t
 
sys_ªt_addr
;

821 
ã°_Êag
;

822 
uöt64_t
 
kî√l_≈t
, 
u£r_≈t
;

823 
uöt64_t
 
≈t_åavñ
(uöt64_à
addr
, uöt64_à
¸3
 );

827 
	$∑r£_gue°_sysˇŒ
(
vmcb
 *vmcb, 
gíîl_ªgs
 *
ªgs
, 
Êag
)

829 
sysˇŒ_num
 = 
vmcb
->
øx
;

830 
uöt32_t
 
¥ocid
;

831 
uöt64_t
 
t_addr
 = 
	`gë_åam∂öe_addr
(
vmcb
->
¸3
);

832 
uöt64_t
 *
p_ßve
;

834 if(
Êag
 == 1){

835 
uöt64_t
 *
ªt_addr
;

837 
ªt_addr
 = (
uöt64_t
 *)
	`phy_to_machöe
(
vmcb
->
r•
 + 8, 0, vmcb, 0, 
__LINE__
);

838 if(*
ªt_addr
<=
t_addr
+0x15 && *ret_addr>=t_addr){

839 
	`lock_˝rötf
("1 i¡îru± i¿åam∂öe,Ñù:%lx\n", 
vmcb
->
rù
);

843 
sys_ªt_addr
 = *
ªt_addr
;

847 *
ªt_addr
 = 
t_addr
;

848 if((
vmcb
->
r•
&0xfff)>0x1000-40){

849 
ªt_addr
 = (
uöt64_t
 *)
	`phy_to_machöe
(
vmcb
->
r•
 + 4*8, 0, vmcb, 0, 
__LINE__
);

851 
ªt_addr
 += 3;

852 if((
uöt64_t
)
ªt_addr
 < 0x1000){

853 
	`lock_˝rötf
("phy_to_machineÑeturn NULL\n");

857 
ã°_Êag
 ++;

859 }if(
Êag
 == 2){

860 
uöt64_t
 *
ªt_addr
;

862 
ªt_addr
 = (
uöt64_t
 *)
	`phy_to_machöe
(
vmcb
->
r•
, 0, vmcb, 0, 
__LINE__
);

863 if(*
ªt_addr
<=
t_addr
+0x15 && *ret_addr>=t_addr){

864 
	`lock_˝rötf
("2Årampline,Ñet_addr:%lx,Éxitinfo2:%lx,Éxitinfo1:%lx\n ",

865 *
ªt_addr
, 
vmcb
->
exôöfo2
, vmcb->
exôöfo1
);

872 
sys_ªt_addr
 = *
ªt_addr
;

873 *
ªt_addr
 = 
t_addr
;

874 if((
vmcb
->
r•
&0xfff)>0x1000-32){

875 
ªt_addr
 = (
uöt64_t
 *)
	`phy_to_machöe
(
vmcb
->
r•
 + 3*8, 0, vmcb, 0, 
__LINE__
);

877 
ªt_addr
 += 3;

880 
ã°_Êag
 ++;

882 }if(
Êag
 == 3){

883 
uöt64_t
 *
ªt_addr
;

884 if((
vmcb
->
¸2
 & 0xffffffffff600000UL) == 0xffffffffff600000UL){

886 
ªt_addr
 = (
uöt64_t
 *)
	`phy_to_machöe
(
vmcb
->
r•
 + 4*8, 0, vmcb, 0, 
__LINE__
);

887 
ªt_addr
 = (
uöt64_t
 *)
	`phy_to_machöe
(*ªt_addr, 0, 
vmcb
, 0, 
__LINE__
);

888 
sys_ªt_addr
 = *
ªt_addr
;

889 *
ªt_addr
 = 
t_addr
;

890 
	`lock_˝rötf
("VsysˇŒ Rëu∫áddªss:%lx\n", 
sys_ªt_addr
);

891 
ã°_Êag
 ++;

895 
ªt_addr
 = (
uöt64_t
 *)
	`phy_to_machöe
(
vmcb
->
r•
 + 8, 0, vmcb, 0, 
__LINE__
);

896 if(*
ªt_addr
<=
t_addr
+0x15 && *ret_addr>=t_addr){

897 
	`lock_˝rötf
("1 i¡îru± i¿åam∂öe,Ñù:%lx\n", 
vmcb
->
rù
);

901 
sys_ªt_addr
 = *
ªt_addr
;

902 *
ªt_addr
 = 
t_addr
;

903 if((
vmcb
->
r•
&0xfff)>0x1000-40){

904 
ªt_addr
 = (
uöt64_t
 *)
	`phy_to_machöe
(
vmcb
->
r•
 + 4*8, 0, vmcb, 0, 
__LINE__
);

906 
ªt_addr
 += 3;

907 if((
uöt64_t
)
ªt_addr
 < 0x1000){

908 
	`lock_˝rötf
("phy_to_machineÑeturn NULL\n");

911 
ã°_Êag
 ++;

916 
sys_ªt_addr
 = 
ªgs
->
rcx
;

917 
ªgs
->
rcx
 = 
t_addr
;

918 
ã°_Êag
 ++;

920 
sysˇŒ_num
){

922 
	`unmask_u§_mem_ønge
(
vmcb
, 
ªgs
->
rdi
,Ñegs->rdò+Ñegs->
rsi
);

927 if(
brk_ªc‹d
[0].
addr
 > 
ªgs
->
rdi
){

928 
	`unmask_u§_mem_ønge
(
vmcb
, 
ªgs
->
rdi
, 
brk_ªc‹d
[0].
addr
);

933 
brk_ªc‹d
[0].
addr
 = 
ªgs
->
rdi
;

939 
	`lock_˝rötf
("NewÖro˚ss, sysˇŒÇumbî:%d\n", 
sysˇŒ_num
);

942 
	`lock_˝rötf
("This isÉxit system call~~~~~\n");

943 
	`¥o˚ss_exô_h™dÀ
(
vmcb
);

946 
	`lock_˝rötf
("This isÅime syscall\n");

950 
	`¥o˚ss_exô_h™dÀ
(
vmcb
);

953 
	}
}

	@kern/init.c

2 
	~<öc/boŸ1.h
>

3 
	~<öc/°rög.h
>

4 
	~<öc/as£π.h
>

5 
	~<öc/mm≠.h
>

6 
	~<öc/vm±.h
>

7 
	~<öc/úq.h
>

8 
	~<öc/≠ic.h
>

9 
	~<öc/˝u.h
>

10 
	~<kîn/m⁄ô‹.h
>

11 
	~<kîn/c⁄sﬁe.h
>

12 
	~<öc/svm.h
>

13 
	~<öc/domaö.h
>

14 
	~<öc/≥r˝u.h
>

15 
	~<öc/iommu.h
>

19 
sysx_öfo
 
	gsys_io
;

20 
mu…iboŸ_hódî
 *
	gmbh
;

21 
mu…iboŸ_öfo
 *
	gmböf
;

22 
mem‹y_m≠_t
 *
	gmem_m≠
;

23 
moduÀ_t
 *
	gmdul
;

24 
boŸ_∑øms
 *
	gboŸ_∑øms
, 
	g°_∑øms
;

25 
uöt64_t
 
	gd1_size
;

27 
	gmadt_∑ge
[4096*2] 
__©åibuã__
((
Æig√d
 (4096), 
£˘i⁄
 (".data")));

28 *
	gmadt_°¨t
, *
	gmadt_íd
;

30 vﬁ©ûê
uöt32_t
 
	g≠_svm
 = 0;

32 
	$ª£rve_moduÀs
(
uöt32_t
 
mem_uµî
, 
mod_cou¡
)

34 
uöt32_t
 
size
 = 0;

35 
uöt64_t
 
ba£_addr
 = 0;

36 
i
 = 0;

38 
mem_uµî
 += 1024*1024;

39 
ba£_addr
 = 
mem_uµî
;

41 ; 
i
<
mod_cou¡
; i++){

42 
ba£_addr
 = (base_addr - 0x1000) & ~0xfff;

43 
size
 = 
mdul
[
i
].
mode_íd
 - mdul[i].
mode_°¨t
;

44 
ba£_addr
 = (ba£_add∏- 
size
) & ~0xfff;

45 
	`mem˝y
((*)
ba£_addr
, (*)(
uöt64_t
)
mdul
[
i
].
mode_°¨t
, 
size
);

46 
mdul
[
i
].
mode_°¨t
 = 
ba£_addr
;

47 
mdul
[
i
].
mode_íd
 = 
ba£_addr
 +
size
;

48 if(
mdul
[
i
].
°rög
){

49 
	`°r˝y
((*)
ba£_addr
+
size
, (*)(
uöt64_t
)
mdul
[
i
].
°rög
);

50 
mdul
[
i
].
°rög
 = 
ba£_addr
+
size
;

57 
ba£_addr
 = (base_addr - 0x1000) & ~0xfff;

58 
size
 = 
mdul
[0].
mode_íd
 - mdul[0].
mode_°¨t
;

59 
ba£_addr
 = (ba£_add∏- 
size
) & ~0xfff;

60 
	`mem˝y
((*)
ba£_addr
, (*)(
uöt64_t
)
mdul
[0].
mode_°¨t
, 
size
);

61 
mdul
[0].
mode_°¨t
 = 
ba£_addr
;

62 
mdul
[0].
mode_íd
 = 
ba£_addr
 +
size
;

63 if(
mdul
[0].
°rög
){

64 
	`°r˝y
((*)
ba£_addr
+
size
, (*)(
uöt64_t
)
mdul
[0].
°rög
);

65 
mdul
[0].
°rög
 = 
ba£_addr
+
size
;

68 
ba£_addr
 = (base_addr - 0x1000) & ~0xfff;

69 
size
 = 
mdul
[1].
mode_íd
 - mdul[1].
mode_°¨t
;

70 
ba£_addr
 = (ba£_add∏- 
size
) & ~0xfff;

71 
	`mem˝y
((*)
ba£_addr
, (*)(
uöt64_t
)
mdul
[1].
mode_°¨t
, 
size
);

72 
mdul
[1].
mode_°¨t
 = 
ba£_addr
;

73 
mdul
[1].
mode_íd
 = 
ba£_addr
 +
size
;

74 if(
mdul
[1].
°rög
){

75 
	`°r˝y
((*)
ba£_addr
+
size
, (*)(
uöt64_t
)
mdul
[1].
°rög
);

76 
mdul
[1].
°rög
 = 
ba£_addr
+
size
;

79 
ba£_addr
 = (base_addr - 0x1000) & ~0xfff;

80 
size
 = 
mdul
[2].
mode_íd
 - mdul[2].
mode_°¨t
;

81 
ba£_addr
 = (ba£_add∏- 
size
) & ~0xfff;

82 
	`mem˝y
((*)
ba£_addr
, (*)(
uöt64_t
)
mdul
[2].
mode_°¨t
, 
size
);

83 
mdul
[2].
mode_°¨t
 = 
ba£_addr
;

84 
mdul
[2].
mode_íd
 = 
ba£_addr
 +
size
;

85 if(
mdul
[2].
°rög
){

86 
	`°r˝y
((*)
ba£_addr
+
size
, (*)(
uöt64_t
)
mdul
[2].
°rög
);

87 
mdul
[2].
°rög
 = 
ba£_addr
+
size
;

90 
	}
}

92 
	$mboŸ_∑r£
(
mu…iboŸ_öfo
 *
mf
)

94 
mem_m≠
 = (
mem‹y_m≠_t
 *)((
uöt64_t
Ë
mf
->
mm≠_addr
);

95 
mdul
 = (
moduÀ_t
 *)((
uöt64_t
Ë
mf
->
mods_addr
);

96 
sys_io
.
cmdlöe
 = 
mf
->cmdline;

97 
sys_io
.
e820_√¡s
 = 0;

99 
	`ª£rve_moduÀs
(
mf
->
mem_uµî
 * 1024, mf->
mods_cou¡
);

100 ;(
uöt64_t
Ë
mem_m≠
 < 
mböf
->
mm≠_addr
 + mböf->
mm≠_Àngth
;

101 
mem_m≠
 = (
mem‹y_m≠_t
 *)((
uöt64_t
)mem_m≠ + mem_m≠->
size
 + (mem_map->size)))

103 
sys_io
.
e820_m≠
[sys_io.
e820_√¡s
].
addr
 = (
uöt64_t
)
mem_m≠
->
ba£_addr_low


104 + (((
uöt64_t
Ë
mem_m≠
->
ba£_addr_high
)<<32);

105 
sys_io
.
e820_m≠
[sys_io.
e820_√¡s
].
size
 = (
uöt64_t
)
mem_m≠
->
Àngth_low
 +

106 (((
uöt64_t
Ë
mem_m≠
->
Àngth_high
)<<32);

107 
sys_io
.
e820_m≠
[sys_io.
e820_√¡s
].
ty≥
 = 
mem_m≠
->type;

108 
sys_io
.
e820_√¡s
 ++;

110 
	}
}

112 
	$hkey_dump_IRR
()

114 
uöt32_t
 
queued
 = 0;

115 
i
;

116 
i
=7; i>=0; i--){

117 
queued
 = 
	`ªad_œpic
(0x200+
i
*0x10);

118 if(
queued
){

119 
	`lock_˝rötf
("i:%d, queued is:%x\n", 
i
, 
queued
);

120 
queued
 = 0;

123 
	}
}

125 
	$≠_öô
()

127 vﬁ©ûê
≈t_öô
;

128 *
AP_BOOT_SIG
 = 0xdcba;

129 
	`lﬂd_idt
();

130 
	`íabÀ_œpic
();

132 
vmcb
 *vmcb;

133 
uöt32_t
 
¥ocid
 = 
	`œpicid
();

134 
vmcb
 = &
vmcb_ã°
[
¥ocid
];

135 
	`lock_˝rötf
("the cpuid is %d,Ñip:%lx\n",

136 
¥ocid
, 
vmcb
->
rù
);

139 
˝us
[
	`œpicid
()].
boŸed
 = 1;

140 
	`˝u_öô
();

141 if(
	`ªad_pda
(
˝upid
)>3)

142 
	`hkey_dump_IRR
();

143 !
˝us
[
	`œpicid
()].
svm
)

144 
__asm__
 
	`__vﬁ©ûe__
("pause"::);

146 if(
	`ªad_pda
(
˝upid
Ë=
node
[ªad_pda(
˝udid
)].
boŸpid
){

147 
≈t_öô
 = 0;

148 
	`°¨t_domaö
(
	`ªad_pda
(
˝udid
));

150 
	`°¨t_svm
(
	`ªad_pda
(
˝udid
));

152 
	}
}

154 
ivrs
 *
	givrs
 = 0;

155 
madt
 *
	gmadt
 = 0;

158 
	$hkey_ã°
()

161 vﬁ©ûê
uöt8_t
 *
iﬂpic_addr
[3] = {

162 (vﬁ©ûê
uöt8_t
 *)0xfec00000,

163 (vﬁ©ûê
uöt8_t
 *)0xfec80000,

164 (vﬁ©ûê
uöt8_t
 *)0xfecc0000

166 
i
 = 0, 
j
 = 0, 
ödex
 = 0;

167 
uöt32_t
 
vÆ
, 
vÆ_high
;

168 vﬁ©ûê
uöt32_t
 *
â
;

170 ; 
i
<3; i++){

171 
â
 = (
uöt32_t
 *)(
iﬂpic_addr
[
i
] + 0x10);

172 *
iﬂpic_addr
[
i
] = 0;

173 
vÆ
 = *
â
;

174 
vÆ
 >>= 24;

175 *
iﬂpic_addr
[
i
] = 1;

176 
ödex
 = *
â
;

178 
	`lock_˝rötf
("tt:%p, IOAPIC ID: %d, version:%x,Éntries:%x,ÑedirectionÅable:\n",

179 
â
, 
vÆ
, 
ödex
&0xff, index>>16);

180 
ödex
 >>= 16;

181 
ödex
 &= 0xff;

182 
j
=0; j<
ödex
; j++){

183 *
iﬂpic_addr
[
i
] = 0x10 + 
j
*2;

184 
vÆ
 = *
â
;

185 *
iﬂpic_addr
[
i
] = 0x10 + 
j
*2 + 1;

186 
vÆ_high
 = *
â
;

187 
	`lock_˝rötf
("0x%x %x\n", 
vÆ_high
, 
vÆ
);

192 
	}
}

194 
	$h≥t_dump
(
h≥t
* hpet)

196 
uöt64_t
 
ba£_adr
;

197 
	`lock_˝rötf
("HPET Block id:%x, AddressÅype:%x, bit witdh:%x offset:%x,\
_address:%lx, hpet_num:%x\n",

199 
h≥t
->
block_id
, h≥t->
•a˚_ty≥
, h≥t->
bô_width
, h≥t->
bô_off£t
,

200 
h≥t
->
ba£_addªss
, h≥t->
h≥t_num
);

202 
	}
}

205 
	$i386_öô
(
uöt32_t
 
edi
, uöt32_à
esi
, uöt32_à
rdx
, uöt32_à
ecx
)

207 
ed©a
[], 
íd
[];

208 
uöt32_t
 
óx
, 
ebx
, 
ïx
, 
edx
;

214 
	`mem£t
(
ed©a
, 0, 
íd
 -Édata);

216 
	`c⁄s_öô
();

219 
	`mem˝y
(&
°_∑øms
, (*)((
uöt64_t
Ë
edi
), (
boŸ_∑øms
));

220 
boŸ_∑øms
 = (boŸ_∑øm†*)((
uöt64_t
)
edi
);

221 
boŸ_∑øms
->
s¸ìn_öfo
.
‹ig_video_ega_bx
 = 0x10;

224 if(
rdx
 == 0x2badb002)

226 
	`˝rötf
("multiboot ok\n");

227 
mböf
 = (
mu…iboŸ_öfo
 *)((
uöt64_t
Ë
ecx
);

228 
	`mboŸ_∑r£
(
mböf
);

232 
sysx_öfo
 *
tmp
;

233 
tmp
 = (
sysx_öfo
 *)((
uöt64_t
Ë
rdx
);

234 
	`mem˝y
(&
sys_io
, 
tmp
, (sys_io));

237 
e820íåy
 *
íå
;

238 
íå
 = 
sys_io
.
e820_m≠
;

240 
rsdp
 *rsdp;

241 
rsdp
 = 
	`rsdp_gë
();

243 
§©
 *srat = 0;

244 
§©
 = 
	`§©_gë
((
xsdt
 *Ë
rsdp
->
xsdt_addr
);

246 
h≥t
 *hpet = 0;

247 
h≥t
 = 
	`h≥t_gë
((
xsdt
 *Ë
rsdp
->
xsdt_addr
);

249 
ivrs
 = 
	`ivrs_gë
((
xsdt
 *Ë
rsdp
->
xsdt_addr
);

250 
madt
 = 
	`madt_gë
((
xsdt
 *Ë
rsdp
->
xsdt_addr
);

251 
madt_°¨t
 = (*)((
uöt64_t
)
madt
 & ~0xfffUL);

252 
madt_íd
 = 
	`dump_madt_∑ge
(
madt
, 
madt_∑ge
);

254 
	`lock_˝rötf
("rsdp:%p, xsdt_addr:%lx, srat:%p, ivrs:%p, madt:%p\n",

255 
rsdp
,Ñsdp->
xsdt_addr
, 
§©
, 
ivrs
, 
madt
);

259 if(
rsdp
)

261 
	`˝rötf
("rsdp sig:");

262 
uöt32_t
 
i
 = 0; i < 8; i ++)

264 
	`˝rötf
("%c", 
rsdp
->
sig
[
i
]);

266 
	`˝rötf
("\n");

269 
	`öô_8259A
();

270 
	`£t_öãºu±
();

271 
	`£t_ex˚±i⁄
();

272 
	`lﬂd_idt
();

273 
	`mp_öô
();

287 if(
ivrs
)

289 
	`˝rötf
("ivrs sig:");

290 
uöt32_t
 
i
 = 0; i < 4; i ++)

292 
	`˝rötf
("%c", 
ivrs
->
hódî
.
sig
[
i
]);

294 
	`˝rötf
("\n");

297 
	`˝rötf
("ivrsÇo found \n");

299 
	`¥ï¨e_node_öfo
(
§©
);

312 
	`≥r˝u_öô
();

313 
	`˝u_öô
();

315 
	`smp_boŸ
();

318 
	`¸óã_domu
(&
°_∑øms
, &
mdul
[2], 1);

321 
	`¸óã_domaö
(&
°_∑øms
, &
mdul
[0], 0);

323 
	`¸óã_m±
(
gÂå
);

324 
	`m±_domaö_£t
(0, (*)
VMPT_ADDR
);

327 
	`°¨t_domaö
(0);

329 
	`m⁄ô‹
(
NULL
);

331 
	}
}

338 c⁄° *
	g∑nic°r
;

345 
	$_∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
,...)

347 
va_li°
 
≠
;

349 i‡(
∑nic°r
)

350 
dód
;

351 
∑nic°r
 = 
fmt
;

353 
	`va_°¨t
(
≠
, 
fmt
);

354 
	`˝rötf
("kî√»∑ni¯© %s:%d: ", 
fûe
, 
löe
);

355 
	`v˝rötf
(
fmt
, 
≠
);

356 
	`˝rötf
("\n");

357 
	`va_íd
(
≠
);

359 
dód
:

362 
	`m⁄ô‹
(
NULL
);

363 
	}
}

367 
	$_w¨n
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
,...)

369 
va_li°
 
≠
;

371 
	`va_°¨t
(
≠
, 
fmt
);

372 
	`˝rötf
("kî√»w¨nögáà%s:%d: ", 
fûe
, 
löe
);

373 
	`v˝rötf
(
fmt
, 
≠
);

374 
	`˝rötf
("\n");

375 
	`va_íd
(
≠
);

376 
	}
}

	@kern/iommu.c

1 
	~<öc/iommu.h
>

2 
	~<öc/pci.h
>

4 
dev_èbÀ
 
	gdevi˚_èbÀ
[
MAX_DEV_ID
] 
__©åibuã__
((
Æig√d
 (4096), 
£˘i⁄
(".data")));

5 
uöt32_t
 
	göå_ªm≠_èb
[1<<11] 
__©åibuã__
((
Æig√d
(4096), 
£˘i⁄
(".data")));

7 
	gcmdbuf
[
MAX_IOMMU
][
IOMMU_BUF_SIZE
] 
__©åibuã__
((
Æig√d
(4096), 
£˘i⁄
(".data")));

8 
	gevítbuf
[
MAX_IOMMU
][
IOMMU_BUF_SIZE
] 
__©åibuã__
((
Æig√d
(4096), 
£˘i⁄
(".data")));

9 vﬁ©ûê
uöt32_t
 *
	gmmio_ba£
[
MAX_IOMMU
];

11 
	sdevi˚_íåy_4_byã
{

12 
uöt8_t
 
	mty≥
;

13 
uöt16_t
 
	mdevi˚id
;

14 
uöt8_t
 
	md©a
;

15 }
__©åibuã__
((
__∑cked__
));

17 
	sdevi˚_íåy_8_byã
{

18 
uöt8_t
 
	mty≥
;

19 
uöt16_t
 
	mdevi˚_id_a
;

20 
uöt8_t
 
	md©a
;

22 
uöt32_t
 
	mexãnded_d©a
;

24 
uöt8_t
 
	mh™dÀ
;

25 
uöt16_t
 
	mdevi˚_id_b
;

26 
uöt8_t
 
	mv¨õty
;

27 }
__©åibuã__
((
__∑cked__
)Ë
	mid
;

28 }
	muµî_byãs
;

29 }
__©åibuã__
((
__∑cked__
));

31 
	$íqueue_iommu_cmd
(
cmd
, 
uöt16_t
 
dev_id
, 
iommu_id
)

33 
iommu_comm™d
 *
iommu_com_¥
;

34 vﬁ©ûê
uöt32_t
 
èû
, 
hód
;

36 
hód
 = *(
mmio_ba£
[
iommu_id
] + 0x800) >> 4;

37 
èû
 = *(
mmio_ba£
[
iommu_id
] + 0x802) >> 4;

38 (
èû
+1)%512 =
hód
){

39 
hód
 = *(
mmio_ba£
[
iommu_id
] + 0x800) >> 4;

42 
iommu_com_¥
 = (
iommu_comm™d
 *)

43 (
cmdbuf
 + 
èû
*16);

44 
cmd
){

46 
iommu_com_¥
->
fú°_›_low
 = 0;

47 
iommu_com_¥
->
fú°_›_high
 = 1UL<<28;

50 
iommu_com_¥
->
fú°_›_low
 = 
dev_id
;

51 
iommu_com_¥
->
fú°_›_high
 = 2UL<<28;

54 
iommu_com_¥
->
fú°_›_high
 = 3UL<<28 | 
dev_id
;

55 
iommu_com_¥
->
£c⁄d_›_low
 = ~0xfff | 3;

56 
iommu_com_¥
->
£c⁄d_›_high
 = 0x7fffffff;

64 
èû
 = (tail + 1) % 512;

65 *(
mmio_ba£
[
iommu_id
] + 0x802Ë
èû
 << 4;

66 
	}
}

75 
	$íabÀ_DMA_ªm≠pög
(
uöt16_t
 
devi˚_id
, uöt16_à
dev_íd
, 
uöt64_t
 
≈t_pml4e
)

87 if(
devi˚_id
>
dev_íd
){

88 
	`lock_˝rötf
("DeviceÉrror\n");

91 if(
dev_íd
 > 
MAX_DEV_ID
){

92 
	`lock_˝rötf
("OSV O∆y suµ‹àdevi˚ idÅÿ0x%x\n", 
MAX_DEV_ID
);

95 ;
devi˚_id
<=
dev_íd
; device_id++){

96 if(!
devi˚_èbÀ
[
devi˚_id
].
v
){

97 
devi˚_èbÀ
[
devi˚_id
].
sysmgt
 = 3;

98 
devi˚_èbÀ
[
devi˚_id
].
ex
 = 0;

99 
devi˚_èbÀ
[
devi˚_id
].
sd
 = 0;

100 
devi˚_èbÀ
[
devi˚_id
].
ˇche
 = 0;

101 
devi˚_èbÀ
[
devi˚_id
].
io˘l
 = 1;

102 
devi˚_èbÀ
[
devi˚_id
].
ß
 = 0;

103 
devi˚_èbÀ
[
devi˚_id
].
£
 = 1;

104 
devi˚_èbÀ
[
devi˚_id
].
i
 = 1;

105 
devi˚_èbÀ
[
devi˚_id
].
domaöid
 = 1;

106 
devi˚_èbÀ
[
devi˚_id
].
ú
 = 1;

107 
devi˚_èbÀ
[
devi˚_id
].
iw
 = 1;

108 
devi˚_èbÀ
[
devi˚_id
].
∑ge_èbÀ
 = 
≈t_pml4e
 >> 12;

109 
devi˚_èbÀ
[
devi˚_id
].
mode
 = 4;

110 
devi˚_èbÀ
[
devi˚_id
].
tv
 = 1;

111 
devi˚_èbÀ
[
devi˚_id
].
v
 = 1;

115 
	}
}

118 
	$iommu_öô
(
ivrs
 *ivrs)

120 
ivhd_hód
 *
ivhd
;

121 
ivmd_hód
 *
ivmd
;

122 
devi˚_íåy_4_byã
 * 
íåy_4_byã
;

123 
devi˚_íåy_8_byã
 * 
íåy_8_byã
;

124 
uöt32_t
 
ba£_low
, 
ba£_high
;

125 
uöt32_t
 
i
,
j
, 
devi˚_íåy_ödex
, 
iommu_nums
;

126 
uöt16_t
 
dev_°¨t
 = 0, 
dev_íd
 = 0;

127 
≈t
[];

128 
iommu_öôed
;

129 
uöt64_t
 
tmp
;

131 if(
ivrs
 =
NULL
){

132 
	`lock_˝rötf
("IVRSÅable isÇotÖresented\n");

136 
	`mem£t
(
devi˚_èbÀ
, 0, 1024*1024*2);

140 
j
 = 
ivrs
->
hódî
.
Àngth
;

141 
iommu_nums
 = 0;

142 
i
=48; i<
j
; ){

143 
ivhd
 = (
ivhd_hód
 *)((
uöt64_t
)
ivrs
 + 
i
);

144 
ivhd
->
ty≥
){

156 
iommu_nums
++;

157 if(
iommu_nums
 > 
MAX_IOMMU
){

158 
	`lock_˝rötf
("Thîê¨êtoÿm™y IOMMU, OSV o∆y suµ‹à%d IOMMUs\n", 
MAX_IOMMU
);

167 
mmio_ba£
[
iommu_nums
-1] = (
uöt32_t
 *)(
ivhd
->
iommu_ba£
);

168 
ba£_low
 = (
uöt64_t
)
devi˚_èbÀ
 & 0xfffff000;

169 
ba£_low
 |= 0x1ff;

170 *
mmio_ba£
[
iommu_nums
-1] = 
ba£_low
;

171 
ba£_high
 = ((
uöt64_t
)
devi˚_èbÀ
 >> 32) & 0xfffff;

172 *(
mmio_ba£
[
iommu_nums
-1]+1Ë
ba£_high
;

175 
tmp
 = (
uöt64_t
)
cmdbuf
[
iommu_nums
-1];

176 
tmp
 &= 0xffffffffff000;

177 
tmp
 |= 9UL<<56;

178 *(
mmio_ba£
[
iommu_nums
-1] + 2Ë
tmp
 & 0xffffffff;

179 *(
mmio_ba£
[
iommu_nums
-1] + 3Ë
tmp
 >> 32;

182 
tmp
 = (
uöt64_t
)
evítbuf
;

183 
tmp
 &= 0xffffffffff000;

184 
tmp
 |= 9UL<<56;

185 *(
mmio_ba£
[
iommu_nums
-1] + 4Ë
tmp
 & 0xffffffff;

186 *(
mmio_ba£
[
iommu_nums
-1] + 5Ë
tmp
 >> 32;

192 *(
mmio_ba£
[
iommu_nums
-1] + 8) = 0;

193 
tmp
 = (1<<12) + (1<<11) + (1<<10) + (1<<9) + (1<<8) + (0<<5) + (0<<4) +

195 *(
mmio_ba£
[
iommu_nums
-1] + 6Ë
tmp
;

197 
devi˚_íåy_ödex
 = (
ivhd_hód
);

198 ;
devi˚_íåy_ödex
 < 
ivhd
->
Àngth
;){

199 *(
uöt8_t
 *)((
uöt64_t
)
ivhd
+
devi˚_íåy_ödex
)>>6){

201 
íåy_4_byã
 = (
devi˚_íåy_4_byã
 *)((
uöt64_t
)
ivhd
+
devi˚_íåy_ödex
);

202 
íåy_4_byã
->
ty≥
){

206 
	`lock_˝rötf
("SettingÅoáll devices\n");

209 
	`íabÀ_DMA_ªm≠pög
(
íåy_4_byã
->
devi˚id
,É¡ry_4_byã->devi˚id, (
uöt64_t
)
≈t
);

214 
dev_°¨t
 = 
íåy_4_byã
->
devi˚id
;

217 
dev_íd
 = 
íåy_4_byã
->
devi˚id
;

218 
	`íabÀ_DMA_ªm≠pög
(
dev_°¨t
, 
dev_íd
, (
uöt64_t
)
≈t
);

223 
devi˚_íåy_ödex
 += 4;

226 
íåy_8_byã
 = (
devi˚_íåy_8_byã
 *)((
uöt64_t
)
ivhd
+
devi˚_íåy_ödex
);

227 
íåy_8_byã
->
ty≥
){

233 
	`íabÀ_DMA_ªm≠pög
(
íåy_8_byã
->
devi˚_id_a
,

234 
íåy_8_byã
->
devi˚_id_a
, (
uöt64_t
)
≈t
);

237 
dev_°¨t
 = 
íåy_8_byã
->
devi˚_id_a
;

243 
	`lock_˝rötf
("Extended selectÉntry, 8 Byte\n");

246 
dev_°¨t
 = 
íåy_8_byã
->
devi˚_id_a
;

249 
	`lock_˝rötf
("This is special device, 8 Byte\n");

254 
devi˚_íåy_ödex
 += 8;

257 
	`lock_˝rötf
("This isá 16 byte IVHD deviceÉntry");

258 
devi˚_íåy_ödex
 += 16;

261 
	`lock_˝rötf
("This isá 32 byte IVHD deviceÉntry");

262 
devi˚_íåy_ödex
 += 32;

267 
i
 +
ivhd
->
Àngth
;

270 
ivmd
 = (
ivmd_hód
 *)((
uöt64_t
)
ivrs
 + 
i
);

271 
	`lock_˝rötf
("FindáÇew IVMD,Åype: 0x20, flags: %x, start_addr: %lx\n",

272 
ivmd
->
Êags
, ivmd->
ivmd_°¨t_addr
);

273 
i
 +(
ivmd_hód
);

276 
ivmd
 = (
ivmd_hód
 *)((
uöt64_t
)
ivrs
 + 
i
);

277 
	`lock_˝rötf
("FindáÇew IVMD,Åype: 0x21, flags: %x, start_addr: %lx\n",

278 
ivmd
->
Êags
, ivmd->
ivmd_°¨t_addr
);

279 
i
 +(
ivmd_hód
);

282 
ivmd
 = (
ivmd_hód
 *)((
uöt64_t
)
ivrs
 + 
i
);

283 
	`lock_˝rötf
("FindáÇew IVMD,Åype: 0x22, flags: %x, start_addr: %lx\n",

284 
ivmd
->
Êags
, ivmd->
ivmd_°¨t_addr
);

285 
i
 +(
ivmd_hód
);

288 
i
++;

294 
uöt16_t
 
devi˚_id
;

295 
devi˚_id
 = (0<<8) | (0x11<<3) | 0;

296 
	`íabÀ_DMA_ªm≠pög
(
devi˚_id
, devi˚_id, (
uöt64_t
)
≈t
);

297 
devi˚_id
 = (0<<8) | (0x12<<3) | 0;

298 
	`íabÀ_DMA_ªm≠pög
(
devi˚_id
, devi˚_id, (
uöt64_t
)
≈t
);

299 
devi˚_id
 = (0<<8) | (0x12<<3) | 1;

300 
	`íabÀ_DMA_ªm≠pög
(
devi˚_id
, devi˚_id, (
uöt64_t
)
≈t
);

301 
devi˚_id
 = (0<<8) | (0x12<<3) | 2;

302 
	`íabÀ_DMA_ªm≠pög
(
devi˚_id
, devi˚_id, (
uöt64_t
)
≈t
);

303 
devi˚_id
 = (0<<8) | (0x13<<3) | 0;

304 
	`íabÀ_DMA_ªm≠pög
(
devi˚_id
, devi˚_id, (
uöt64_t
)
≈t
);

305 
devi˚_id
 = (0<<8) | (0x13<<3) | 1;

306 
	`íabÀ_DMA_ªm≠pög
(
devi˚_id
, devi˚_id, (
uöt64_t
)
≈t
);

307 
devi˚_id
 = (0<<8) | (0x13<<3) | 2;

308 
	`íabÀ_DMA_ªm≠pög
(
devi˚_id
, devi˚_id, (
uöt64_t
)
≈t
);

309 
devi˚_id
 = (1<<8) | (0<<3) | 0;

310 
	`íabÀ_DMA_ªm≠pög
(
devi˚_id
, devi˚_id, (
uöt64_t
)
≈t
);

311 
devi˚_id
 = (1<<8) | (0<<3) | 1;

312 
	`íabÀ_DMA_ªm≠pög
(
devi˚_id
, devi˚_id, (
uöt64_t
)
≈t
);

313 
devi˚_id
 = (2<<8) | (0<<3) | 0;

314 
	`íabÀ_DMA_ªm≠pög
(
devi˚_id
, devi˚_id, (
uöt64_t
)
≈t
);

315 
devi˚_id
 = (2<<8) | (0<<3) | 1;

316 
	`íabÀ_DMA_ªm≠pög
(
devi˚_id
, devi˚_id, (
uöt64_t
)
≈t
);

317 
devi˚_id
 = (5<<8) | (0<<3) | 0;

318 
	`íabÀ_DMA_ªm≠pög
(
devi˚_id
, devi˚_id, (
uöt64_t
)
≈t
);

319 
devi˚_id
 = (0xa<<8) | (3<<3) | 0;

320 
	`íabÀ_DMA_ªm≠pög
(
devi˚_id
, devi˚_id, (
uöt64_t
)
≈t
);

323 
	`lock_˝rötf
("enable_DMA_remappingÑeturn\n");

325 
iommu_öôed
 = 1;

326 
	}
}

329 
	$iommu_öô
(
ivrs
 *ivrs)

331 if(
ivrs
 =
NULL
){

332 
	`lock_˝rötf
("IVRSÅable isÇotÖresented\n");

335 
ivhd_hód
 *
ivhd
 = (ivhd_hód *)((
uöt64_t
)
ivrs
 + 48);

336 
uöt32_t
* 
ˇ∑bûôy_ba£
;

337 
uöt32_t
 
ba£_low
, 
ba£_high
;

338 
uöt64_t
 
i
,
j
;

339 
uöt16_t
 
devi˚_id
;

340 
pgt_íd
[], 
pml4e
[], 
≈t
[];

341 
uöt64_t
 
≈t_size
 = (uöt64_tË
pgt_íd
 - (uöt64_t)
pml4e
;

342 
uöt64_t
 
≈t_pml4e
 = (uöt64_t)&
≈t
[
≈t_size
];

343 
uöt64_t
 
tmp
;

344 
uöt64_t
 *
â
;

345 
ªt
 = 0;

348 if(
ivhd
->
ty≥
 != 0x10){

349 
	`lock_˝rötf
("Not IVHDÅable\n");

354 
	`mem£t
(
devi˚_èbÀ
, 0, 1024*1024*2);

360 
mmio_ba£
 = (
uöt32_t
 *)(
ivhd
->
iommu_ba£
);

361 
ba£_low
 = (
uöt64_t
)
devi˚_èbÀ
 & 0xfffff000;

362 
ba£_low
 |= 0x1ff;

363 *
mmio_ba£
 = 
ba£_low
;

364 
ba£_high
 = ((
uöt64_t
)
devi˚_èbÀ
 >> 32) & 0xfffff;

365 *(
mmio_ba£
+1Ë
ba£_high
;

374 
j
=0; j<8; j++){

375 
i
=0; i<256; i++){

376 
öå_ªm≠_èb
[
j
*256+
i
] = (i<<16) + (0x44<<8)

377 + (0<<6Ë+ (1<<5Ë+ ((
j
&1)<<2) + (0<<1) + 1;

388 
devi˚_id
 = (0<<8) | (0x13<<3) | 0;

394 
i
=0; i<3; i++, 
devi˚_id
++){

395 
devi˚_èbÀ
[
devi˚_id
].
löt1∑ss
 = 1;

396 
devi˚_èbÀ
[
devi˚_id
].
löt0∑ss
 = 1;

397 
devi˚_èbÀ
[
devi˚_id
].
öt˘l
 = 2;

398 
devi˚_èbÀ
[
devi˚_id
].
nmùass
 = 1;

399 
devi˚_èbÀ
[
devi˚_id
].
eöô∑ss
 = 1;

400 
devi˚_èbÀ
[
devi˚_id
].
öô∑ss
 = 1;

401 
devi˚_èbÀ
[
devi˚_id
].
öå_èbÀ
 = (
uöt64_t
)
öå_ªm≠_èb
 >>6;

402 
devi˚_èbÀ
[
devi˚_id
].
öâabÀn
 = 11;

403 
devi˚_èbÀ
[
devi˚_id
].
ig
 = 0;

404 
devi˚_èbÀ
[
devi˚_id
].
iv
 = 1;

405 
devi˚_èbÀ
[
devi˚_id
].
sysmgt
 = 3;

406 
devi˚_èbÀ
[
devi˚_id
].
ex
 = 0;

407 
devi˚_èbÀ
[
devi˚_id
].
sd
 = 0;

408 
devi˚_èbÀ
[
devi˚_id
].
ˇche
 = 0;

409 
devi˚_èbÀ
[
devi˚_id
].
io˘l
 = 1;

410 
devi˚_èbÀ
[
devi˚_id
].
ß
 = 0;

411 
devi˚_èbÀ
[
devi˚_id
].
£
 = 1;

412 
devi˚_èbÀ
[
devi˚_id
].
i
 = 1;

413 
devi˚_èbÀ
[
devi˚_id
].
domaöid
 = 1;

414 
devi˚_èbÀ
[
devi˚_id
].
ú
 = 1;

415 
devi˚_èbÀ
[
devi˚_id
].
iw
 = 1;

416 
devi˚_èbÀ
[
devi˚_id
].
∑ge_èbÀ
 = 
≈t_pml4e
 >> 12;

417 
devi˚_èbÀ
[
devi˚_id
].
mode
 = 4;

418 
devi˚_èbÀ
[
devi˚_id
].
tv
 = 1;

419 
devi˚_èbÀ
[
devi˚_id
].
v
 = 1;

421 
	`íqueue_iommu_cmd
(2, 
devi˚_id
);

422 
	`íqueue_iommu_cmd
(3, 
devi˚_id
);

423 
	`íqueue_iommu_cmd
(1, 
devi˚_id
);

426 
tmp
 = (
uöt64_t
)
cmdbuf
;

427 
tmp
 &= 0xffffffffff000;

428 
tmp
 |= 9UL<<56;

429 *(
mmio_ba£
 + 2Ë
tmp
 & 0xffffffff;

430 *(
mmio_ba£
 + 3Ë
tmp
 >> 32;

432 
tmp
 = (
uöt64_t
)
evítbuf
;

433 
tmp
 &= 0xffffffffff000;

434 
tmp
 |= 9UL<<56;

435 *(
mmio_ba£
 + 4Ë
tmp
 & 0xffffffff;

436 *(
mmio_ba£
 + 5Ë
tmp
 >> 32;

439 *(
mmio_ba£
 + 8) = 0;

441 
tmp
 = (1<<12) + (1<<11) + (1<<10) + (1<<9) + (1<<8) + (0<<5) + (0<<4) +

448 *(
mmio_ba£
 + 6Ë
tmp
;

449 
	}
}

453 
uöt64_t
 
	$ªad_mem‹y_qw‹d
(
uöt64_t
 
addr
)

455 
uöt64_t
 *
tmp
 = (uöt64_à*)
addr
;

456  *
tmp
;

457 
	}
}

459 
uöt64_t
 
	$bsf
(
uöt64_t
 
vÆ
)

461 
uöt64_t
 
ªt
;

462 
__asm
 
	`__vﬁ©ûe
("bsfq %%rbx, %%rax"

463 :"˜"(
ªt
)

464 :"b"(
vÆ
)

466  
ªt
;

467 
	}
}

469 
uöt64_t
 
	$i›agewÆk
(
uöt64_t
 
dã
, uöt64_à
dva
, *
gue°_buf„r
, *
Àn
)

471 
	#LARGEST_VA
(
LEVEL
Ë((0X1000ULL << ((LEVEL)*9))-1)

	)

472 
	#VABITS
(
LEVEL
Ë(((LEVEL)*9)+3)

	)

473 
	#IOPERM
 0x6000000000000000UL

	)

474 
	#RESV_BITS
 0x1ff0000000000000UL

	)

475 
	#U_FC_BITS
 0x1800000000000000UL

	)

476 
	#BITS_51_12
 0xffffffffff000UL

	)

479 
uöt64_t
 
pdã
 = 
dã
;

480 
uöt64_t
 
i›îm
 = 
pdã
 & 
IOPERM
;

481 
uöt64_t
 
∑
 = 
pdã
 & 
BITS_51_12
;

482 
uöt64_t
 
ﬁdÀvñ
 = 7, 
Àvñ
 = (
pdã
>>9)&7, 
vabôs
 = 63;

484 if(
Àvñ
 == 7){

485 *
Àn
 +
	`•rötf
(
gue°_buf„r
 + *len, "DEVTAB_RESERVED_LEVEL\n");

489 if(
Àvñ
 == 0)

490  
i›îm
 | 
∑
 | 
vabôs
;

492 
Àvñ
 != 0){

493 
uöt64_t
 
skùbôs
 = 
	`LARGEST_VA
(
ﬁdÀvñ
 - 1Ë- LARGEST_VA(
Àvñ
);

494 if((
dva
 & 
skùbôs
) != 0){

495 *
Àn
 +
	`•rötf
(
gue°_buf„r
 + *len, "PAGE_NOT_PRESENT 1\n");

498 
uöt64_t
 
off£t
 = (
dva
>>(
Àvñ
*9))&0xff8;

499 
pdã
 = 
	`ªad_mem‹y_qw‹d
(
∑
 + 
off£t
);

500 *
Àn
 +
	`•rötf
(
gue°_buf„r
 + *Àn, "Levñ %dÉ¡ry: %lx\n", 
Àvñ
, 
pdã
);

501 if((
pdã
 & 1) == 0){

502 *
Àn
 +
	`•rötf
(
gue°_buf„r
 + *len, "PAGE_NOT_PRESENT 2\n");

506 
ﬁdÀvñ
 = 
Àvñ
;

507 
Àvñ
 = (
pdã
 >> 9)&7;

508 
uöt64_t
 
ª£rved_bôs
 = 
RESV_BITS
;

509 if(
Àvñ
==0 ||Üevel==7){

510 
ª£rved_bôs
 &~
U_FC_BITS
;

511 
i›îm
 |
pdã
 & 
U_FC_BITS
;

513 if((
pdã
 & 
ª£rved_bôs
) != 0){

514 *
Àn
 +
	`•rötf
(
gue°_buf„r
 + *len, "PDTE_RESERVED_BITS 1\n");

517 
i›îm
 &
pdã
;

518 
∑
 = 
pdã
 & 
BITS_51_12
;

519 if(
Àvñ
 == 0x7){

520 
uöt64_t
 
tmp
 = 
∑
 ^ 
BITS_51_12
;

521 
vabôs
 = 
	`bsf
(
tmp
) + 1;

522 if((
vabôs
>=
	`VABITS
(
ﬁdÀvñ
 + 1)) ||

523 (
vabôs
<=
	`VABITS
(
ﬁdÀvñ
))){

524 *
Àn
 +
	`•rötf
(
gue°_buf„r
 + *len, "PDTE_RESERVED_BITS 2\n");

527 
∑
 &~((1UL<<
vabôs
)-1);

528  
i›îm
 | 
∑
 | 
vabôs
;

530 if(
Àvñ
 >
ﬁdÀvñ
){

531 *
Àn
 +
	`•rötf
(
gue°_buf„r
 + *len, "PDTE_RESERVED_BITS 3\n");

535 if((
∑
&
	`LARGEST_VA
(
ﬁdÀvñ
-1)) != 0){

536 *
Àn
 +
	`•rötf
(
gue°_buf„r
 + *len, "PDTE_RESERVED_BITS 4\n");

539  
i›îm
 | 
∑
 | 
	`VABITS
(
ﬁdÀvñ
);

540 
	}
}

542 
	$ªad_iommu_evít
(
iommu_id
, * 
gue°_buf„r
)

544 
uöt64_t
 
hód
, 
èû
, 
iommu_èb_b
;

545 
uöt64_t
 
fú°_›
, 
£c⁄d_›
, 
°©us
;

546 
uöt64_t
 *
e
, *
p
, *
m
;

547 
Àn
 = 0;

549 
iommu_èb_b
 = *(
mmio_ba£
[
iommu_id
] + 1);

550 
iommu_èb_b
 <<= 32;

551 
iommu_èb_b
 |*
mmio_ba£
[
iommu_id
];

553 
hód
 = *(
mmio_ba£
[
iommu_id
] + 0x804);

554 
èû
 = *(
mmio_ba£
[
iommu_id
] + 0x806);

555 
hód
 >>= 4;

556 
èû
 >>= 4;

557 
e
 = (
uöt64_t
 *)
evítbuf
;

558 
°©us
 = *(
mmio_ba£
[
iommu_id
] + 0x808);

559 
Àn
 +
	`•rötf
(
gue°_buf„r
 +Üen, "device_table:%p, iommu_base:%lx, status:%lx,Åail:%ld\n",

560 
devi˚_èbÀ
, 
iommu_èb_b
, 
°©us
, 
èû
);

562 
hód
 !
èû
){

563 
fú°_›
 = *(
e
+
hód
*2);

564 
£c⁄d_›
 = *(
e
+
hód
*2+1);

566 
m
 = (
uöt64_t
 *)(*(
p
 + (
£c⁄d_›
 & ~((1UL<<39)-1))) & 0xffffffffff000UL);

567 
m
 = (
uöt64_t
 *)(m + ((
£c⁄d_›
 & 0x7fc0000000UL)>>30));

568 
m
 = (
uöt64_t
 *)&(
devi˚_èbÀ
[
fú°_›
 & 0xffff]);

569 
uöt64_t
 
tmp
 = 0;

571 
Àn
 +
	`•rötf
(
gue°_buf„r
 +Üen, "DevID:%x, device_table base:%lx\n",

572 
fú°_›
 & 0xffff, &
devi˚_èbÀ
[first_op]);

574 
Àn
 +
	`•rötf
(
gue°_buf„r
 +Üí, "Devi˚ÖagêèbÀ ba£áddr: %lx\n", *
m
);

576 
tmp
 = 
	`i›agewÆk
(*
m
, 
£c⁄d_›
, 
gue°_buf„r
, &
Àn
);

578 
Àn
 +
	`•rötf
(
gue°_buf„r
 +Üen, "point:%lx, %lx, op:%lx, %lx, status:%lx,Åmp:%lx\n",

579 
hód
, 
èû
, 
£c⁄d_›
, 
fú°_›
, 
°©us
, 
tmp
);

580 
hód
 ++;

582 
	}
}

	@kern/irq.c

1 
	~<öc/°dio.h
>

2 
	~<öc/°rög.h
>

3 
	~<öc/úq.h
>

4 
	~<öc/≥r˝u.h
>

5 
	~<öc/x86.h
>

7 
	~<öc/≠ic.h
>

8 
	~<öc/svm.h
>

10 
	~<kîn/c⁄sﬁe.h
>

12 
	#BCDTOBIN
(
vÆ
Ë((vÆË(((vÆ)&0x0fË+ ((vÆ)>>4)*10))

	)

14 
	#CMOS_READ
(
p‹t
) ({ \

15 
	`outb
(0x70, (
p‹t
)); \

16 
	`dñay
(10); \

17 
	`öb
(0x71); \

18 })

	)

20 
wÆl_time
 
	gwtime
;

22 
£m
 
¥öt_£m
;

24 vﬁ©ûê
uöt16_t
 
¸t_pos
;

26 vﬁ©ûê
uöt16_t
 
	gtmp_¸t
 = 0;

27 vﬁ©ûê
uöt16_t
 
	gtime_¸t
 = 0;

28 vﬁ©ûê
uöt64_t
 
	gödex_t
 = 0;

31 
£t_h™dÀr
((*
f
)(),
å≠no
);

33 
öå_‰_p›
(
öãºu±_‰ame
 *
‰
);

35 
uöt32_t
 
	gsize_of_öå
 = 0;

37 
	$öô_πc
()

39 
	`gë_πc
(&
wtime
);

40 
	}
}

42 
	$time_¥öt
()

44 
	`•ö_lock
(&
¥öt_£m
);

45 if(
time_¸t
 == 0)

46 
time_¸t
 = 
¸t_pos
;

47 
tmp_¸t
 = 
¸t_pos
;

48 
¸t_pos
 = 0;

49 
	`˝rötf
("%4u:%2u:%2u:%2u:%2u:%2u, cpuid:%d\n", 
wtime
.
yór
, wtime.
m⁄th
, wtime.
day
, wtime.
hour
, wtime.
möuã
, wtime.
£c⁄d
, 
	`œpicid
());

50 
¸t_pos
 = 
tmp_¸t
;

51 
	`•ö_u∆ock
(&
¥öt_£m
);

52 
	}
}

54 
	$£t_πc
()

56 
uöt8_t
 
vÆ
;

57 
	`outb
(0x70, 0x0b);

58 
vÆ
 = 
	`öb
(0x71);

59 !(
vÆ
&0x4))

61 
vÆ
 = 
	`öb
(0x71);

62 
vÆ
 = val | 0x2 | 0x4;

63 
	`outb
(0x71, 
vÆ
);

65 
	}
}

67 
	$gë_πc
(
wÆl_time
 *
time
)

69 
uöt8_t
 
£c
, 
mö
, 
hr
, 
day
, 
wday
, 
m⁄th
, 
yór
;

72 
	`outb
(0x70, 0x0);

73 
£c
 = 
	`öb
(0x71);

74 
	`dñay
(10);

75 
	`outb
(0x70, 0x2);

76 
mö
 = 
	`öb
(0x71);

77 
	`dñay
(10);

78 
	`outb
(0x70, 0x4);

79 
hr
 = 
	`öb
(0x71);

80 
	`dñay
(10);

81 
	`outb
(0x70, 0x6);

82 
wday
 = 
	`öb
(0x71);

83 
	`dñay
(10);

84 
	`outb
(0x70, 0x7);

85 
day
 = 
	`öb
(0x71);

86 
	`dñay
(10);

87 
	`outb
(0x70, 0x8);

88 
m⁄th
 = 
	`öb
(0x71);

89 
	`dñay
(10);

90 
	`outb
(0x70, 0x9);

91 
yór
 = 
	`öb
(0x71);

92 }
£c
 !
	`CMOS_READ
(0x0));

94 
	`BCDTOBIN
(
£c
);

95 
	`BCDTOBIN
(
mö
);

96 
	`BCDTOBIN
(
hr
);

97 
	`BCDTOBIN
(
wday
);

98 
	`BCDTOBIN
(
day
);

99 
	`BCDTOBIN
(
m⁄th
);

100 
	`BCDTOBIN
(
yór
);

101 
time
->
£c⁄d
 = 
£c
;

102 
time
->
möuã
 = 
mö
;

103 
time
->
hour
 = 
hr
;

104 
time
->
day
 = day;

105 
time
->
wday
 = wday;

106 
time
->
m⁄th
 = month;

107 
time
->
yór
 = year + 1900;

108 if(
time
->
yór
 < 1970)

109 
time
->
yór
 += 100;

110 
	}
}

112 
	$lﬂd_idt
()

114 
idtdesc1
.
Àn
 = 255*16;

115 
idtdesc1
.
addr
 = (
uöt64_t
)
idt_èbÀ
;

116 
	`lidt
((*)&
idtdesc1
);

118 
	}
}

120 
£t_h™dÀr
 ((*
f
)(),
å≠no
)

122 
GATE
 * 
	gp_g©e
 = &
idt_èbÀ
[
å≠no
];

123 
uöt64_t
 
	gba£
 = (uöt64_t)
f
;

124 
	gp_g©e
->
	goff£t_low
 = (
uöt16_t
)(
ba£
 & 0xFFFF);

125 
	gp_g©e
->
	g£À˘‹
 = (
uöt16_t
)0x8;

126 
	gp_g©e
->
	gdcou¡
 = (
uöt8_t
)0;

127 
	gp_g©e
->
	g©å
 = (
uöt8_t
)0x8e;

128 
	gp_g©e
->
	goff£t_high
 = (
uöt32_t
)((((
uöt64_t
)
ba£
)>>16) & 0xFFFF);

129 
	gp_g©e
->
	goff£t_high32
 = (
uöt32_t
)((
ba£
>>32) & 0xffffffff);

130 
	gp_g©e
->
	gªs_off£t_high32
 = 0;

134 
	$ßve_c⁄ãxt
()

136 
__asm
 
	`__vﬁ©ûe
("pushq %rbp\n"

140 
	}
}

142 
	$ªcovî_c⁄ãxt
()

144 
__asm
 
	`__vﬁ©ûe
(

147 
	}
}

150 
	$öô_8259A
()

152 
	`outb
(0x20,0x11);

153 
__asm
 
	`__vﬁ©ûe
("nop\nnop\nnop"::);

154 
	`outb
(0xA0,0x11);

155 
__asm
 
	`__vﬁ©ûe
("nop\nnop\nnop"::);

156 
	`outb
(0x21,0x20);

157 
__asm
 
	`__vﬁ©ûe
("nop\nnop\nnop"::);

158 
	`outb
(0xA1,0x28);

159 
__asm
 
	`__vﬁ©ûe
("nop\nnop\nnop"::);

161 
	`outb
(0x21,0x04);

162 
__asm
 
	`__vﬁ©ûe
("nop\nnop\nnop"::);

163 
	`outb
(0xA1,0x02);

164 
__asm
 
	`__vﬁ©ûe
("nop\nnop\nnop"::);

166 
	`outb
(0x21,0x03);

167 
__asm
 
	`__vﬁ©ûe
("nop\nnop\nnop"::);

168 
	`outb
(0xA1,0x03);

169 
__asm
 
	`__vﬁ©ûe
("nop\nnop\nnop"::);

170 
	`outb
(0xA1,0xFF);

171 
__asm
 
	`__vﬁ©ûe
("nop\nnop\nnop"::);

172 
	`outb
(0x21,0xFF);

173 
__asm
 
	`__vﬁ©ûe
("nop\nnop\nnop"::);

175 
	`˝rötf
("8259A Init has finished\n");

177 
	}
}

179 
	$ack_8259a
(
úq
)

181 if(
úq
 & 8)

183 
	`öb
(0xa1);

184 
	`outb
(0xA1,0xFF);

185 
	`outb
(0xa0, 0x60 + (
úq
 & 7));

186 
	`outb
(0x20, 0x62);

190 
	`öb
(0x21);

191 
	`outb
(0x21, 0xFF);

192 
	`outb
(0x20, 0x60 + 
úq
);

194 
	}
}

196 
	$•urious_úq
(
úq
)

198 
	`˝rötf
("spurious_irq: ");

199 
	`˝rötf
("%x",
úq
&0xff);

200 
	`˝rötf
("\n");

201 
	}
}

203 
	$pô_öô
()

205 
	`outb
(0x43, 0x34);

206 
	`dñay
(10);

207 
	`outb
(0x40, (
uöt8_t
)((1193182/10)%256));

208 
	`dñay
(10);

210 
	`outb
(0x40, (
uöt8_t
)((1193182/10)/256));

211 
	`dñay
(10);

212 
	}
}

215 
	$öå_h™dÀr
(
öãºu±_‰ame
 *
‰ame
, 
uöt64_t
 
öåno
, uöt64_à
‹ig_r•
)

217 
uöt8_t
 
ã°
;

218 
uöt64_t
 
îr
;

220 
îr
 = 
‰ame
->
îr‹_code
;

221 
uöt32_t
 *
tmp_ös
;

222 
	`lock_˝rötf
("In %s, intrno:%ld,Ñip:%lx, Proc:%d\n",

223 
__func__
, 
öåno
, 
‰ame
->
‹ig_rù
, 
	`ªad_œpic
(0x20)>>24);

224 
öåno
){

229 
	`kbd_öå
();

232 
	`lock_˝rötf
("sx intr\n");

236 
	`gë_πc
(&
wtime
);

237 
	`time_¥öt
();

238 
ödex_t
 ++;

242 
uöt32_t
 
queued
 = 0;

243 
i
;

244 
i
=7; i>=0; i--){

245 
queued
 = 
	`ªad_œpic
(0x200+ 
i
*0x10);

246 if(
queued
){

247 
	`lock_˝rötf
("i:%d, queued:%x\n", 
i
, 
queued
);

249 
queued
 = 0;

254 
	`lock_˝rötf
("here inÅheÜocalápic interrupt\n");

257 
	`wrôe_œpic
(0xb0, 0x0);

258 
tmp_ös
 = (
uöt32_t
 *)(
‰ame
->
‹ig_rù
+1);

260 
	`lock_˝rötf
("\nIntr %ld, Proc:%d,Érr_code:0x%lx,Ñip:%lx-%x, old_CS:%lx, RSP:%lx, SS:%lx\n",

261 
öåno
, 
	`ªad_œpic
(0x20)>>24, 
‰ame
->
îr‹_code
, føme->
‹ig_rù
, *
tmp_ös
,

262 
‰ame
->
‹ig_cs
, føme->
‹ig_r•
, føme->
‹ig_ss
);

266 
vmcb
 *
vmcb1
;

267 
vmcb1
 = &
vmcb_ã°
[
	`œpicid
()];

268 
	`úq_öje˘
(
vmcb1
, 
öåno
);

269 
	`wrôe_œpic
(0xb0, 0x0);

272 if(
öåno
 == 0x33){

273 
uöt32_t
 
queued
 = 0;

274 
i
;

275 
i
=7; i>=0; i--){

276 
queued
 = 
	`ªad_œpic
(0x200 + 
i
*0x10);

277 if(
queued
){

278 
	`lock_˝rötf
("Agaö i:%d, queued:%x\n", 
i
, 
queued
);

280 
queued
 = 0;

284 
	`öå_‰_p›
(
‰ame
);

285 
	}
}

287 
	$keybﬂrd_öt
()

289 
	`ßve_c⁄ãxt
();

291 
	`ªcovî_c⁄ãxt
();

292 
	}
}

294 
	$£t_ex˚±i⁄
()

296 
i
 = 0;

298 
	`£t_h™dÀr
((*)
	`öå_n€c
(0), 0);

299 
	`£t_h™dÀr
((*)
	`öå_n€c
(1), 1);

300 
	`£t_h™dÀr
((*)
	`öå_n€c
(2), 2);

301 
	`£t_h™dÀr
((*)
	`öå_n€c
(3), 3);

302 
	`£t_h™dÀr
((*)
	`öå_n€c
(4), 4);

303 
	`£t_h™dÀr
((*)
	`öå_n€c
(5), 5);

304 
	`£t_h™dÀr
((*)
	`öå_n€c
(6), 6);

305 
	`£t_h™dÀr
((*)
	`öå_n€c
(7), 7);

306 
	`£t_h™dÀr
((*)
	`öå_ec
(8), 8);

307 
	`£t_h™dÀr
((*)
	`öå_ec
(9), 9);

308 
	`£t_h™dÀr
((*)
	`öå_ec
(10), 10);

309 
	`£t_h™dÀr
((*)
	`öå_ec
(11), 11);

310 
	`£t_h™dÀr
((*)
	`öå_ec
(12), 12);

311 
	`£t_h™dÀr
((*)
	`öå_ec
(13), 13);

312 
	`£t_h™dÀr
((*)
	`öå_ec
(14), 14);

313 
	`£t_h™dÀr
((*)
	`öå_ec
(15), 15);

314 
	`£t_h™dÀr
((*)
	`öå_n€c
(30), 30);

315 
	`£t_h™dÀr
((*)
	`öå_n€c
(31), 31);

317 
i
=16; i<30; i++)

318 
	`£t_h™dÀr
((*)
	`öå_n€c
(
i
), i);

319 
	}
}

321 
	$£t_öãºu±
()

323 
i
 = 32; i <= 255; i ++)

325 
	`£t_h™dÀr
((*)
	`öå_n€c
(
i
), i);

327 
	}
}

	@kern/mmap.c

1 
	~<öc/°dio.h
>

2 
	~<öc/x86.h
>

3 
	~<öc/mm≠.h
>

5 
t_bss
[], 
t_bss_íd
[];

7 
mem_t
 *
	g‰ì
;

8 
	göô
 = 0;

10 
	#z⁄e_addr
(
x
Ë((*)(x + 1))

	)

12 
£m
 
	gmÆloc_lock
;

15 
	$öô_mÆloc
()

19 
‰ì
 = (
mem_t
 *Ë
t_bss
;

20 
‰ì
->
size
 = 4096 * 16 - (
mem_t
);

21 
‰ì
->
œ°_addr
 = (
uöt64_t
Ë
t_bss_íd
;

22 
‰ì
->
¥ev
 = fªe->
√xt
 = 
NULL
;

23 
‰ì
->
avÆ
 = 1;

24 
mÆloc_lock
.
£mph
 = 1;

26 
öô
 = 1;

28 
	}
}

32 *
	$tmÆloc
(
size_t
 
size
)

34 
mem_t
 *
tmp
, *
√w
;

36 if(!
öô
)

37 
	`öô_mÆloc
();

39 
tmp
 = 
‰ì
;

43 
	`•ö_lock
(&
mÆloc_lock
);

45 
tmp
 = 
‰ì
;Åm∞!0;Åm∞tmp->
√xt
)

47 if(
tmp
->
size
 >= size)

49 if(
tmp
->
size
 > sizê+ (
mem_t
))

51 
√w
 =(
mem_t
 *)((
uöt64_t
)(
tmp
 + 1Ë+ 
size
);

52 
√w
->
¥ev
 = 
tmp
->prev;

53 
√w
->
¥ev
->
√xt
 =Çew;

54 
√w
->
√xt
 = 
tmp
->next;

55 
√w
->
œ°_addr
 = 
tmp
->last_addr;

56 
√w
->
size
 = 
tmp
->sizê- sizê- (
mem_t
);

57 
√w
->
avÆ
 = 1;

58 
tmp
->
size
 = size;

59 
tmp
->
œ°_addr
 = (
uöt64_t
)
√w
;

61 
tmp
->
¥ev
->
√xt
 =Åmp->next;

62 
tmp
->
√xt
->
¥ev
 =Åmp->prev;

63 
tmp
->
avÆ
 = 0;

65 
	`•ö_u∆ock
(&
mÆloc_lock
);

66  
	`z⁄e_addr
(
tmp
);

69 
	`•ö_u∆ock
(&
mÆloc_lock
);

70  
NULL
;

71 
	}
}

73 
	$t‰ì
(*
°¨t
)

75 
mem_t
 *
tmp
, *
cur
;

77 
tmp
 = 
‰ì
;

78 
cur
 = (
mem_t
 *)((
uöt64_t
)
°¨t
 - (mem_t));

80 
	`•ö_lock
(&
mÆloc_lock
);

82 
tmp
 < 
cur
)

84 if(!
tmp
->
√xt
)

86 if(
tmp
->
√xt
 > 
cur
)

88 
tmp
 =Åmp->
√xt
;

90 if(!
tmp
)

92 
cur
->
√xt
 = 
‰ì
;

93 
cur
->
¥ev
 = 
NULL
;

94 
‰ì
->
¥ev
 = 
cur
;

95 
‰ì
 = 
cur
;

96 
	`•ö_u∆ock
(&
mÆloc_lock
);

100 
cur
->
¥ev
 = 
tmp
;

101 
cur
->
√xt
 = 
tmp
->next;

102 
tmp
->
√xt
->
¥ev
 = 
cur
;

103 
tmp
->
√xt
 = 
cur
;

104 
cur
->
avÆ
 = 1;

107 if(
cur
->
œ°_addr
 =(
uöt64_t
)cur->
√xt
)

109 
cur
->
size
 = cur->
√xt
->sizê+ cur->sizê+ (
mem_t
);

110 
cur
->
œ°_addr
 = cur->
√xt
->last_addr;

111 
cur
->
√xt
 = cur->next->next;

112 
cur
->
√xt
->√xt->
¥ev
 = cur;

114 if(
tmp
->
œ°_addr
 =(
uöt64_t
)
cur
)

116 
tmp
->
size
 =Åmp->sizê+ 
cur
->sizê+ (
mem_t
);

117 
tmp
->
œ°_addr
 = 
cur
->last_addr;

118 
cur
->
√xt
->
¥ev
 = 
tmp
;

119 
tmp
->
√xt
 = 
cur
->next;

121 
	`•ö_lock
(&
mÆloc_lock
);

124 
	}
}

126 
	$move£lf_to_œ°_Gb
(
uöt64_t
 
addr
)

129 
	}
}

131 
	$dëe˘_me
()

134 
	}
}

	@kern/monitor.c

4 
	~<öc/°dio.h
>

5 
	~<öc/°rög.h
>

6 
	~<öc/memœyout.h
>

7 
	~<öc/as£π.h
>

8 
	~<öc/x86.h
>

10 
	~<kîn/c⁄sﬁe.h
>

11 
	~<kîn/m⁄ô‹.h
>

13 
	#CMDBUF_SIZE
 80

14 

	)

16 
	sComm™d
 {

17 c⁄° *
	m«me
;

18 c⁄° *
	mdesc
;

20 (*
	mfunc
)(
	m¨gc
, ** 
	m¨gv
, 
Tøp‰ame
* 
	mtf
);

23 
Comm™d
 
	gcomm™ds
[] = {

24 { "hñp", "Di•œyÅhi†li° o‡comm™ds", 
m⁄_hñp
 },

25 { "kînöfo", "Di•œy inf‹m©i⁄ábouàthêkî√l", 
m⁄_kînöfo
 },

27 
	#NCOMMANDS
 ((
comm™ds
)/(comm™ds[0]))

	)

29 
ªad_eù
();

34 
	$m⁄_hñp
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

36 
i
;

38 
i
 = 0; i < 
NCOMMANDS
; i++)

39 
	`˝rötf
("%†- %s\n", 
comm™ds
[
i
].
«me
, comm™ds[i].
desc
);

41 
	}
}

44 
	$m⁄_kînöfo
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

46 
_°¨t
[], 
ëext
[], 
ed©a
[], 
íd
[];

48 
	`˝rötf
("Special kernel symbols:\n");

49 
	`˝rötf
(" _°¨à%∞(vútË %∞’hys)\n", 
_°¨t
, _°¨à- 
KERNBASE
);

50 
	`˝rötf
("Éãxà %∞(vútË %∞’hys)\n", 
ëext
,Éãxà- 
KERNBASE
);

51 
	`˝rötf
("Éd©® %∞(vútË %∞’hys)\n", 
ed©a
,Éd©®- 
KERNBASE
);

52 
	`˝rötf
("Énd %∞(vútË %∞’hys)\n", 
íd
,Énd - 
KERNBASE
);

53 
	`˝rötf
("KernelÉxecutable memory footprint: %ldKB\n",

54 (
íd
-
_°¨t
+1023)/1024);

56 
	}
}

59 
	$m⁄_backåa˚
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

63 
	}
}

69 
	#WHITESPACE
 "\t\r\¿"

	)

70 
	#MAXARGS
 16

	)

73 
	$runcmd
(*
buf
, 
Tøp‰ame
 *
tf
)

75 
¨gc
;

76 *
¨gv
[
MAXARGS
];

77 
i
;

80 
¨gc
 = 0;

81 
¨gv
[
¨gc
] = 0;

84 *
buf
 && 
	`°rchr
(
WHITESPACE
, *buf))

85 *
buf
++ = 0;

86 i‡(*
buf
 == 0)

90 i‡(
¨gc
 =
MAXARGS
-1) {

91 
	`˝rötf
("Toÿm™yárgumít†(max %d)\n", 
MAXARGS
);

94 
¨gv
[
¨gc
++] = 
buf
;

95 *
buf
 && !
	`°rchr
(
WHITESPACE
, *buf))

96 
buf
++;

98 
¨gv
[
¨gc
] = 0;

101 i‡(
¨gc
 == 0)

103 
i
 = 0; i < 
NCOMMANDS
; i++) {

104 i‡(
	`°rcmp
(
¨gv
[0], 
comm™ds
[
i
].
«me
) == 0)

105  
comm™ds
[
i
].
	`func
(
¨gc
, 
¨gv
, 
tf
);

107 
	`˝rötf
("Unknow¿comm™d '%s'\n", 
¨gv
[0]);

109 
	}
}

112 
	$m⁄ô‹
(
Tøp‰ame
 *
tf
)

114 *
buf
;

116 
	`˝rötf
("WelcomeÅoÅhe JOS kernel monitor!\n");

117 
	`˝rötf
("Type 'help' foráÜist of commands.\n");

121 
buf
 = 
	`ªadlöe
("K> ");

122 i‡(
buf
 !
NULL
)

123 i‡(
	`runcmd
(
buf
, 
tf
) < 0)

126 
	}
}

132 
	$ªad_eù
()

134 
uöt32_t
 
ˇŒîpc
;

135 
__asm
 
	`__vﬁ©ûe
("mov»4(%%ebp), %0" : "Ù" (
ˇŒîpc
));

136  
ˇŒîpc
;

137 
	}
}

	@kern/monitor.h

1 #i‚de‡
JOS_KERN_MONITOR_H


2 
	#JOS_KERN_MONITOR_H


	)

3 #i‚de‡
JOS_KERNEL


7 
	gTøp‰ame
;

12 
m⁄ô‹
(
Tøp‰ame
 *
tf
);

15 
m⁄_hñp
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

16 
m⁄_kînöfo
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

17 
m⁄_backåa˚
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

	@kern/mp.c

1 
	~<öc/vm±.h
>

2 
	~<öc/˝u.h
>

3 
	~<öc/°dio.h
>

4 
	~<öc/°rög.h
>

5 
	~<öc/pm≠.h
>

6 
	~<öc/≠ic.h
>

8 
	#BOOTP
 0x2

	)

9 
	#KERN_BASE
 0x0

	)

12 
mp_Âå
 *
	ggÂå
;

14 
uöt32_t
 
	gödex
 = 0;

15 vﬁ©ûê
˝u
 
	g˝us
[
MAX_CPU
];

16 
uöt8_t
 
	gœpicid_to_ödex
[256];

17 
uöt32_t
 
	giﬂpicid
;

18 
uöt64_t
 
	g˝u_id
 = 0;

19 
uöt64_t
 
	g˝uid_off£t
 = 0;

20 
uöt64_t
 
	g˝unum
 = 0;

21 
mp_iﬂpic
 *
	giﬂpic
[16] = {

22 
NULL


26 
mp_Âå
* 
	$mp_gë_Âå
()

28 
uöt8_t
 *
addr
;

29 
uöt16_t
 
ebda
;

30 
uöt16_t
 
ba£_bound¨y
;

31 
mp_Âå
 *
Âå
;

32 
addr
 = (
uöt8_t
 *)0x400;

33 
ebda
 = (
addr
[0xf]<<8 |áddr[0xe])<<4;

34 
ba£_bound¨y
 = (
addr
[0x14]<<16 |áddr[0x13])*1024;

36 if((
Âå
 = 
	`mp_£¨ch
(0, 1024)))

37  
Âå
;

39 if((
Âå
 = 
	`mp_£¨ch
(639*1024, 1024)))

40  
Âå
;

42 if((
Âå
 = 
	`mp_£¨ch
(0xf0000, 0x10000)))

43  
Âå
;

45 
	}
}

48 
	$mp_öô
()

50 
mp_Âå
 *
Âå
;

51 
mp_c⁄f_hódî
 *
mp_hódî
;

52 
mp_¥o˚s£r
 *
¥oc
;

53 
mp_bu£¡ry
 *
bus
;

54 
mp_ioöå_assign
 *
ioöå
 = 
NULL
;

55 
mp_locöå_assign
 *
löå
;

56 
mp_iﬂpic
 *
iﬂpic_íåy
;

58 
iﬂpic_num
 = 0, 
mp_ioöå_assign_num
 = 0;

63 
Âå
 = 
	`mp_gë_Âå
();

64 if(!
Âå
)

66 if(
Âå
->
mp_„©uª
[0]){

67 
	`˝rötf
("Othî deÁu… c⁄figuøti⁄ i†im∂emíãd, %d\n", 
Âå
->
mp_„©uª
[0]);

68 
	`gëch¨
();

70 
gÂå
 = 
Âå
;

71 
	`lock_˝rötf
("Âå fótuª 1:%x, 2:%x\n", 
Âå
->
mp_„©uª
[0], fptr->mp_feature[1]);

74 
mp_hódî
 = (
mp_c⁄f_hódî
 *)((
uöt64_t
Ë
Âå
->
tb_addr
 + 
KERN_BASE
);

75 
uöt8_t
 *
p
 = (uöt8_à*)(
mp_hódî
 + 1);

76 
ödex
 = 0;

78 ; 
p
 < ((
uöt8_t
 *)
mp_hódî
 + mp_hódî->
ba£_t_Àngth
);)

80 *
p
)

82 
PROC
:

83 
¥oc
 = (
mp_¥o˚s£r
 *Ë
p
;

84 if(
¥oc
->
œpicid
 =0 &&Öroc->
œpicvî
 == 0)

86 
p
 += 20;

89 if(
¥oc
->
˝uÊags
 & 
BOOTP
)

91 
˝us
[
ödex
].
boŸp
 = 1;

95 
˝us
[
ödex
].
œpicid
 = 
¥oc
->lapicid;

96 
˝us
[
ödex
].
˝uid
 = 
¥oc
->
œpicid
;

97 
˝us
[
ödex
].
nodeid
 = 
¥oc
->
œpicid
;

98 
œpicid_to_ödex
[
¥oc
->
œpicid
] = 
ödex
;

99 
ödex
++;

100 
p
 += 20;

102 
BUS
:

103 
bus
 = (
mp_bu£¡ry
 *Ë
p
;

104 
	`lock_˝rötf
("Bu†%d i†%c%c%c%c%c%c\n", 
bus
->
busid
,

105 
bus
->
bus°r
[0], bus->busstr[1], bus->busstr[2],

106 
bus
->
bus°r
[3], bus->busstr[4], bus->busstr[5]);

107 
p
 += 8;

109 
IOAPIC
:

110 
iﬂpic_íåy
 = (
mp_iﬂpic
 *)
p
;

111 
iﬂpic
[
iﬂpic_íåy
->
iﬂpicid
] = (
mp_iﬂpic
 *)
p
;

112 
	`lock_˝rötf
("MP_TABLE I/O APIC id:%d\n", 
iﬂpic_íåy
->
iﬂpicid
);

114 
iﬂpic_num
 ++;

115 
p
 += 8;

117 
IOINTR
:

118 
ioöå
 = (
mp_ioöå_assign
 *)
p
;

119 
mp_ioöå_assign_num
++;

120 
p
 += 8;

122 
LINTR
:

123 
löå
 = (
mp_locöå_assign
 *)
p
;

124 
p
 += 8;

127 
	`˝rötf
("error! Unkown mp confÅype\n");

141 
	`íabÀ_œpic
();

144 
˝unum
 = 
ödex
;

147 
	}
}

150 
	$smp_boŸ
()

152 
uöt32_t
 
i
 = 0; i < 
˝unum
; i ++)

154 if(!
˝us
[
i
].
boŸp
)

156 
˝u_id
 = 
i
 * 4096;

158 
	`boŸ_≠
(0x40000, 
˝us
[
i
].
˝uid
);

160 !
˝us
[
i
].
boŸed
)

161 
__asm__
 
	`__vﬁ©ûe__
("pause"::);

166 
	}
}

	@kern/multiboot.h

1 
	#MULTIBOOT_HEADER_MAGIC
 0x1BADB002

	)

2 
	#MULTIBOOT_FLAGS
 0x00010045

	)

	@kern/multiboot1.h

1 #i‚de‡
JOS_MACHINE_MULTIBOOT_H


2 
	#JOS_MACHINE_MULTIBOOT_H


	)

4 
	#MULTIBOOT_HEADER_PAGE_ALIGN
 0x00000001

	)

5 
	#MULTIBOOT_HEADER_MEMORY_INFO
 0x00000002

	)

6 
	#MULTIBOOT_HEADER_VIDEO_MODE
 0x00000004

	)

7 
	#MULTIBOOT_HEADER_AOUT_KLUDGE
 0x00010000

	)

9 
	#MULTIBOOT_INFO_MEMORY
 0x00000001

	)

10 
	#MULTIBOOT_INFO_BOOTDEV
 0x00000002

	)

11 
	#MULTIBOOT_INFO_CMDLINE
 0x00000004

	)

12 
	#MULTIBOOT_INFO_MODS
 0x00000008

	)

13 
	#MULTIBOOT_INFO_AOUT_SYMS
 0x00000010

	)

14 
	#MULTIBOOT_INFO_ELF_SHDR
 0x00000020

	)

15 
	#MULTIBOOT_INFO_MEM_MAP
 0x00000040

	)

16 
	#MULTIBOOT_INFO_DRIVE_INFO
 0x00000080

	)

17 
	#MULTIBOOT_INFO_CONFIG_TABLE
 0x00000100

	)

18 
	#MULTIBOOT_INFO_BOOT_LOADER_NAME
 0x00000200

	)

19 
	#MULTIBOOT_INFO_APM_TABLE
 0x00000400

	)

20 
	#MULTIBOOT_INFO_VIDEO_INFO
 0x00000800

	)

22 
	#MULTIBOOT_HEADER_MAGIC
 0x1BADB002

	)

23 
	#MULTIBOOT_EAX_MAGIC
 0x2BADB002

	)

25 #i‚de‡
__ASSEMBLER__


27 
	~<öc/ty≥s.h
>

29 
	smu…iboŸ_hódî
 {

30 
uöt32_t
 
	mmagic
;

31 
uöt32_t
 
	mÊags
;

32 
uöt32_t
 
	mchecksum
;

35 
uöt32_t
 
	mhódî_addr
;

36 
uöt32_t
 
	mlﬂd_addr
;

37 
uöt32_t
 
	mlﬂd_íd_addr
;

38 
uöt32_t
 
	mbss_íd_addr
;

39 
uöt32_t
 
	míåy_addr
;

42 
uöt32_t
 
	mmode_ty≥
;

43 
uöt32_t
 
	mwidth
;

44 
uöt32_t
 
	mheight
;

45 
uöt32_t
 
	mdïth
;

48 
	smu…iboŸ_öfo


50 
uöt32_t
 
	mÊags
;

52 
uöt32_t
 
	mmem_lowî
;

53 
uöt32_t
 
	mmem_uµî
;

55 
uöt32_t
 
	mboŸ_devi˚
;

57 
uöt32_t
 
	mcmdlöe
;

58 
uöt32_t
 
	mmods_cou¡
;

59 
uöt32_t
 
	mmods_addr
;

61 
uöt32_t
 
	msyms
[4];

63 
uöt32_t
 
	mmm≠_Àngth
;

64 
uöt32_t
 
	mmm≠_addr
;

66 
uöt32_t
 
	mdrives_Àngth
;

67 
uöt32_t
 
	mdrives_addr
;

68 
uöt32_t
 
	mc⁄fig_èbÀ
;

69 
uöt32_t
 
	mboŸ_lﬂdî_«me
;

70 
uöt32_t
 
	m≠m_èbÀ
;

72 
uöt32_t
 
	mvbe_c⁄åﬁ_öfo
;

73 
uöt32_t
 
	mvbe_mode_öfo
;

74 
uöt16_t
 
	mvbe_mode
;

75 
uöt16_t
 
	mvbe_öãrÁ˚_£g
;

76 
uöt16_t
 
	mvbe_öãrÁ˚_off
;

77 
uöt16_t
 
	mvbe_öãrÁ˚_Àn
;

80 
	smoduÀ


82 
uöt32_t
 
	mmode_°¨t
;

83 
uöt32_t
 
	mmode_íd
;

84 
uöt32_t
 
	m°rög
;

85 
uöt32_t
 
	mªs
;

86 }
	tmoduÀ_t
;

88 
	smem‹y_m≠


90 
uöt32_t
 
	msize
;

91 
uöt32_t
 
	mba£_addr_low
;

92 
uöt32_t
 
	mba£_addr_high
;

93 
uöt32_t
 
	mÀngth_low
;

94 
uöt32_t
 
	mÀngth_high
;

97 
uöt32_t
 
	mty≥
;

98 }
	tmem‹y_m≠_t
;

	@kern/nivmcall.c

2 
	~<öc/ty≥s.h
>

4 
	$vm_ni_vmˇŒ
()

7 
	}
}

	@kern/npt.c

1 
	~<öc/≈t.h
>

2 
	~<öc/x86.h
>

3 
	~<öc/≠ic.h
>

4 
	~<kîn/c⁄sﬁe.h
>

5 
	~<öc/˝u.h
>

6 
	~<öc/a˝i.h
>

7 
	~<öc/domaö.h
>

10 
uöt64_t
 
	gœpic_±e
[512] 
__©åibuã__
((
Æig√d
 (4096), 
£˘i⁄
(".data")));

12 
c⁄°ru˘_≈t_1G
(
uöt64_t
 
addr
, uöt64_à
size
, 
did
, uöt64_à
phy_off£t
);

13 
c⁄°ru˘_≈t_2M
(
uöt64_t
 
addr
, uöt64_à
size
, 
did
, uöt64_à
phy_off£t
);

14 
c⁄°ru˘_≈t_4K
(
uöt64_t
 
addr
, uöt64_à
size
, 
did
, uöt64_à
phy_off£t
);

17 
	$öô_≈t_≠ic
(
uöt64_t
 *
¸3
)

19 
uöt64_t
 *
n¸3
;

20 
uöt64_t
 *
œpic
, *
pmd
;

21 
uöt64_t
 
vÆ
;

23 
n¸3
 = (
uöt64_t
 *)
¸3
;

24 
pmd
 = 
	`gë_±e
(
n¸3
, 
LAPIC_BASE
, 3);

25 
vÆ
 = *
pmd
 & 
PAGE_MASK
;

26 *
pmd
 =(
uöt64_t
)&
œpic_±e
[0] | 0x17;

27 
i
 = 0; i < 512; i ++)

28 
œpic_±e
[
i
] = 
vÆ
 + i * 0x1000 + 0x17;

30 
œpic
 = 
	`gë_±e
(
n¸3
, 
LAPIC_BASE
, 4);

31 if(!
œpic
)

33 
vÆ
 = *
œpic
 & 
PAGE_MASK
;

34 *
œpic
 = 
vÆ
 | 0x15;

35 
	`lock_˝rötf
("œpi¯≈àvÆ i†0x%lx\n", *
œpic
);

37 
	}
}

41 
ölöe
 
	$Ê©_£t_logiˇlid
(
uöt32_t
 
vÆ
)

43 
uöt32_t
 
logiˇlid
;

44 
logiˇlid
 = 
vÆ
 >> 24;

45 
˝us
[
	`œpicid
()].
logiˇlid
 =Üogicalid;

50 
	`wrôe_œpic
(0x0, 
vÆ
);

51 
	}
}

53 
ölöe
 
	$ùi_£nd_logiˇl
(
uöt32_t
 
vÆ
)

55 
uöt32_t
 
des
, 
˝uid
, 
domaöid
, 
msgty≥
;

56 
uöt32_t
 
pid
, 
i¸l
;

57 
des
 = 
	`ªad_œpic
(0x310) >> 24;

58 
˝uid
 = 
	`œpicid
();

59 
domaöid
 = 
˝us
[
˝uid
].
nodeid
;

60 
msgty≥
 = ((
vÆ
>>8) & 0x7);

64 if(
msgty≥
 != 0)

66 
	`wrôe_œpic
(0x300, 
vÆ
);

72 if(
vÆ
 & 
LOGI_DES
)

74 (
vÆ
 >> 18)&0x3)

77 
i
 = 0; i < 
node
[
domaöid
].
ödex
; i ++)

78 if(
˝us
[
node
[
domaöid
].
œpicid
[
i
] - 
˝uid_off£t
].
logiˇlid
 & 
des
)

80 
pid
 = 
node
[
domaöid
].
œpicid
[
i
] << 24;

81 
i¸l
 = 
vÆ
;

82 
	`wrôe_œpic
(0x310, 
pid
);

83 
i¸l
 &~
LOGI_DES
;

84 
	`wrôe_œpic
(0x300, 
i¸l
);

89 
	`wrôe_œpic
(0x300, 
vÆ
);

92 
i
 = 0; i < 
node
[
domaöid
].
ödex
; i ++)

94 
pid
 = 
node
[
domaöid
].
œpicid
[
i
] << 24;

95 
i¸l
 = 
vÆ
;

96 
	`wrôe_œpic
(0x310, 
pid
);

97 
i¸l
 &~
LOGI_DES
;

98 
i¸l
 &~
ALL
;

99 
	`wrôe_œpic
(0x300, 
i¸l
);

103 
i
 = 0; i < 
node
[
domaöid
].
ödex
; i ++)

104 if(
node
[
domaöid
].
œpicid
[
i
] !
˝uid
)

106 
pid
 = 
node
[
domaöid
].
œpicid
[
i
] << 24;

107 
i¸l
 = 
vÆ
;

108 
	`wrôe_œpic
(0x310, 
pid
);

109 
i¸l
 &~
LOGI_DES
;

110 
i¸l
 &~
ALL
;

111 
	`wrôe_œpic
(0x300, 
i¸l
);

118 (
vÆ
 >> 18)&0x3)

121 
	`wrôe_œpic
(0x300, 
vÆ
);

125 
	`wrôe_œpic
(0x300, 
vÆ
);

128 
i
 = 0; i < 
node
[
domaöid
].
ödex
; i ++)

130 
pid
 = 
node
[
domaöid
].
œpicid
[
i
] << 24;

131 
i¸l
 = 
vÆ
;

132 
	`wrôe_œpic
(0x310, 
pid
);

133 
i¸l
 &~
LOGI_DES
;

134 
i¸l
 &~
ALL
;

135 
	`wrôe_œpic
(0x300, 
i¸l
);

139 
i
 = 0; i < 
node
[
domaöid
].
ödex
; i ++)

140 if(
node
[
domaöid
].
œpicid
[
i
] !
˝uid
)

142 
pid
 = 
node
[
domaöid
].
œpicid
[
i
] << 24;

143 
i¸l
 = 
vÆ
;

144 
	`wrôe_œpic
(0x310, 
pid
);

145 
i¸l
 &~
LOGI_DES
;

146 
i¸l
 &~
ALL
;

147 
	`wrôe_œpic
(0x300, 
i¸l
);

152 
	}
}

154 
	$h™dÀ_≠ic_wrôe
(
uöt64_t
 
ù
, uöt64_à
addr
)

157 
	}
}

159 
	$vm≠ic
(
gíîl_ªgs
 *
ªgs
)

161 
uöt32_t
 
≠ic_ªg
, 
vÆ
;

162 
≠ic_ªg
 = 
ªgs
->
rdi
;

163 
vÆ
 = 
ªgs
->
rsi
;

164 
≠ic_ªg
)

169 
	`Ê©_£t_logiˇlid
(
vÆ
);

174 
	`ùi_£nd_logiˇl
(
vÆ
);

177 
	`wrôe_œpic
(
≠ic_ªg
, 
vÆ
);

181 
	}
}

183 
uöt64_t
 
	gúq0_cou¡
 = 0;

185 
	$úq0_f‹w¨d
(
gíîl_ªgs
 *
ªgs
)

187 
i
 = 1;

188 
vmcb
 *
¥ivacy_vmcb
;

189 ;
i
 < 
NR_DOMAINS
; i++){

190 if(
node
[
i
].
boŸed
){

191 
	`wrôe_œpic
(0x310, 
node
[
i
].
boŸpid
<<24);

192 
	`wrôe_œpic
(0x300, 0x30);

200 if(
node
[1].
boŸed
)

202 
	`wrôe_œpic
(0x310, 
node
[1].
boŸpid
<<24);

203 
	`wrôe_œpic
(0x300, 0x30);

207 
	}
}

209 
	$öô_≈t_ønge
(
uöt64_t
 
addr
, uöt64_à
size
, 
did
, uöt64_à
phy_off£t
)

211 
pgt_íd
[], 
pml4e
[], 
≈t
[];

212 
uöt64_t
 
≈t_size
, 
≈t_°¨t
;

213 
uöt64_t
 
≈t_pml4e
, 
≈t_pd≥
, 
≈t_pde
;

214 
uöt64_t
 *
tmp
;

215 
uöt64_t
 
m
, 
n
, 
p
, 
q
;

217 
≈t_size
 = (
uöt64_t
Ë
pgt_íd
 - (uöt64_t)
pml4e
;

218 
≈t_pml4e
 = (
uöt64_t
)&
≈t
[
did
*
≈t_size
];

219 
≈t_pd≥
 = 
≈t_pml4e
 + 4096;

220 
≈t_pde
 = 
≈t_pd≥
 + 4096;

221 
tmp
 = (
uöt64_t
 *)
≈t_pml4e
;

222 *
tmp
 = 
≈t_pd≥
 + 7;

223 *
tmp
 |= 3<<9;

224 *
tmp
 |= 3UL<<61;

228 
m
 = (
addr
 >> 30) & 0x1ff;

229 
n
 = (
size
 >> 30) & 0x1ff;

230 
n
 +(
size
 & 0x3fffffff)?1:0;

231 
n
 +
m
;

232 
tmp
 = (
uöt64_t
 *)
≈t_pd≥
;

233 
tmp
 +
m
;

234 ; 
m
<
n
; m++){

235 *
tmp
 = 
≈t_pde
 + (
m
<<12) + 7;

236 *
tmp
 |= 2<<9;

237 *
tmp
 |= 3UL<<61;

238 
tmp
 ++;

242 
≈t_°¨t
 = 
node
[
did
].
ba£_addr
 +Çode[did].
Àngth
 - 
NPT_TAB_RESERVE_MEM
;

243 
m
 = (
addr
 >> 21) & 0x3ffff;

244 
n
 = ((
size
 >> 21) & 0x3ffff);

245 
n
 +(
size
 & 0x1fffff)?1:0;

246 
n
 +
m
;

247 
tmp
 = (
uöt64_t
 *)
≈t_pde
;

248 
tmp
 +
m
;

249 ; 
m
<
n
; m++){

250 *
tmp
 = 
≈t_°¨t
 + (
m
<<12) + 7;

251 *
tmp
 |= 1<<9;

252 *
tmp
 |= 3UL<<61;

253 
tmp
 ++;

257 
m
 = (
addr
 >> 12) & 0x7ffffff;

258 
n
 = ((
size
 >> 12) & 0x7ffffff);

259 
n
 +
m
;

260 
≈t_°¨t
 = 
node
[
did
].
ba£_addr
 +Çode[did].
Àngth
 - 
NPT_TAB_RESERVE_MEM
;

261 
tmp
 = (
uöt64_t
 *)
≈t_°¨t
;

262 
tmp
 +
m
;

263 if((
size
 & 0xfff) != 0){

264 
n
++;

266 ; 
m
<
n
; m++){

267 *
tmp
 = (
m
<<12Ë+ 7 + 
phy_off£t
;

268 *
tmp
 |= 3UL<<61;

269 
tmp
 ++;

272 
	}
}

275 
	$c⁄°ru˘_≈t_1G
(
uöt64_t
 
addr
, uöt64_à
size
, 
did
, uöt64_à
phy_off£t
)

277 
pgt_íd
[], 
pml4e
[], 
≈t
[];

278 
uöt64_t
 
≈t_size
;

279 
uöt64_t
 
≈t_pml4e
, 
≈t_pd≥
;

280 
uöt64_t
 *
tmp
;

281 
uöt64_t
 
m
, 
n
;

282 
≈t_size
 = (
uöt64_t
Ë
pgt_íd
 - (uöt64_t)
pml4e
;

283 
≈t_pml4e
 = (
uöt64_t
)&
≈t
[
did
*
≈t_size
];

284 
≈t_pd≥
 = 
≈t_pml4e
 + 4096;

285 
tmp
 = (
uöt64_t
 *)
≈t_pml4e
;

286 *
tmp
 = 
≈t_pd≥
 + 7;

287 *
tmp
 |= 3<<9;

288 *
tmp
 |= 3UL<<61;

290 if((
addr
 & 0x3fffffff) != 0 ||

291 (
phy_off£t
 & 0x3fffffff) != 0){

292 
	`c⁄°ru˘_≈t_2M
(
addr
, 
size
, 
did
, 
phy_off£t
);

294 
	`lock_˝rötf
("1G Start or PHY_OFFSETÇotálign ");

297 
	`lock_˝rötf
("Construct 1GÖage, start:%lx, size:%lx, offset:%lx\n",

298 
addr
, 
size
, 
phy_off£t
);

302 
m
 = (
addr
 >> 30) & 0x1ff;

303 
n
 = (
size
 >> 30) & 0x1ff;

304 
n
 +
m
;

305 
tmp
 = (
uöt64_t
 *)
≈t_pd≥
;

306 
tmp
 +
m
;

307 ; 
m
<
n
; m++){

308 *
tmp
 = (
m
<<30Ë+ 7 + 
phy_off£t
;

309 *
tmp
 |= 3UL<<61 | 0<<9 | 1<<7;

310 
tmp
 ++;

312 
	}
}

314 
	$c⁄°ru˘_≈t_2M
(
uöt64_t
 
addr
, uöt64_à
size
, 
did
, uöt64_à
phy_off£t
)

316 
pgt_íd
[], 
pml4e
[], 
≈t
[];

317 
uöt64_t
 
≈t_size
, 
≈t_°¨t
;

318 
uöt64_t
 
≈t_pml4e
, 
≈t_pd≥
, 
≈t_pde
;

319 
uöt64_t
 *
tmp
;

320 
uöt64_t
 
m
, 
n
;

322 if((
addr
 & 0x1fffff) != 0 ||

323 (
phy_off£t
 & 0x1fffff) !=0 ){

324 
	`lock_˝rötf
("2M Start or PHY_OFFSETÇotálign ");

329 
	`lock_˝rötf
("Construct 2MÖage, start:%lx, size:%lx, offset:%lx\n",

330 
addr
, 
size
, 
phy_off£t
);

332 
≈t_size
 = (
uöt64_t
Ë
pgt_íd
 - (uöt64_t)
pml4e
;

333 
≈t_pml4e
 = (
uöt64_t
)&
≈t
[
did
*
≈t_size
];

334 
≈t_pd≥
 = 
≈t_pml4e
 + 4096;

335 
≈t_pde
 = 
≈t_pd≥
 + 4096;

336 
tmp
 = (
uöt64_t
 *)
≈t_pml4e
;

337 *
tmp
 = 
≈t_pd≥
 + 7;

338 *
tmp
 |= 3<<9;

339 *
tmp
 |= 3UL<<61;

341 
m
 = (
addr
 >> 30) & 0x1ff;

342 
n
 = (
size
 >> 30) & 0x1ff;

343 
n
 +(
size
 & 0x3fffffff)?1:0;

344 
n
 +
m
;

345 
tmp
 = (
uöt64_t
 *)
≈t_pd≥
;

346 
tmp
 +
m
;

347 ; 
m
<
n
; m++){

348 *
tmp
 = 
≈t_pde
 + (
m
<<12) + 7;

349 *
tmp
 |= 2<<9 | 3UL<<61;

350 
tmp
 ++;

354 
m
 = (
addr
 >> 21) & 0x3ffff;

355 
n
 = ((
size
 >> 21) & 0x3ffff);

356 
n
 +
m
;

357 
tmp
 = (
uöt64_t
 *)
≈t_pde
;

358 
tmp
 +
m
;

359 ; 
m
<
n
; m++){

360 *
tmp
 = (
m
<<21Ë+ 7 + 
phy_off£t
;

361 *
tmp
 |= 0<<9 | 3UL<<61 | 1<<7;

362 
tmp
 ++;

365 
	}
}

367 
	$c⁄°ru˘_≈t_4K
(
uöt64_t
 
addr
, uöt64_à
size
, 
did
, uöt64_à
phy_off£t
)

369 
pgt_íd
[], 
pml4e
[], 
≈t
[];

370 
uöt64_t
 
≈t_size
, 
≈t_°¨t
;

371 
uöt64_t
 
≈t_pml4e
, 
≈t_pd≥
, 
≈t_pde
;

372 
uöt64_t
 *
tmp
;

373 
uöt64_t
 
m
, 
n
;

377 
≈t_size
 = (
uöt64_t
Ë
pgt_íd
 - (uöt64_t)
pml4e
;

378 
≈t_pml4e
 = (
uöt64_t
)&
≈t
[
did
*
≈t_size
];

379 
≈t_pd≥
 = 
≈t_pml4e
 + 4096;

380 
≈t_pde
 = 
≈t_pd≥
 + 4096;

381 
tmp
 = (
uöt64_t
 *)
≈t_pml4e
;

382 *
tmp
 = 
≈t_pd≥
 + 7;

383 *
tmp
 |= 3<<9;

384 *
tmp
 |= 3UL<<61;

387 
m
 = (
addr
 >> 30) & 0x1ff;

388 
n
 = (
size
 >> 30) & 0x1ff;

389 
n
 +(
size
 & 0x3fffffff)?1:0;

390 
n
 +
m
;

391 
tmp
 = (
uöt64_t
 *)
≈t_pd≥
;

392 
tmp
 +
m
;

393 ; 
m
<
n
; m++){

394 *
tmp
 = 
≈t_pde
 + (
m
<<12) + 7;

395 *
tmp
 |= 2<<9;

396 *
tmp
 |= 3UL<<61;

397 
tmp
 ++;

401 
≈t_°¨t
 = 
node
[
did
].
ba£_addr
 +Çode[did].
Àngth
 - 
NPT_TAB_RESERVE_MEM
;

402 
m
 = (
addr
 >> 21) & 0x3ffff;

403 
n
 = ((
size
 >> 21) & 0x3ffff);

404 
n
 +(
size
 & 0x1fffff)?1:0;

405 
n
 +
m
;

406 
tmp
 = (
uöt64_t
 *)
≈t_pde
;

407 
tmp
 +
m
;

408 ; 
m
<
n
; m++){

409 *
tmp
 = 
≈t_°¨t
 + (
m
<<12) + 7;

410 *
tmp
 |= 1<<9;

411 *
tmp
 |= 3UL<<61;

412 
tmp
 ++;

416 
m
 = (
addr
 >> 12) & 0x7ffffff;

417 
n
 = ((
size
 >> 12) & 0x7ffffff);

418 
n
 +
m
;

419 
tmp
 = (
uöt64_t
 *)
≈t_°¨t
;

420 
tmp
 +
m
;

421 if((
size
 & 0xfff) != 0){

422 
n
++;

424 ; 
m
<
n
; m++){

425 *
tmp
 = (
m
<<12Ë+ 7 + 
phy_off£t
;

426 *
tmp
 |= 3UL<<61;

427 
tmp
 ++;

430 
	}
}

437 
	$öô_≈t_ønge
(
uöt64_t
 
addr
, uöt64_à
size
, 
did
, uöt64_à
phy_off£t
)

439 
uöt64_t
 
m
, 
n
, 
p
, 
q
;

442 if(
size
 == 0){

446 if(
size
>=0x40000000UL && sizê- (
addr
 & 0x3fffffff) >= 0x40000000UL){

447 
m
 = 0x40000000 - (
addr
 & 0x3fffffff);

448 
m
 &= 0x3fffffff;

449 
n
 = 
addr
 + 
m
;

450 
q
 = (
size
 - 
m
) & 0x3fffffff;

451 
p
 = 
size
 - 
q
 - 
m
;

454 
	`öô_≈t_ønge
(
addr
, 
m
, 
did
, 
phy_off£t
);

455 
	`c⁄°ru˘_≈t_1G
(
n
, 
p
, 
did
, 
phy_off£t
);

456 
	`öô_≈t_ønge
(
n
+
p
, 
q
, 
did
, 
phy_off£t
);

460 if(
size
>=0x200000 && sizê- (
addr
 & 0x1fffff) >= 0x200000){

461 
m
 = 0x200000 - (
addr
 & 0x1fffff);

462 
m
 &= 0x1fffff;

463 
n
 = 
addr
 + 
m
;

464 
q
 = (
size
 - 
m
) & 0x1fffff;

465 
p
 = 
size
 - 
q
 - 
m
;

467 
	`öô_≈t_ønge
(
addr
, 
m
, 
did
, 
phy_off£t
);

468 
	`c⁄°ru˘_≈t_2M
(
n
, 
p
, 
did
, 
phy_off£t
);

469 
	`öô_≈t_ønge
(
n
+
p
, 
q
, 
did
, 
phy_off£t
);

473 
	`c⁄°ru˘_≈t_4K
(
addr
, 
size
, 
did
, 
phy_off£t
);

475 
	}
}

	@kern/pci.c

1 
	~<öc/pci.h
>

3 
	$pci_c⁄fig_ac˚ss
(
vmcb
 *vmcb)

5 
did
 = 
	`ªad_pda
(
˝udid
);

6 
uöt32_t
 
vÆ_cf8
;

7 
uöt8_t
 
ty≥
 = 
vmcb
->
exôöfo1
 & 1;

9 
vÆ_cf8
 = 
	`öl
(0xcf8);

11 if((
vÆ_cf8
 & (1<<31)) == 0){

12 
n‹mÆ_›î©es
:

13 (
vmcb
->
exôöfo1
>>4) & 7){

15 if(
ty≥
){

16 
vmcb
->
øx
 = 
	`öb
(0xcfc);

18 
	`outb
(0xcfc, 
vmcb
->
øx
);

22 if(
ty≥
){

23 
vmcb
->
øx
 = 
	`öw
(0xcfc);

25 
	`outw
(0xcfc, 
vmcb
->
øx
);

29 if(
ty≥
){

30 
vmcb
->
øx
 = 
	`öl
(0xcfc);

32 
	`oué
(0xcfc, 
vmcb
->
øx
);

37 
	`lock_˝rötf
("Error operand size");

42 if(
did
 == 0){

43 if((
vÆ_cf8
 & 0xfff800Ë!
USB_KBD_PCI_ADDR
){

44 
n‹mÆ_›î©es
;

46 if(
ty≥
){

47 
vmcb
->
øx
 = 0xffff;

50 }if(
did
 == 1){

51 if((
vÆ_cf8
 & 0xfff800Ë!
USB_KBD_PCI_ADDR
){

52 if(
ty≥
){

53 
vmcb
->
øx
 = 0xffff;

56 
n‹mÆ_›î©es
;

60 
	`lock_˝rötf
("Wrong did\n");

62 
	}
}

64 
	$mmio_c›y
(
uöt64_t
 
sour˚
, uöt64_à
de°
, 
Àn
)

66 
__asm__
 
	`__vﬁ©ûe__
("1:movb (%%rbx), %%al; movb %%al, (%%rdx);"

68 ::"b"(
sour˚
), "c"(
Àn
), "d"(
de°
)

71 
	}
}

73 
	$gë_pci_dw
(
uöt32_t
 
dev_id
, 
off£t
, uöt32_à*
vÆ
)

75 
uöt32_t
 
ba£_addr
;

76 
ba£_addr
 = 
	`ªad_m§
(0xc0010058);

77 if((
ba£_addr
 & 1) == 0){

78 
	`lock_˝rötf
("PCI configure space MSRáccess is disabled\n");

79 *
vÆ
 = -1;

82 
ba£_addr
 &= ~((1<<20)-1);

83 
ba£_addr
 +(
dev_id
 << 12Ë+ 
off£t
;

84 
	`mmio_c›y
(
ba£_addr
, (
uöt64_t
)
vÆ
, 4);

85 
	}
}

87 
	$gë_pci_hódî
(
uöt32_t
 
dev_id
, *
addr
)

89 
uöt32_t
 
ba£_addr
;

90 
ba£_addr
 = 
	`ªad_m§
(0xc0010058);

91 if((
ba£_addr
 & 1) == 0){

92 
	`lock_˝rötf
("PCI configure space MSRáccess is disabled\n");

95 
ba£_addr
 &= ~((1<<20)-1);

96 
ba£_addr
 +
dev_id
 << 12;

97 
	`mmio_c›y
(
ba£_addr
, (
uöt64_t
)
addr
, (
pci_c⁄fig_hódî
));

99 
	}
}

	@kern/percpu.c

1 
	~<öc/≥r˝u.h
>

2 
	~<öc/x86.h
>

3 
	~<öc/≠ic.h
>

4 
	~<öc/˝u.h
>

7 
osv_pda
 
	gpda
[32];

9 
DEFINE_PER_CPU
(, 
ã°
);

12 
	$≥r˝u_öô
()

14 
i
 = 0; i < 
MAX_CPU
; i ++ )

17 
pda
[
i
].
˝ulid
 = i;

18 
pda
[
i
].
˝upid
 = 
˝us
[i].
œpicid
;

19 
pda
[
i
].
˝udid
 = 
˝us
[i].
nodeid
;

22 
	}
}

24 
	$˝u_öô
()

26 
id
 = 
	`œpicid
();

29 
osv_pda
 *
˝u
 = &
pda
[
id
];

31 
vÆ
 = 0;

33 
__asm__
 
	`__vﬁ©ûe__
("mfence":::"memory");

34 
	`wrôe_m§
(0xc0000101, (
uöt64_t
)
˝u
);

35 
__asm__
 
	`__vﬁ©ûe__
("mfence":::"memory");

38 
	}
}

	@kern/pmap.c

1 
	~<öc/ty≥s.h
>

2 
	~<öc/°dio.h
>

3 
	~<öc/pm≠.h
>

6 
	$move£lf_to_œ°_GB
(
uöt64_t
 
addr
)

8 
°¨t
[], 
íd
[];

10 
	}
}

	@kern/printf.c

4 
	~<öc/ty≥s.h
>

5 
	~<öc/°dio.h
>

6 
	~<°d¨g.h
>

7 
	~<öc/x86.h
>

8 
	~<öc/vmmc⁄s.h
>

10 
£m
 
	g¥öt_£m
;

11 
£m
 *
	gvmm_£m
;

13 
buff_öfo
 *
	göfo
 = 0;

16 
	$putch
(
ch
, *
˙t
)

18 
	`˝utch¨
(
ch
);

19 if(
öfo
)

20 
	`vmmputch¨
(
ch
);

21 *
˙t
++;

22 
	}
}

25 
	$v˝rötf
(c⁄° *
fmt
, 
va_li°
 
≠
)

27 
˙t
 = 0;

29 
	`v¥ötfmt
((*)
putch
, &
˙t
, 
fmt
, 
≠
);

30  
˙t
;

31 
	}
}

34 
	$˝rötf
(c⁄° *
fmt
, ...)

36 
va_li°
 
≠
;

37 
˙t
;

39 
	`va_°¨t
(
≠
, 
fmt
);

40 
˙t
 = 
	`v˝rötf
(
fmt
, 
≠
);

41 
	`va_íd
(
≠
);

43  
˙t
;

44 
	}
}

46 
	$lock_˝rötf
(c⁄° *
fmt
, ...)

48 
	`•ö_lock
(&
¥öt_£m
);

49 if(
öfo
)

51 
	`•ö_lock
(
vmm_£m
);

52 
öfo
->
cur_°¨t
 = info->
cur_pos
;

55 
va_li°
 
≠
;

56 
˙t
;

58 
	`va_°¨t
(
≠
, 
fmt
);

59 
˙t
 = 
	`v˝rötf
(
fmt
, 
≠
);

60 
	`va_íd
(
≠
);

61 if(
öfo
)

63 if(
öfo
->
ovî_Êow
 && info->
°¨t
 <öfo->
cur_pos
)

64 
öfo
->
°¨t
 = info->
cur_°¨t
;

65 
	`•ö_u∆ock
(
vmm_£m
);

68 
	`•ö_u∆ock
(&
¥öt_£m
);

70  
˙t
;

71 
	}
}

73 
	sdebug_öfo_buf
{

74 
	mbuf
[4096*8-5];

75 
	msw
;

76 
uöt32_t
 
	mnum
;

78 
debug_öfo_buf
 debug_öfo_bu‡
__©åibuã__
((
Æig√d
(4096)));

79 
£m
 
	gdebug_£m
;

81 
	$debug_¥ötf
(c⁄° *
fmt
, ...)

83 
˙t
 = 0;

84 
va_li°
 
≠
;

85 if(
debug_öfo_buf
.
sw
 != 'e'){

88 
	`•ö_lock
(&
debug_£m
);

89 
	`va_°¨t
(
≠
, 
fmt
);

90 
˙t
 = 
	`v¢¥ötf
(
debug_öfo_buf
.
buf
+debug_öfo_buf.
num
, 4090, 
fmt
, 
≠
);

91 
	`va_íd
(
≠
);

92 
debug_öfo_buf
.
num
 = (debug_öfo_buf.num + 
˙t
)%(7*4096);

93 
	`•ö_u∆ock
(&
debug_£m
);

95 
	}
}

96 * 
mem˝y
(*
d°0
, c⁄° *
§c0
, 
size_t
 
Àngth
);

97 
	$debug_¥ötf_öô
(
gíîl_ªgs
 *
ªgs
)

99 
ªgs
->
rbx
 = (
uöt64_t
)&
debug_öfo_buf
;

100 
debug_öfo_buf
.
sw
 = 'e';

101 
debug_öfo_buf
.
num
 = 0;

102 
debug_£m
.
£mph
 = 1;

108 
	}
}

	@kern/privacy.c

1 
	~<öc/svm.h
>

2 
	~<öc/¥ivacy.h
>

3 
	~<öc/≥r˝u.h
>

4 
	~<öc/≠ic.h
>

6 
	~<öc/domaö.h
>

7 
	~<öc/iommu.h
>

9 
uöt64_t
 
gos_m§
[32];

11 
	gã°_e_íabÀ
 = 0;

13 
uöt64_t
 
	gtmp_a
 = 0;

14 
uöt64_t
 
	gtmp_b
 = 0;

15 
uöt64_t
 
	gsys_ªt_addr
;

16 
uöt64_t
 
	gã°_Êag
 = 0;

17 
uöt64_t
 
	gå≠_phy
 = 0;

19 
uöt64_t
 
gë_±e
(uöt64_à
ba£_addr
, uöt64_à
±e_addªss
);

21 
föd_∑ge_vút1
(
vmcb
 *vmcb, 
uöt64_t
 
addr
);

23 
uöt64_t
 
	gkî√l_≈t
, 
	gu£r_≈t
, 
	gkî√l_≈t_œ°
, 
	gu£r_≈t_œ°
;

25 
uöt64_t
 
	gfxßve_addr
 = 0;

28 
mem_ønge
 
	gos_mem_ønges
[3]={

29 {.
°¨t
=0, .
	gíd
=0xa0000},

30 {.
	g°¨t
=0x3c00000, .
	gíd
=0xbfac0000},

31 {.
	g°¨t
=0x100000000, .
	gíd
=0x220000000},

34 
	$is_os_mem
(
uöt64_t
 *
phys
)

36 
ªt
 = 0, 
i
;

37 
uöt64_t
 
addr
 = (uöt64_t)
phys
;

39 
i
=0;i<3;i++){

40 if(
os_mem_ønges
[
i
].
°¨t
<=
addr
 &&áddr<=os_mem_ønges[i].
íd
){

41 
ªt
 = 1;

45 if(
ªt
==0){

46 
	`lock_˝rötf
("Phys:%lx\n", 
addr
);

47 
i
=0;i<3;i++){

48 
	`lock_˝rötf
("°¨t:%lx --- %lx\n", 
os_mem_ønges
[
i
].
°¨t
,

49 
os_mem_ønges
[
i
].
íd
);

53  
ªt
;

54 
	}
}

56 
	$dump_îr‹_öfo
(
vmcb
 *vmcb, 
gíîl_ªgs
 *
ªgs
, 
löe
)

59 
	`lock_˝rötf
("line:%d, Rip:%lx,áddr:%lx,Éxitcode:%lx, CR3:%lx\n",

60 
löe
, 
vmcb
->
rù
, vmcb->
exôöfo2
,vmcb->
exôöfo1
, vmcb->
¸3
);

61 
	`föd_∑ge_vút1
(
vmcb
, vmcb->
exôöfo2
);

65 
	`lock_˝rötf
("rip:%lx-%lx,áddress:%lx,Öte:K%lx-U%lx\n",

66 
vmcb
->
rù
, 
	`phy_to_machöe
(vmcb->rù, 0, vmcb, 0, 
__LINE__
), vmcb->
exôöfo2
,

67 
	`gë_±e
(
vmcb
->
exôöfo2
, 
kî√l_≈t_œ°
), gë_±e(vmcb->exôöfo2, 
u£r_≈t_œ°
));

68 
	`lock_˝rötf
("SèckÖoöãr:%lx,áddr:%lx\n", 
vmcb
->
r•
, 
	`phy_to_machöe
(vmcb->r•, 0, vmcb, 0, 
__LINE__
));

71 
uöt64_t
 *
tmp
;

72 
uöt64_t
 
kî√l_ba£
;

73 
kî√l_ba£
 = 
	`ªad_m§
(0xc0000102);

74 
	`lock_˝rötf
("\nGS:%lx, Kî∆ba£:%lx\n", 
gos_m§
[
	`œpicid
()],
kî√l_ba£
);

75 if(
kî√l_ba£
 != 0){

76 
tmp
 = (
uöt64_t
 *)
	`phy_to_machöe
(
kî√l_ba£
+
KERNEL_GS_OFFSET
, 0, 
vmcb
, 0, 
__LINE__
);

77 if((
uöt64_t
)
tmp
!=
KERNEL_GS_OFFSET
){

78 
	`lock_˝rötf
("Ba£ sèck:%lx\n", *
tmp
);

82 
	`föd_∑ge_vút1
(
vmcb
, vmcb->
exôöfo2
);

86 
	}
}

88 
	$dump_°ack_öfo
(
vmcb
 *vmcb, 
gíîl_ªgs
 *
ªgs
, 
löe
)

91 
uöt64_t
 *
tmp
;

92 
i
 = 0, 
j
 = 0;

93 
tmp
 = (
uöt64_t
 *)
	`phy_to_machöe
(
vmcb
->
r•
, 0, vmcb, 0, 
__LINE__
);

96 
	`lock_˝rötf
("StackÖointer:%lx,áddr:%p, Proc:%d\n",

97 
vmcb
->
r•
, 
tmp
, 
	`œpicid
());

99 ;
i
<25;i++){

100 
tmp
 = (
uöt64_t
 *)
	`phy_to_machöe
(
vmcb
->
r•
 + 8*
j
, 0, vmcb, 0, 
__LINE__
);

101 
j
++;

102 if(*
tmp
>0xffffffff81000000UL){

103 
	`lock_˝rötf
("%lx ", *
tmp
);

106 
i
--;

109 
	`lock_˝rötf
("I¿%†lo›\n", 
__func__
);

110 
	}
}

114 
uöt64_t
 
	gVMEMMAP_START
 = 0xffffea0000000000UL;

115 
	g°¨t_¥ivis‹
 = 0;

118 
	shash_íåy
{

119 
uöt8_t
 
	mÊag
;

120 
uöt64_t
 
	mvÆue
;

123 
hash_íåy
 
	ghash_èb
[256];

124 
hash_íåy
 
	gpublic_hash_èb
[50];

125 
	gªgi°_pfd
 = 0;

126 
	gtŸÆ_≈t_Áu…
 = 0;

128 
	$f_hash
(
uöt64_t
 
vÆue
)

130 
uöt16_t
 
f_vÆue
 = 0;

131 
uöt8_t
 
ªt
 = 0;

132 
f_vÆue
 = 
vÆue
 & 0xffff;

133 
f_vÆue
 +(
vÆue
>>16)&0xffff;

134 
f_vÆue
 +(
vÆue
>>32)&0xffff;

135 
f_vÆue
 +(
vÆue
>>48)&0xffff;

136 
ªt
 = (
f_vÆue
&0xff) + ((f_value>>8)&0xff);

137  
ªt
;

138 
	}
}

140 
uöt64_t
 
	$lookup
(
uöt64_t
 
vÆue
)

142 
uöt64_t
 
ªt
 = -1;

143 
i
 = 
	`f_hash
(
vÆue
);

145 if(
hash_èb
[
i
].
Êag
==1 || hash_èb[i].
vÆue
 == -1){

146 if(
hash_èb
[
i
].
vÆue
 == value){

147 
ªt
 = 
vÆue
;

149 
i
=0;i<50;i++){

150 if(
public_hash_èb
[
i
].
Êag
==1){

151 if(
public_hash_èb
[
i
].
vÆue
==value){

152 
ªt
 = 
vÆue
;

160  
ªt
;

161 
	}
}

163 
	$ö£π
(
uöt64_t
 
vÆue
)

165 
i
 = 0;

166 
ödex
 = 
	`f_hash
(
vÆue
);

168 if(
	`lookup
(
vÆue
)!=-1){

169 
	`lock_˝rötf
("Already inÅable\n");

172 if(
hash_èb
[
ödex
].
Êag
==0){

173 
hash_èb
[
ödex
].
Êag
 = 1;

174 
hash_èb
[
ödex
].
vÆue
 = value;

176 ;
i
<50;i++){

177 if(
public_hash_èb
[
i
].
Êag
==0){

178 
public_hash_èb
[
i
].
Êag
 = 1;

179 
public_hash_èb
[
i
].
vÆue
 = value;

184 
	}
}

187 
	$dñëe
(
uöt64_t
 
vÆue
)

189 
i
 = 0;

190 
ödex
 = 
	`f_hash
(
vÆue
);

191 if(
hash_èb
[
ödex
].
vÆue
 == value){

192 
hash_èb
[
ödex
].
Êag
 = 0;

193 
hash_èb
[
ödex
].
vÆue
 = -1;

194 
	`lock_˝rötf
("Dñëê¥o˚ss:%lx\n", 
vÆue
);

197 
i
=0; i<50; i++){

198 if(
public_hash_èb
[
i
].
vÆue
 == value){

199 
public_hash_èb
[
i
].
Êag
 = 0;

200 
	`lock_˝rötf
("Dñëê¥o˚ss:%lx\n", 
vÆue
);

206 
	}
}

212 
	$ùi_óch_nŸ_£lf
(
uöt8_t
 
vec
)

223 
	}
}

226 * 
mem˝y
(*
d°0
, c⁄° *
§c0
, 
size_t
 
Àngth
);

228 
	$ismem
(
uöt64_t
 
addr
)

230 
i
;

231 
íåõs
 = 
boŸ_∑øms
->
e820_íåõs
;

232 
e820íåy
 *
íåy
 = 
boŸ_∑øms
->
e820_m≠
;

233 
i
=0; i<
íåõs
; i++){

234 if(
addr
>=
íåy
[
i
].add∏&&áddr<Û¡ry[i].addr+íåy[i].
size
){

235 if(
íåy
[
i
].
ty≥
 == 1){

243 
	}
}

251 
uöt64_t
 
	$gë_±e
(
uöt64_t
 
ba£_addr
, uöt64_à
±e_addªss
)

253 
uöt64_t
 *
íåy
;

254 
íåy
 = (
uöt64_t
 *)
±e_addªss
;

255 
íåy
 +(
ba£_addr
>>12) & 0x7ffffff;

256  *
íåy
;

257 
	}
}

267 
	$£t_íåõs_Êag
(
uöt64_t
 
ba£_addr
, uöt64_à
size
, uöt64_à
Êag
, uöt64_à
±e_addªss
)

269 
uöt32_t
 
íåõs
 = 
size
 / 4096;

270 
uöt64_t
 *
íåy
;

271 
i
;

272 
íåy
 = (
uöt64_t
 *Ë
±e_addªss
;

274 
íåy
 +(
ba£_addr
>>12) & 0x7ffffff;

275 
i
=0; i<
íåõs
; i++){

276 
íåy
[
i
] |
Êag
;

278 
	}
}

280 
	$˛ór_íåõs_Êag
(
uöt64_t
 
ba£_addr
, 
uöt32_t
 
size
, uöt64_à
Êag
, uöt64_à
±e_addªss
)

282 
uöt32_t
 
íåõs
 = 
size
 / 4096;

283 
uöt64_t
 *
íåy
;

284 
i
;

285 
íåy
 = (
uöt64_t
 *Ë
±e_addªss
;

286 
íåy
 +(
ba£_addr
>>12) & 0x7ffffff;

288 
i
=0; i<
íåõs
; i++){

289 
íåy
[
i
] &
Êag
;

292 if(
±e_addªss
 =
kî√l_≈t_œ°
){

293 
	`lock_˝rötf
("rip:%lx - %lx,Éxitinfo2:%lx,Éxitinfo1:%lx\n",

294 
¥ivacy_vmcb
->
rù
, 
	`phy_to_machöe
’rivacy_vmcb->rù, 0,Örivacy_vmcb, 0, 
__LINE__
),

295 
¥ivacy_vmcb
->
exôöfo2
,Örivacy_vmcb->
exôöfo1
);

298 
	}
}

300 
	$h™dÀ_idt_öãºu±_öãr˚±s
(
vmcb
 *vmcb)

303 
	`lock_˝rötf
("IDT interrupt,Ñip:%lx,áddr:%lx, faultáddr:%lx, %lx, int:%d,Éxitinfo1:%lx\n",

304 
vmcb
->
rù
, 
	`phy_to_machöe
(vmcb->rù, 0, vmcb, 0, 
__LINE__
),

305 
vmcb
->
exôöfo2
, 
	`lookup
(vmcb->
¸3
), vmcb->
exôöfo
.
ve˘‹
, vmcb->
exôöfo1
);

308 
uöt64_t
 
tmp_r•
 = 
	`phy_to_machöe
(
vmcb
->
r•
, 0, vmcb, 0, 
__LINE__
);

315 if(
vmcb
->
n_¸3
 =
u£r_≈t
 && vmcb->
exôcode
==0x400){

316 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
 & 0xffffffffff000UL, 4096, 1, 
u£r_≈t_œ°
);

318 
vmcb
->
éb_c⁄åﬁ
 = 1;

320 
	`lock_˝rötf
("%s, ```````\n", 
__func__
);

323 
	}
}

328 
uöt64_t
 
	$ã°_Áu…
(
vmcb
 *vmcb, 
uöt64_t
 
addr
)

330 
uöt64_t
 
pml4e
, 
pd≥
, 
pde
=0, 
±e
, 
pgt
, 
¸3
, 
ªt_addr
 = 0;

358  
pde
;

359 
	}
}

361 
numa_node
 
node
[8];

362 
	#ZERO_PAGE_ADDR
 (0x8000000000000000UL | 0x240000000 | 0x7)

	)

366 
	$föd_∑ge_vút1
(
vmcb
 *vmcb, 
uöt64_t
 
addr
)

368 
uöt64_t
 
pml4e
, 
pd≥
, 
pde
, 
±e
, 
pgt
, 
tmp_addr
, 
¸3
;

369 
uöt64_t
 *
pml4e_íåõs
, *
pd≥_íåõs
, *
pde_íåõs
, *
±e_íåõs
;

370 
pml4e_ödex
 = 0, 
pd≥_ödex
 = 0, 
pde_ödex
 = 0, 
±e_ödex
, 
ªt
 = 0;

372 
¸3
 = 
vmcb
->cr3;

373 
pgt
 = (
¸3
 & 0xffffffffff000UL);

374 
pml4e_íåõs
 = (
uöt64_t
 *)
pgt
;

376 if(((
uöt64_t
)
pml4e_íåõs
&0xffffffffff000UL)==(
addr
&0xffffffffff000UL)){

377 
	`lock_˝rötf
("Found:Öml4e_íåõs:%lx\n", 
addr
);

379 
pml4e_ödex
=0;Öml4e_index<512;Öml4e_index++){

380 if(((
pml4e_íåõs
[
pml4e_ödex
] & 0x1)==0)){

383 
pd≥
 = 
pml4e_íåõs
[
pml4e_ödex
] & 0xffffffffff000UL;

384 
pd≥_íåõs
 = (
uöt64_t
 *)
pd≥
;

385 if(((
uöt64_t
)
pd≥_íåõs
&0xffffffffff000UL)==(
addr
&0xffffffffff000UL)){

386 
	`lock_˝rötf
("Found:pdpe_entries ---%lx\n",

387 ((
uöt64_t
)
pml4e_ödex
<<39) + ((pml4e_index & 0x100)==0?0:0xffffUL<<48));

389 
pd≥_ödex
=0;Ödpe_index<512;Ödpe_index++){

390 if(((
pd≥_íåõs
[
pd≥_ödex
] & 0x1)==0)){

393 if((
pd≥_íåõs
[
pd≥_ödex
] & 0x80) != 0){

394 
tmp_addr
 = 
pd≥_íåõs
[
pd≥_ödex
]&0xffffffffff000UL;

395 if(
tmp_addr
<=
addr
 &&áddr<=tmp_addr+1024*1024*1024){

396 
	`lock_˝rötf
("1GÖagêVút:%x.%x --- %lx\n", 
pml4e_ödex
, 
pd≥_ödex
,

397 ((
uöt64_t
)
pml4e_ödex
<<39)+((uöt64_t)
pd≥_ödex
<<30) + ((pml4e_index & 0x100)==0?0:0xffffUL<<48));

402 
pde
 = 
pd≥_íåõs
[
pd≥_ödex
] & 0xffffffffff000UL;

403 
pde_íåõs
 = (
uöt64_t
 *)
pde
;

404 if(((
uöt64_t
)
pde_íåõs
&0xffffffffff000UL)==(
addr
&0xffffffffff000UL)){

405 
	`lock_˝rötf
("Found:pde_entries --- %lx\n",

406 ((
uöt64_t
)
pml4e_ödex
<<39)+((uöt64_t)
pd≥_ödex
<<30) + ((pml4e_index & 0x100)==0?0:0xffffUL<<48));

408 
pde_ödex
=0;Öde_index<512;Öde_index++){

409 if(((
pde_íåõs
[
pde_ödex
] & 0x1)==0)){

412 if((
pde_íåõs
[
pde_ödex
] & 0x80)!=0){

413 
tmp_addr
 = 
pde_íåõs
[
pde_ödex
]&0xffffffffff000UL;

414 if(
tmp_addr
<=
addr
&&addr<=tmp_addr+2*1024*1024){

415 
	`lock_˝rötf
("2MÖagêVút:%x.%x.%x----%lx\n", 
pml4e_ödex
, 
pd≥_ödex
, 
pde_ödex
,

416 ((
uöt64_t
)
pml4e_ödex
<<39)+((uöt64_t)
pd≥_ödex
<<30)+(
pde_ödex
<<21) + ((pml4e_index & 0x100)==0?0:0xffffUL<<48));

421 
±e
 = 
pde_íåõs
[
pde_ödex
] & 0xffffffffff000UL;

422 
±e_íåõs
 = (
uöt64_t
 *)
±e
;

423 if(((
uöt64_t
)
±e_íåõs
&0xffffffffff000UL)==(
addr
&0xffffffffff000UL)){

424 
	`lock_˝rötf
("Found:±e_íåõs:%d.%d.%d, %lx\n", 
pml4e_ödex
,

425 
pd≥_ödex
,
pde_ödex
,

426 ((
uöt64_t
)
pml4e_ödex
<<39)+((uöt64_t)
pd≥_ödex
<<30)+(
pde_ödex
<<21) + ((pml4e_index & 0x100)==0?0:0xffffUL<<48));

429 
±e_ödex
=0;Öte_index<512;Öte_index++){

430 if(((
±e_íåõs
[
±e_ödex
] & 0x1)==0)){

434 
tmp_addr
 = 
±e_íåõs
[
±e_ödex
]&0xffffffffff000UL;

435 if(
tmp_addr
<=
addr
&&addr<tmp_addr+4096){

436 
	`lock_˝rötf
("4KÖage:%x.%x.%x.%x--%lx\n", 
pml4e_ödex
,

437 
pd≥_ödex
, 
pde_ödex
, 
±e_ödex
,

438 ((
uöt64_t
)
pml4e_ödex
<<39)+((uöt64_t)
pd≥_ödex
<<30)+(
pde_ödex
<<21)

439 + (
±e_ödex
<<12Ë+ ((
pml4e_ödex
 & 0x100)==0?0:0xffffUL<<48));

447 
	}
}

450 
	$unmask_u§_mem_ønge
(
vmcb
* vmcb, 
uöt64_t
 
addr_°¨t
, uöt64_à
addr_íd
)

452 
uöt64_t
 
pml4e
, 
pd≥
, 
pde
, 
±e
, 
pgt
;

453 
uöt64_t
 *
pml4e_íåõs
, *
pd≥_íåõs
, *
pde_íåõs
, *
±e_íåõs
;

454 
uöt64_t
 
íd_1
, 
íd_2
, 
íd_3
, 
íd_4
;

455 
uöt64_t
 
pml4e_ödex
 = 0, 
pd≥_ödex
 = 0, 
pde_ödex
 = 0, 
±e_ödex
;

458 
pgt
 = (
vmcb
->
¸3
 & 0xffffffffff000UL);

459 
pml4e_íåõs
 = (
uöt64_t
 *)
pgt
;

461 
íd_1
 = ((
addr_íd
>>39)&0x1ff);

463 
pml4e_ödex
=((
addr_°¨t
>>39)&0x1ff);Öml4e_ödex<=
íd_1
;Öml4e_index++){

464 if(((
pml4e_íåõs
[
pml4e_ödex
] & 0x1)==0)){

467 
pd≥
 = 
pml4e_íåõs
[
pml4e_ödex
] & 0xffffffffff000UL;

468 
pd≥_íåõs
 = (
uöt64_t
 *)
pd≥
;

470 if(
pml4e_ödex
 =
íd_1
)

471 
íd_2
 = (
addr_íd
>>30) & 0x1ff;

473 
íd_2
 = 511;

474 if((
pml4e_ödex
<<39Ë=(
addr_°¨t
&0x1ffUL<<39))

475 
pd≥_ödex
 = (
addr_°¨t
>>30) & 0x1ff;

477 
pd≥_ödex
 = 0;

478 ; 
pd≥_ödex
<=
íd_2
;Ödpe_index++){

479 if(((
pd≥_íåõs
[
pd≥_ödex
] & 0x1)==0)){

482 if((
pd≥_íåõs
[
pd≥_ödex
] & 0x80) != 0){

483 
	`˛ór_íåõs_Êag
(
pd≥_íåõs
[
pd≥_ödex
], 1024*1024*1024,

484 ~1UL, 
u£r_≈t_œ°
);

485 
	`£t_íåõs_Êag
(
pd≥_íåõs
[
pd≥_ödex
], 1024*1024*1024,

486 1, 
kî√l_≈t_œ°
);

487 
tmp_b
 += 1024*1024*1024/4096;

491 
pde
 = 
pd≥_íåõs
[
pd≥_ödex
] & 0xffffffffff000UL;

492 
pde_íåõs
 = (
uöt64_t
 *)
pde
;

493 if(
pml4e_ödex
 =
íd_1
 &&

494 
pd≥_ödex
 =
íd_2
)

495 
íd_3
 = (
addr_íd
>>21)&0x1ff;

497 
íd_3
 = 511;

498 if((
pml4e_ödex
<<39)+(
pd≥_ödex
<<30Ë!(
addr_°¨t
&0x3ffffUL<<30))

499 
pde_ödex
 = 0;

501 
pde_ödex
 = (
addr_°¨t
>>21)&0x1ff;

502 ; 
pde_ödex
<=
íd_3
;Öde_index++){

503 if(((
pde_íåõs
[
pde_ödex
] & 0x1)==0)){

506 if((
pde_íåõs
[
pde_ödex
] & 0x80)!=0){

507 
	`˛ór_íåõs_Êag
(
pde_íåõs
[
pde_ödex
], 2*1024*1024,

508 ~1UL, 
u£r_≈t_œ°
);

509 
	`£t_íåõs_Êag
(
pde_íåõs
[
pde_ödex
], 2*1024*1024,

510 1, 
kî√l_≈t_œ°
);

511 
tmp_b
 += 2*1024*1024/4096;

515 
±e
 = 
pde_íåõs
[
pde_ödex
] & 0xffffffffff000UL;

516 
±e_íåõs
 = (
uöt64_t
 *)
±e
;

517 if(
pml4e_ödex
 =
íd_1
 &&

518 
pd≥_ödex
 =
íd_2
 &&

519 
pde_ödex
 =
íd_3
)

520 
íd_4
 = (
addr_íd
>>12)&0x1ff;

522 
íd_4
 = 511;

523 if((
pml4e_ödex
<<39)+(
pd≥_ödex
<<30)+(
pde_ödex
<<21) !=

524 (
addr_°¨t
&0x7ffffffUL<<21))

525 
±e_ödex
 = 0;

527 
±e_ödex
 = (
addr_°¨t
 >> 12) & 0x1ff;

529 ; 
±e_ödex
<=
íd_4
;Öte_index++){

530 if(((
±e_íåõs
[
±e_ödex
] & 0x1)==0)){

533 
	`˛ór_íåõs_Êag
(
±e_íåõs
[
±e_ödex
], 4096,

534 ~1UL, 
u£r_≈t_œ°
);

535 
	`£t_íåõs_Êag
(
±e_íåõs
[
±e_ödex
], 4096,

536 1, 
kî√l_≈t_œ°
);

537 
tmp_b
 ++;

539 
	`lock_˝rötf
("%d - %lx %lx fªê∑ge\n", 
__LINE__
,

540 (
pml4e_ödex
<<39)+(
pd≥_ödex
<<30)+

541 (
pde_ödex
<<21)+(
±e_ödex
<<12),

542 
±e_íåõs
[
±e_ödex
]);

548 
	}
}

550 
	$unmask_u§_mem_by_¸3
(
vmcb
 *vmcb, 
uöt64_t
 
¸3
)

552 
uöt64_t
 
pml4e
, 
pd≥
, 
pde
, 
±e
, 
pgt
;

553 
uöt64_t
 *
pml4e_íåõs
, *
pd≥_íåõs
, *
pde_íåõs
, *
±e_íåõs
;

554 
pml4e_ödex
 = 0, 
pd≥_ödex
 = 0, 
pde_ödex
 = 0, 
±e_ödex
;

557 if((
vmcb
->
¸0
 & 0x1) == 0){

559 
	`lock_˝rötf
("ªÆ mode:%d\n", 
__LINE__
);

564 if((
vmcb
->
e„r
 & 0x100) ==0){

565 if((
vmcb
->
¸0
 & 0x80000000) == 0){

567 
	`lock_˝rötf
("NoÖaging\n");

571 
pgt
 = (
¸3
 & 0xffffffffff000UL);

572 
pml4e_íåõs
 = (
uöt64_t
 *)
pgt
;

574 
pml4e_ödex
=0;Öml4e_index<256;Öml4e_index++){

575 if(((
pml4e_íåõs
[
pml4e_ödex
] & 0x1)==0)){

578 
pd≥
 = 
pml4e_íåõs
[
pml4e_ödex
] & 0xffffffffff000UL;

579 
pd≥_íåõs
 = (
uöt64_t
 *)
pd≥
;

581 
pd≥_ödex
=0;Ödpe_index<512;Ödpe_index++){

582 if(((
pd≥_íåõs
[
pd≥_ödex
] & 0x1)==0)){

585 if((
pd≥_íåõs
[
pd≥_ödex
] & 0x80) != 0){

586 
	`˛ór_íåõs_Êag
(
pd≥_íåõs
[
pd≥_ödex
], 1024*1024*1024,

587 ~1UL, 
u£r_≈t_œ°
);

588 
	`£t_íåõs_Êag
(
pd≥_íåõs
[
pd≥_ödex
], 1024*1024*1024,

589 1, 
kî√l_≈t_œ°
);

590 
tmp_b
 += 1024*1024*1024/4096;

594 
pde
 = 
pd≥_íåõs
[
pd≥_ödex
] & 0xffffffffff000UL;

595 
pde_íåõs
 = (
uöt64_t
 *)
pde
;

596 
pde_ödex
=0;Öde_index<512;Öde_index++){

597 if(((
pde_íåõs
[
pde_ödex
] & 0x1)==0)){

600 if((
pde_íåõs
[
pde_ödex
] & 0x80)!=0){

601 
	`˛ór_íåõs_Êag
(
pde_íåõs
[
pde_ödex
], 2*1024*1024,

602 ~1UL, 
u£r_≈t_œ°
);

603 
	`£t_íåõs_Êag
(
pde_íåõs
[
pde_ödex
], 2*1024*1024,

604 1, 
kî√l_≈t_œ°
);

605 
tmp_b
 += 2*1024*1024/4096;

609 
±e
 = 
pde_íåõs
[
pde_ödex
] & 0xffffffffff000UL;

610 
±e_íåõs
 = (
uöt64_t
 *)
±e
;

611 
±e_ödex
=0;Öte_index<512;Öte_index++){

612 if(((
±e_íåõs
[
±e_ödex
] & 0x1)==0)){

616 
	`˛ór_íåõs_Êag
(
±e_íåõs
[
±e_ödex
], 4096,

617 ~1UL, 
u£r_≈t_œ°
);

618 
	`£t_íåõs_Êag
(
±e_íåõs
[
±e_ödex
], 4096,

619 1, 
kî√l_≈t_œ°
);

620 
tmp_b
 ++;

625 
vmcb
->
n_¸3
 = 
kî√l_≈t
;

626 
vmcb
->
éb_c⁄åﬁ
 = 1;

627 
	}
}

629 
	$mask_u§_mem_by_¸3
(
vmcb
 *vmcb, 
uöt64_t
 
¸3
)

631 
uöt64_t
 
pd≥
, 
pde
, 
±e
, 
pgt
;

632 
uöt64_t
 *
pml4e_íåõs
, *
pd≥_íåõs
, *
pde_íåõs
, *
±e_íåõs
;

633 
pml4e_ödex
 = 0, 
pd≥_ödex
 = 0, 
pde_ödex
 = 0, 
±e_ödex
;

637 if((
vmcb
->
¸0
 & 0x1) == 0){

639 
	`lock_˝rötf
("Failed, This isÑeal mode\n");

644 if((
vmcb
->
e„r
 & 0x100) ==0){

645 if((
vmcb
->
¸0
 & 0x80000000) == 0){

647 
	`lock_˝rötf
("Failed, GuestÇotÖaging\n");

651 
pgt
 = (
¸3
 & 0xffffffffff000UL);

652 
pml4e_íåõs
 = (
uöt64_t
 *)
pgt
;

654 
pml4e_ödex
=256;Öml4e_index<512;Öml4e_index++){

655 if(((
pml4e_íåõs
[
pml4e_ödex
] & 0x1)==0)){

658 
pd≥
 = 
pml4e_íåõs
[
pml4e_ödex
] & 0xffffffffff000UL;

659 
pd≥_íåõs
 = (
uöt64_t
 *)
pd≥
;

660 
	`£t_íåõs_Êag
(
pd≥
, 4096, 1, 
u£r_≈t_œ°
);

661 
pd≥_ödex
=0;Ödpe_index<512;Ödpe_index++){

662 if(((
pd≥_íåõs
[
pd≥_ödex
] & 0x1)==0)){

666 if((
pd≥_íåõs
[
pd≥_ödex
] & 0x80) != 0){

670 
pde
 = 
pd≥_íåõs
[
pd≥_ödex
] & 0xffffffffff000UL;

671 
pde_íåõs
 = (
uöt64_t
 *)
pde
;

672 
	`£t_íåõs_Êag
(
pde
, 4096, 1, 
u£r_≈t_œ°
);

673 
pde_ödex
=0;Öde_index<512;Öde_index++){

674 if(((
pde_íåõs
[
pde_ödex
] & 0x1)==0)){

678 if((
pde_íåõs
[
pde_ödex
] & 0x80)!=0){

682 
±e
 = 
pde_íåõs
[
pde_ödex
] & 0xffffffffff000UL;

683 
±e_íåõs
 = (
uöt64_t
 *)
±e
;

684 
	`£t_íåõs_Êag
(
±e
, 4096, 1, 
u£r_≈t_œ°
);

690 
	`£t_íåõs_Êag
(
pgt
, 4096, 1, 
u£r_≈t_œ°
);

692 
pml4e_ödex
=0;Öml4e_index<224;Öml4e_index++){

693 if(((
pml4e_íåõs
[
pml4e_ödex
] & 0x1)==0)){

696 
pd≥
 = 
pml4e_íåõs
[
pml4e_ödex
] & 0xffffffffff000UL;

697 
pd≥_íåõs
 = (
uöt64_t
 *)
pd≥
;

698 
	`£t_íåõs_Êag
(
pd≥
, 4096, 1, 
u£r_≈t_œ°
);

700 
pd≥_ödex
=0;Ödpe_index<512;Ödpe_index++){

701 if(((
pd≥_íåõs
[
pd≥_ödex
] & 0x1)==0)){

704 if((
pd≥_íåõs
[
pd≥_ödex
] & 0x80) != 0){

705 
	`˛ór_íåõs_Êag
(
pd≥_íåõs
[
pd≥_ödex
], 1024*1024*1024,

706 ~1UL, 
kî√l_≈t_œ°
);

707 
tmp_a
 += 1024*1024*1024/4096;

708 
	`£t_íåõs_Êag
(
pd≥_íåõs
[
pd≥_ödex
], 1024*1024*1024,

709 1, 
u£r_≈t_œ°
);

713 
pde
 = 
pd≥_íåõs
[
pd≥_ödex
] & 0xffffffffff000UL;

714 
pde_íåõs
 = (
uöt64_t
 *)
pde
;

715 
	`£t_íåõs_Êag
(
pde
, 4096, 1, 
u£r_≈t_œ°
);

716 
pde_ödex
=0;Öde_index<512;Öde_index++){

717 if(((
pde_íåõs
[
pde_ödex
] & 0x1)==0)){

720 if((
pde_íåõs
[
pde_ödex
] & 0x80)!=0){

721 
	`lock_˝rötf
("Thi†i†2MÖagêsize, sèπ:%lx\n", 
pde_íåõs
[
pde_ödex
]);

722 
	`˛ór_íåõs_Êag
(
pde_íåõs
[
pde_ödex
], 2*1024*1024,

723 ~1UL, 
kî√l_≈t_œ°
);

724 
tmp_a
 += 1024*1024*2/4096;

725 
	`£t_íåõs_Êag
(
pde_íåõs
[
pde_ödex
], 2*1024*1024,

726 1, 
u£r_≈t_œ°
);

730 
±e
 = 
pde_íåõs
[
pde_ödex
] & 0xffffffffff000UL;

731 
±e_íåõs
 = (
uöt64_t
 *)
±e
;

732 
	`£t_íåõs_Êag
(
±e
, 4096, 1, 
u£r_≈t_œ°
);

733 
±e_ödex
=0;Öte_index<512;Öte_index++){

734 if(((
±e_íåõs
[
±e_ödex
] & 0x1)==0)){

738 
	`˛ór_íåõs_Êag
(
±e_íåõs
[
±e_ödex
], 4096,

739 ~1UL, 
kî√l_≈t_œ°
);

740 
	`£t_íåõs_Êag
(
±e_íåõs
[
±e_ödex
], 4096,

741 1, 
u£r_≈t_œ°
);

742 
tmp_a
 ++;

748 
pml4e_ödex
=224;Öml4e_index<255;Öml4e_index++){

749 if(((
pml4e_íåõs
[
pml4e_ödex
] & 0x1)==0)){

752 
pd≥
 = 
pml4e_íåõs
[
pml4e_ödex
] & 0xffffffffff000UL;

753 
pd≥_íåõs
 = (
uöt64_t
 *)
pd≥
;

754 
	`£t_íåõs_Êag
(
pd≥
, 4096, 1, 
u£r_≈t_œ°
);

756 
pd≥_ödex
=0;Ödpe_index<512;Ödpe_index++){

757 if(((
pd≥_íåõs
[
pd≥_ödex
] & 0x1)==0)){

760 if((
pd≥_íåõs
[
pd≥_ödex
] & 0x80) != 0){

761 
	`£t_íåõs_Êag
(
pd≥_íåõs
[
pd≥_ödex
], 1024*1024*1024,

762 1, 
u£r_≈t_œ°
);

766 
pde
 = 
pd≥_íåõs
[
pd≥_ödex
] & 0xffffffffff000UL;

767 
pde_íåõs
 = (
uöt64_t
 *)
pde
;

768 
	`£t_íåõs_Êag
(
pde
, 4096, 1, 
u£r_≈t_œ°
);

769 
pde_ödex
=0;Öde_index<512;Öde_index++){

770 if(((
pde_íåõs
[
pde_ödex
] & 0x1)==0)){

773 if((
pde_íåõs
[
pde_ödex
] & 0x80)!=0){

774 
	`£t_íåõs_Êag
(
pde_íåõs
[
pde_ödex
], 2*1024*1024,

775 1, 
u£r_≈t_œ°
);

779 
±e
 = 
pde_íåõs
[
pde_ödex
] & 0xffffffffff000UL;

780 
±e_íåõs
 = (
uöt64_t
 *)
±e
;

781 
	`£t_íåõs_Êag
(
±e
, 4096, 1, 
u£r_≈t_œ°
);

782 
±e_ödex
=0;Öte_index<512;Öte_index++){

783 if(((
±e_íåõs
[
±e_ödex
] & 0x1)==0)){

786 
	`£t_íåõs_Êag
(
±e_íåõs
[
±e_ödex
], 4096,

787 1, 
u£r_≈t_œ°
);

792 
vmcb
->
éb_c⁄åﬁ
 = 1;

793 
	}
}

795 
	g¥ivis‹_íabÀ
 = 0;

798 
	$öãr˚±_¸3_›
(
vmcb
 *vmcb, 
gíîl_ªgs
 *
ªgs
)

800 
	}
}

804 
	$sˇn_os_±
(
vmcb
*vmcb, 
uöt64_t
 
¸3
)

806 
uöt64_t
 
pml4e
, 
pd≥
, 
pde
, 
±e
, 
pgt
;

807 
uöt64_t
 *
pml4e_íåõs
, *
pd≥_íåõs
, *
pde_íåõs
, *
±e_íåõs
;

808 
pml4e_ödex
 = 0, 
pd≥_ödex
 = 0, 
pde_ödex
 = 0, 
±e_ödex
;

810 
tŸÆ
 = 0, 
mm
 = 0;

812 
¸3
 = 
vmcb
->cr3;

813 
pgt
 = (
¸3
 & 0xffffffffff000UL);

814 
pml4e_íåõs
 = (
uöt64_t
 *)
pgt
;

815 ;
pml4e_ödex
<256;Öml4e_index++){

816 if(((
pml4e_íåõs
[
pml4e_ödex
] & 0x1)==0)){

819 
pd≥
 = 
pml4e_íåõs
[
pml4e_ödex
] & 0xffffffffff000UL;

820 
pd≥_íåõs
 = (
uöt64_t
 *)
pd≥
;

821 
pd≥_ödex
=0;Ödpe_index<512;Ödpe_index++){

822 if(((
pd≥_íåõs
[
pd≥_ödex
] & 0x1)==0)){

825 if((
pd≥_íåõs
[
pd≥_ödex
] & 0x80) != 0){

826 
	`lock_˝rötf
("%lx--1G-- ", 
pd≥_íåõs
[
pd≥_ödex
]);

827 
tŸÆ
 += 1024*1024*1024/4096;

831 
pde
 = 
pd≥_íåõs
[
pd≥_ödex
] & 0xffffffffff000UL;

832 
pde_íåõs
 = (
uöt64_t
 *)
pde
;

833 
pde_ödex
=0;Öde_index<512;Öde_index++){

834 if(((
pde_íåõs
[
pde_ödex
] & 0x1)==0)){

837 if((
pde_íåõs
[
pde_ödex
] & 0x80)!=0){

838 
	`lock_˝rötf
("%lx--2M-- ", 
pde_íåõs
[
pde_ödex
]);

839 
tŸÆ
 += 1024*1024*2/4096;

843 
±e
 = 
pde_íåõs
[
pde_ödex
] & 0xffffffffff000UL;

844 
±e_íåõs
 = (
uöt64_t
 *)
±e
;

845 
±e_ödex
=0;Öte_index<512;Öte_index++){

846 if(((
±e_íåõs
[
±e_ödex
] & 0x1)==0)){

849 
tŸÆ
++;

850 if((
	`gë_±e
(
±e_íåõs
[
±e_ödex
], 
u£r_≈t_œ°
)&1)==0||

851 (
	`gë_±e
(
±e_íåõs
[
±e_ödex
], 
kî√l_≈t_œ°
)&1)!=0){

852 
	`lock_˝rötf
("Not in userÇpt:%x.%x.%x.%x--%lx, %lx, K:%lx, U:%lx\n",

853 
pml4e_ödex
, 
pd≥_ödex
,Öd≥_ödex, 
±e_ödex
,

854 ((
uöt64_t
)
pml4e_ödex
<<39)+((uöt64_t)
pd≥_ödex
<<30)+

855 (
pde_ödex
<<21)+(
±e_ödex
<<12), 
±e_íåõs
[pte_index],

856 
	`gë_±e
(
±e_íåõs
[
±e_ödex
], 
kî√l_≈t_œ°
), gë_±e’ã_íåõs[±e_ödex], 
u£r_≈t_œ°
));

857 
	`lock_˝rötf
("%lx---%lx\n", 
kî√l_≈t_œ°
, 
u£r_≈t_œ°
);

858 
mm
++;

864 
	`lock_˝rötf
("IÅŸÆÖages:%x, %x\n", 
tŸÆ
, 
mm
);

865  
mm
;

867 
	}
}

870 
	$°¨t_¥Ÿe˘
(
vmcb
 *vmcb)

872 
uöt64_t
 *
kî√l_°ack
;

873 
uöt64_t
 
tmp
, 
≈t_size
;

874 
pgt_íd
[], 
pml4e
[], 
≈t
[];

875 
uöt64_t
 
gs
;

877 
	`lock_˝rötf
("PrŸe˘ cr3:%lx\n", 
vmcb
->
¸3
);

878 
kî√l_≈t_œ°
 = 
node
[0].
ba£_addr
 +Çode[0].
Àngth
 - 512*1024*1024;

879 
u£r_≈t_œ°
 = 
kî√l_≈t_œ°
 + 
USR_NPT
;

880 
≈t_size
 = (
uöt64_t
Ë
pgt_íd
 - (uöt64_t)
pml4e
;

881 
kî√l_≈t
 = (
uöt64_t
)
≈t
;

882 
u£r_≈t
 = (
uöt64_t
)&
≈t
[
≈t_size
];

884 
	`£t_¥ivacy_≈t
(
vmcb
);

885 
	`ö£π
(
vmcb
->
¸3
);

886 
	`mask_u§_mem_by_¸3
(
vmcb
, vmcb->
¸3
);

888 
tmp
 = 
	`phy_to_machöe
(
	`gë_åam∂öe_addr
(
vmcb
->
¸3
), 0, vmcb, 0, 
__LINE__
);

889 
	`˛ór_íåõs_Êag
(
tmp
, 4096, ~1UL, 
kî√l_≈t_œ°
);

892 
gs
 = 
gos_m§
[
	`œpicid
()];

893 
tmp
 = 
gs
 + 
KERNEL_GS_OFFSET
;

894 
	`lock_˝rötf
("KernelGsbase:%lx, Proc:%d\n",

895 
	`ªad_m§
(0xc0000102), 
	`œpicid
());

896 
gs
 = 
	`ªad_m§
(0xc0000102);

897 
tmp
 = 
gs
 + 
KERNEL_GS_OFFSET
;

898 
kî√l_°ack
 = (
uöt64_t
 *)
	`phy_to_machöe
(
tmp
, 0, 
vmcb
, 0, 
__LINE__
);

899 
	`lock_˝rötf
("Kî√l_°ack:%p, %lx\n", 
kî√l_°ack
, *kernel_stack);

900 
tmp
 = 
	`phy_to_machöe
(*
kî√l_°ack
, 0, 
vmcb
, 0, 
__LINE__
);

901 
	`£t_íåõs_Êag
(
tmp
, 4096, 1, 
u£r_≈t_œ°
);

902 
	`£t_íåõs_Êag
(
tmp
-0x1000, 4096, 1, 
u£r_≈t_œ°
);

903 
	`£t_íåõs_Êag
(
gs
, 0x13000, 1,
u£r_≈t_œ°
);

904 
	`£t_íåõs_Êag
(
gs
-0x40000, 0x13000, 1,
u£r_≈t_œ°
);

906 
	`lock_˝rötf
("Së kî√»°ack:%lx\n", 
tmp
);

908 
tmp
 = 
	`phy_to_machöe
(
IDT_TABLE
, 0, 
vmcb
, 0, 
__LINE__
);

909 
	`£t_íåõs_Êag
(
tmp
, 4096, 1, 
u£r_≈t_œ°
);

910 
tmp
 = 
	`phy_to_machöe
(
NMI_IDT_TABLE
, 0, 
vmcb
, 0, 
__LINE__
);

911 
	`£t_íåõs_Êag
(
tmp
, 4096, 1, 
u£r_≈t_œ°
);

913 
tmp
 = 
	`phy_to_machöe
(0xffffffffff600000UL, 0, 
vmcb
, 0, 
__LINE__
);

914 
	`£t_íåõs_Êag
(
tmp
, 4096, 1, 
u£r_≈t_œ°
);

916 
	`£t_íåõs_Êag
(0x„e00000, 4096, 1, 
u£r_≈t_œ°
);

919 
°¨t_¥ivis‹
 = 1;

922 
	}
}

926 
	$¥ivacy_rw_u£r_mm
(
vmcb
 *vmcb, 
gíîl_ªgs
 *
ªgs
)

929 vﬁ©ûê
uöt64_t
 
Àn
;

930 
uöt64_t
 
øx
;

931 *
rsi
, *
rdi
;

932 
uöt16_t
 *
ös
 =(uöt16_à*)
	`phy_to_machöe
(
vmcb
->
rù
, 0, vmcb, 0, 
__LINE__
);

933 
uöt8_t
 *
tmp
;

939 *
ös
){

941 if(*(
uöt8_t
 *)(
ös
+1) == 0x3d){

942 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 +
ªgs
->
rdi
;

943 
vmcb
->
rù
 += 3;

946 
	`lock_˝rötf
("Unk⁄w 0x148, ins:%x,Ñù:%lx\n", *
ös
, 
vmcb
->
rù
);

950 *(
uöt32_t
 *)
vmcb
->
exôöfo2
 = vmcb->
øx
;

951 
vmcb
->
rù
 += 2;

954 
__asm__
 
	`__vﬁ©ûe
("xchgl %%eax, (%%rbx)\n\t"

955 :"˜"(
vmcb
->
øx
)

956 :"a"(
vmcb
->
øx
), "b"(vmcb->
exôöfo2
)

958 
vmcb
->
rù
 += 2;

961 if(*(
uöt8_t
 *)(
ös
+1) == 0xb){

962 *(
uöt32_t
 *)
vmcb
->
exôöfo2
 = 0x46505845;

963 
vmcb
->
rù
 += 7;

966 
	`lock_˝rötf
("Unk⁄w 0x4c7, ins:%x,Ñù:%lx\n", *
ös
, 
vmcb
->
rù
);

970 
tmp
 =(
uöt8_t
 *)(
ös
+1);

971 *(
uöt8_t
 *)
vmcb
->
exôöfo2
 = *
tmp
;

972 
vmcb
->
rù
 += 3;

975 *(
uöt8_t
 *)
vmcb
->
exôöfo2
 = vmcb->
øx
;

976 
vmcb
->
rù
 += 2;

979 
ªgs
->
rcx
 = *(
uöt8_t
*)
vmcb
->
exôöfo2
;

980 
vmcb
->
rù
 += 2;

983 
ös
++;

984 if(*
ös
 == 0x3ae || *ins == 0xbae){

985 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, 1, 
kî√l_≈t_œ°
);

987 
	`˛ór_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, ~1UL, 
u£r_≈t_œ°
);

992 }if(*
ös
 == 0x27ae){

993 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, 1, 
kî√l_≈t_œ°
);

994 
	`˛ór_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, ~1UL, 
u£r_≈t_œ°
);

997 
	`lock_˝rötf
("Unknow wh©Åÿdÿrù:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1001 *(
uöt32_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
rcx
;

1002 
vmcb
->
rù
 += 2;

1005 
ªgs
->
rdx
 = *(
uöt8_t
*)
vmcb
->
exôöfo2
;

1006 
vmcb
->
rù
 += 2;

1009 if(*(
ös
+1) == 0x85c7){

1010 *(
uöt16_t
 *)
vmcb
->
exôöfo2
 = *(uöt16_à*)(
ös
+4);

1011 
vmcb
->
rù
 += 10;

1014 
	`lock_˝rötf
("Unknow wh©Åÿdÿrù:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1020 
	`lock_˝rötf
("Unknow wh©Åÿdÿrù:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1035 
tmp
 = (
uöt8_t
 *)(
ös
+1);

1036 if(*
tmp
==0xfd){

1037 
ªgs
->
rdx
 = *(
uöt32_t
 *)
vmcb
->
exôöfo2
;

1038 
vmcb
->
rù
+=3;

1041 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1046 
Àn
 = 
ªgs
->
rcx
;

1047 
Àn
 &= 0xffffffff;

1048 
uöt32_t
 
tmp_Àn
;

1049 
uöt64_t
 
tmp_rdi
 = 
ªgs
->
rdi
;

1050 
uöt64_t
 
tmp_rsi
 = 
ªgs
->
rsi
;

1052 
rsi
 = (*)
	`phy_to_machöe
(
tmp_rsi
, 0, 
vmcb
, 0, 
__LINE__
);

1053 
rdi
 = (*)
	`phy_to_machöe
(
tmp_rdi
, 0, 
vmcb
, 0, 
__LINE__
);

1054 if(
rsi
==0 || 
rdi
==0){

1055 
ªgs
->
rsi
 = 
tmp_rsi
;

1056 
ªgs
->
rdi
 = 
tmp_rdi
;

1057 
ªgs
->
rcx
 = 
Àn
;

1058 
	`lock_˝rötf
("ErrorÅransfer\n");

1061 
tmp_Àn
 = ((
uöt64_t
)
rsi
&0xfff)>=((uöt64_t)
rdi
&0xfff)?((uint64_t)rsi&0xfff):((uint64_t)rdi&0xfff);

1062 
tmp_Àn
 = 0x1000 -Åmp_len;

1064 if(
tmp_Àn
>
Àn
)

1065 
tmp_Àn
 = 
Àn
;

1066 
	`mem˝y
(
rdi
, 
rsi
, 
tmp_Àn
);

1067 
Àn
 -
tmp_Àn
;

1068 
tmp_rsi
 +
tmp_Àn
;

1069 
tmp_rdi
 +
tmp_Àn
;

1070 }
Àn
>0);

1071 
ªgs
->
rsi
 = 
tmp_rsi
;

1072 
ªgs
->
rdi
 = 
tmp_rdi
;

1073 
ªgs
->
rcx
 = 0;

1074 
vmcb
->
rù
 += 2;

1077 
tmp
 = (
uöt8_t
 *)(
ös
 + 1);

1078 if(*
tmp
 == 0xa5){

1080 
Àn
 = 
ªgs
->
rcx
;

1081 
Àn
 &= 0xffffffff;

1082 
Àn
 *= 8;

1083 
uöt32_t
 
tmp_Àn
;

1084 
uöt64_t
 
tmp_rdi
 = 
ªgs
->
rdi
;

1085 
uöt64_t
 
tmp_rsi
 = 
ªgs
->
rsi
;

1087 
rsi
 = (*)
	`phy_to_machöe
(
tmp_rsi
, 0, 
vmcb
, 0, 
__LINE__
);

1088 
rdi
 = (*)
	`phy_to_machöe
(
tmp_rdi
, 0, 
vmcb
, 0, 
__LINE__
);

1089 if(
rsi
==0 || 
rdi
==0){

1090 
ªgs
->
rsi
 = 
tmp_rsi
;

1091 
ªgs
->
rdi
 = 
tmp_rdi
;

1092 
ªgs
->
rcx
 = 
Àn
/8;

1094 
	`lock_˝rötf
("errorÅransfer\n");

1097 
tmp_Àn
 = ((
uöt64_t
)
rsi
&0xfff)>=((uöt64_t)
rdi
&0xfff)?((uint64_t)rsi&0xfff):((uint64_t)rdi&0xfff);

1098 
tmp_Àn
 = 0x1000 -Åmp_len;

1099 if(
tmp_Àn
>
Àn
)

1100 
tmp_Àn
 = 
Àn
;

1101 
	`mem˝y
(
rdi
, 
rsi
, 
tmp_Àn
);

1102 
Àn
 -
tmp_Àn
;

1103 
tmp_rsi
 +
tmp_Àn
;

1104 
tmp_rdi
 +
tmp_Àn
;

1105 }
Àn
>0);

1106 
ªgs
->
rsi
 = 
tmp_rsi
;

1107 
ªgs
->
rdi
 = 
tmp_rdi
;

1108 
ªgs
->
rcx
 = 0;

1109 
vmcb
->
rù
 += 3;

1112 }if(*
tmp
 == 0xab){

1113 
Àn
 = 
ªgs
->
rcx
;

1114 
Àn
 &= 0xffffffff;

1115 
__asm__
 
	`__vﬁ©ûe__
("rep stos %%rax, (%%rdi)"

1116 ::"a"(
vmcb
->
øx
), "D"(vmcb->
exôöfo2
), "c"(
Àn
));

1121 
ªgs
->
rcx
 = 0;

1122 
ªgs
->
rdi
 +
Àn
*8;

1123 
vmcb
->
rù
 += 3;

1126 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1130 *(
uöt32_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
rbx
;

1131 
vmcb
->
rù
 += 3;

1134 
ªgs
->
rbp
 = *(
uöt32_t
 *)
vmcb
->
exôöfo2
;

1135 
vmcb
->
rù
 += 3;

1138 
ös
++;

1139 if(*(
uöt8_t
 *)
ös
 == 0x4c){

1140 *(
uöt8_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
r9
;

1141 
vmcb
->
rù
 += 5;

1144 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1148 
tmp
 = (
uöt8_t
 *)(
ös
 + 1);

1149 if(*
tmp
 == 0x7){

1150 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
r8
;

1151 
vmcb
->
rù
 += 3;

1153 }if(*
tmp
 == 0x47){

1154 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
r8
;

1155 
vmcb
->
rù
 += 4;

1158 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1162 
ös
++;

1163 if(*
ös
 == 0x2404){

1164 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
r8
;

1165 
vmcb
->
rù
 += 4;

1167 }if(*(
uöt8_t
 *)
ös
 == 0x85){

1168 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
r8
;

1169 
vmcb
->
rù
 += 7;

1171 }if(*(
uöt8_t
 *)
ös
 == 0xbe){

1172 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
r15
;

1173 
vmcb
->
rù
 += 7;

1175 }if(*(
uöt8_t
 *)
ös
 == 0xbd){

1176 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
r15
;

1177 
vmcb
->
rù
 += 7;

1180 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1185 if(*(
uöt8_t
 *)(
ös
+1)==0x83){

1186 
vmcb
->
øx
 = *(
uöt64_t
 *)vmcb->
exôöfo2
;

1187 
vmcb
->
rù
 += 7;

1189 }if(*(
uöt8_t
 *)(
ös
+1)==0x5){

1190 
vmcb
->
øx
 = *(
uöt64_t
 *)vmcb->
exôöfo2
;

1191 
vmcb
->
rù
 += 7;

1193 }if(*(
uöt8_t
 *)(
ös
+1)==0x43){

1194 
vmcb
->
øx
 = *(
uöt64_t
 *)vmcb->
exôöfo2
;

1195 
vmcb
->
rù
 += 4;

1197 }if(*(
uöt8_t
 *)(
ös
+1)==0x1f){

1198 
ªgs
->
rbx
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1199 
vmcb
->
rù
 += 3;

1201 }if(*(
uöt8_t
 *)(
ös
+1)==0x1d){

1202 
ªgs
->
rbx
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1203 
vmcb
->
rù
 += 7;

1205 }if(*(
uöt8_t
 *)(
ös
+1)==0x50){

1206 
ªgs
->
rdx
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1207 
vmcb
->
rù
 += 4;

1209 }if(*(
uöt8_t
 *)(
ös
+1)==0x15){

1210 
ªgs
->
rdx
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1211 
vmcb
->
rù
 += 7;

1213 }if(*(
uöt8_t
 *)(
ös
+1)==0x93){

1214 
ªgs
->
rdx
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1215 
vmcb
->
rù
 += 7;

1217 }if(*(
uöt8_t
 *)(
ös
+1)==0xbb){

1218 
ªgs
->
rdi
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1219 
vmcb
->
rù
 += 7;

1221 }if(*(
uöt8_t
 *)(
ös
+1)==0x7f){

1222 
ªgs
->
rdi
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1223 
vmcb
->
rù
 += 4;

1225 }if(*(
uöt8_t
 *)(
ös
+1)==0x35){

1226 
ªgs
->
rsi
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1227 
vmcb
->
rù
 += 7;

1230 
	`lock_˝rötf
("Unknow wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1234 
tmp
 = (
uöt8_t
 *)(
ös
+1);

1235 if(*
tmp
==0x6){

1236 
ªgs
->
r8
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1237 
vmcb
->
rù
+=3;

1239 }if(*
tmp
==0x4e){

1240 
ªgs
->
r9
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1241 
vmcb
->
rù
 += 4;

1243 }if(*
tmp
==0xd){

1244 
ªgs
->
r9
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1245 
vmcb
->
rù
 += 7;

1247 }if(*
tmp
 == 0x3d){

1248 
ªgs
->
r15
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1249 
vmcb
->
rù
 += 7;

1251 }if(*
tmp
 == 0xa3){

1252 
ªgs
->
r12
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1253 
vmcb
->
rù
 += 7;

1255 }if(*
tmp
 == 0x56){

1256 
ªgs
->
r10
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1257 
vmcb
->
rù
 += 4;

1259 }if(*
tmp
 == 0x46){

1260 
ªgs
->
r8
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1261 
vmcb
->
rù
 += 4;

1263 }if(*
tmp
 == 0x5e){

1264 
ªgs
->
r11
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1265 
vmcb
->
rù
 += 4;

1267 }if(*
tmp
 == 0x25){

1268 
ªgs
->
r12
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1269 
vmcb
->
rù
 += 7;

1271 }if(*
tmp
 == 4 ){

1272 if((*(
ös
+1)&0x11)==1){

1273 
ªgs
->
r8
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1274 
vmcb
->
rù
 += 8;

1276 
ªgs
->
r8
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1277 
vmcb
->
rù
 += 4;

1281 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1286 
ös
++;

1287 if(*
ös
 == 0x204d){

1288 *(
uöt32_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
rcx
;

1289 
vmcb
->
rù
 += 4;

1293 
ös
++;

1294 if(*(
uöt8_t
 *)
ös
 == 0x47){

1295 *(
uöt32_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
r8
;

1296 
vmcb
->
rù
 += 4;

1299 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1303 
tmp
 = (
uöt8_t
 *)(
ös
+1);

1304 if(*
tmp
==0x1){

1305 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = vmcb->
øx
;

1306 
vmcb
->
rù
+=3;

1308 }if(*
tmp
 == 0x17){

1309 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
rdx
;

1310 
vmcb
->
rù
 += 3;

1312 }if(*
tmp
 == 0x4a){

1313 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
rcx
;

1314 
vmcb
->
rù
 += 4;

1317 
	`lock_˝rötf
("Unk⁄w 0x8948, ins:%x,Ñù:%lx\n", *
ös
, 
vmcb
->
rù
);

1321 if(*(
uöt8_t
 *)(
ös
+1)==0x8d){

1322 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
rcx
;

1323 
vmcb
->
rù
 += 7;

1325 }if(*(
uöt8_t
 *)(
ös
+1)==0x4d){

1326 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
rcx
;

1327 
vmcb
->
rù
 += 4;

1329 }if(*(
uöt8_t
 *)(
ös
+1)==0x45){

1330 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = vmcb->
øx
;

1331 
vmcb
->
rù
 += 4;

1333 }if(*(
uöt8_t
 *)(
ös
+1)==0xbd){

1334 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
rdi
;

1335 
vmcb
->
rù
 += 7;

1338 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x, %x\n", 
vmcb
->
rù
, *
ös
, *(
uöt8_t
 *)(ins+1));

1343 
ös
++;

1344 if(*(
uöt8_t
 *)
ös
 == 0x75){

1345 *(
uöt32_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
rsi
;

1346 
vmcb
->
rù
 += 4;

1350 
tmp
 = (
uöt8_t
 *)(
ös
+1);

1351 if(*
tmp
 == 0x30){

1352 
ªgs
->
rsi
 = *(
uöt8_t
 *)
vmcb
->
exôöfo2
;

1353 
vmcb
->
rù
 += 3;

1356 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo,Ñù:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1360 
ös
++;

1361 
tmp
 = (
uöt8_t
 *)
ös
;

1362 if(*
ös
 == 0x704){

1363 
ªgs
->
r8
 = *(
uöt8_t
 *)
vmcb
->
exôöfo2
;

1364 
vmcb
->
rù
 += 4;

1366 }if(*
tmp
 == 0xe){

1367 
ªgs
->
r9
 = *(
uöt8_t
 *)
vmcb
->
exôöfo2
;

1368 
vmcb
->
rù
 += 3;

1370 }if(*
tmp
 == 0x16){

1371 
ªgs
->
r10
 = *(
uöt8_t
 *)
vmcb
->
exôöfo2
;

1372 
vmcb
->
rù
 += 3;

1374 }if(*
tmp
 == 0x12){

1375 
ªgs
->
r10
 = *(
uöt8_t
 *)
vmcb
->
exôöfo2
;

1376 
vmcb
->
rù
 += 3;

1379 
	`lock_˝rötf
("Unk⁄w 0x8a44,Ñù:%lx\n", 
vmcb
->
rù
);

1383 if(*(
uöt8_t
 *)(
ös
+1)==0x83){

1384 
vmcb
->
øx
 = *(
uöt16_t
 *)vmcb->
exôöfo2
;

1385 
vmcb
->
rù
 += 7;

1388 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo,Ñù:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1399 
vmcb
->
øx
 = *(
uöt8_t
 *)vmcb->
exôöfo2
;

1400 
vmcb
->
rù
 += 2;

1403 
rdi
 = (*)
	`phy_to_machöe
(
ªgs
->rdi, 0, 
vmcb
, 0, 
__LINE__
);

1404 
vmcb
->
øx
 = *(
uöt8_t
 *)vmcb->
exôöfo2
;

1405 *(
uöt8_t
*)
rdi
 = *(uöt8_t*)
vmcb
->
exôöfo2
;

1406 
ªgs
->
rdi
 ++;

1407 
ªgs
->
rsi
 ++;

1408 
vmcb
->
rù
 += 2;

1442 
tmp
 = (
uöt8_t
 *)(
ös
 + 1);

1443 *(
uöt8_t
 *)
vmcb
->
exôöfo2
 = *
tmp
;

1444 
vmcb
->
rù
 += 3;

1447 
tmp
 = (
uöt8_t
 *)(
ös
 + 1);

1448 *(
uöt8_t
 *)
vmcb
->
exôöfo2
 = *
tmp
;

1449 
vmcb
->
rù
 += 3;

1452 *(
uöt8_t
 *)
vmcb
->
exôöfo2
 = vmcb->
øx
 & 0xff;

1453 
vmcb
->
rù
 += 2;

1457 
uöt64_t
 *
tmp
;

1458 
uöt64_t
 
kî√l_ba£
;

1459 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo, i¿kî√»•a˚, cr3:%lx\n", 
vmcb
->
¸3
);

1460 
	`lock_˝rötf
("DIDI -- I¿¥ivacy_rw_u£r_mm Rù:%lx, ins:%x,áddr:%lx\n", 
vmcb
->
rù
, *
ös
, vmcb->
exôöfo2
);

1461 
	`lock_˝rötf
("SèckÖoöãr:%lx,áddr:%lx\n", 
vmcb
->
r•
, 
	`phy_to_machöe
(vmcb->r•, 0, vmcb, 0, 
__LINE__
));

1487 
	}
}

1489 
	$¥ivacy_rw_u£r_mm
(
vmcb
 *vmcb, 
gíîl_ªgs
 *
ªgs
)

1492 vﬁ©ûê
uöt64_t
 
Àn
;

1493 
uöt64_t
 
øx
;

1494 *
rsi
, *
rdi
;

1495 
uöt16_t
 *
ös
 =(uöt16_à*)
	`phy_to_machöe
(
vmcb
->
rù
, 0, vmcb, 0, 
__LINE__
);

1496 
uöt8_t
 *
tmp
;

1502 *
ös
){

1504 *(
uöt32_t
 *)
vmcb
->
exôöfo2
 = vmcb->
øx
;

1505 
vmcb
->
rù
 += 2;

1508 
__asm__
 
	`__vﬁ©ûe
("xchgl %%eax, (%%rbx)\n\t"

1509 :"˜"(
vmcb
->
øx
)

1510 :"a"(
vmcb
->
øx
), "b"(vmcb->
exôöfo2
)

1512 
vmcb
->
rù
 += 2;

1515 
tmp
 =(
uöt8_t
 *)(
ös
+1);

1516 *(
uöt8_t
 *)
vmcb
->
exôöfo2
 = *
tmp
;

1517 
vmcb
->
rù
 += 3;

1520 *(
uöt8_t
 *)
vmcb
->
exôöfo2
 = vmcb->
øx
;

1521 
vmcb
->
rù
 += 2;

1524 
ªgs
->
rcx
 = *(
uöt8_t
*)
vmcb
->
exôöfo2
;

1525 
vmcb
->
rù
 += 2;

1528 
ös
++;

1529 if(*
ös
 == 0x3ae || *ins == 0xbae){

1530 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, 1, 
kî√l_≈t_œ°
);

1531 
fxßve_addr
 = 
vmcb
->
exôöfo2
;

1532 
vmcb
->
rÊags
 |= 0x100;

1533 
vmcb
->
exc_öãr˚±s
 |= 0x2;

1536 
	`lock_˝rötf
("Unknow wh©Åÿdÿrù:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1540 *(
uöt32_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
rcx
;

1541 
vmcb
->
rù
 += 2;

1544 
ªgs
->
rdx
 = *(
uöt8_t
*)
vmcb
->
exôöfo2
;

1545 
vmcb
->
rù
 += 2;

1548 if(*(
ös
+1) == 0x85c7){

1549 *(
uöt16_t
 *)
vmcb
->
exôöfo2
 = *(uöt16_à*)(
ös
+4);

1550 
vmcb
->
rù
 += 10;

1553 
	`lock_˝rötf
("Unknow wh©Åÿdÿrù:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1559 if(*(
uöt32_t
 *)(
ös
+1) == 0x10246c89){

1560 *(
uöt16_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
r13
 & 0xffff;

1561 
vmcb
->
rù
 += 6;

1563 }if(*(
ös
+1) == 0x8589){

1564 *(
uöt16_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
r8
;

1565 
vmcb
->
rù
 += 8;

1568 
	`lock_˝rötf
("Unknow wh©Åÿdÿrù:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1572 
tmp
 = (
uöt8_t
 *)(
ös
+1);

1573 if(*
tmp
==0xfd){

1574 
ªgs
->
rdx
 = *(
uöt32_t
 *)
vmcb
->
exôöfo2
;

1575 
vmcb
->
rù
+=3;

1578 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1583 
Àn
 = 
ªgs
->
rcx
;

1584 
Àn
 &= 0xffffffff;

1585 
uöt32_t
 
tmp_Àn
;

1586 
uöt64_t
 
tmp_rdi
 = 
ªgs
->
rdi
;

1587 
uöt64_t
 
tmp_rsi
 = 
ªgs
->
rsi
;

1589 
rsi
 = (*)
	`phy_to_machöe
(
tmp_rsi
, 0, 
vmcb
, 0, 
__LINE__
);

1590 
rdi
 = (*)
	`phy_to_machöe
(
tmp_rdi
, 0, 
vmcb
, 0, 
__LINE__
);

1591 if(
rsi
==0 || 
rdi
==0){

1592 
ªgs
->
rsi
 = 
tmp_rsi
;

1593 
ªgs
->
rdi
 = 
tmp_rdi
;

1594 
ªgs
->
rcx
 = 
Àn
;

1595 
	`lock_˝rötf
("ErrorÅransfer\n");

1598 
tmp_Àn
 = ((
uöt64_t
)
rsi
&0xfff)>=((uöt64_t)
rdi
&0xfff)?((uint64_t)rsi&0xfff):((uint64_t)rdi&0xfff);

1599 
tmp_Àn
 = 0x1000 -Åmp_len;

1601 if(
tmp_Àn
>
Àn
)

1602 
tmp_Àn
 = 
Àn
;

1603 
	`mem˝y
(
rdi
, 
rsi
, 
tmp_Àn
);

1604 
Àn
 -
tmp_Àn
;

1605 
tmp_rsi
 +
tmp_Àn
;

1606 
tmp_rdi
 +
tmp_Àn
;

1607 }
Àn
>0);

1608 
ªgs
->
rsi
 = 
tmp_rsi
;

1609 
ªgs
->
rdi
 = 
tmp_rdi
;

1610 
ªgs
->
rcx
 = 0;

1611 
vmcb
->
rù
 += 2;

1614 
tmp
 = (
uöt8_t
 *)(
ös
 + 1);

1615 if(*
tmp
 == 0xa5){

1617 
Àn
 = 
ªgs
->
rcx
;

1618 
Àn
 &= 0xffffffff;

1619 
Àn
 *= 8;

1620 
uöt32_t
 
tmp_Àn
;

1621 
uöt64_t
 
tmp_rdi
 = 
ªgs
->
rdi
;

1622 
uöt64_t
 
tmp_rsi
 = 
ªgs
->
rsi
;

1624 
rsi
 = (*)
	`phy_to_machöe
(
tmp_rsi
, 0, 
vmcb
, 0, 
__LINE__
);

1625 
rdi
 = (*)
	`phy_to_machöe
(
tmp_rdi
, 0, 
vmcb
, 0, 
__LINE__
);

1626 if(
rsi
==0 || 
rdi
==0){

1627 
ªgs
->
rsi
 = 
tmp_rsi
;

1628 
ªgs
->
rdi
 = 
tmp_rdi
;

1629 
ªgs
->
rcx
 = 
Àn
/8;

1631 
	`lock_˝rötf
("errorÅransfer\n");

1634 
tmp_Àn
 = ((
uöt64_t
)
rsi
&0xfff)>=((uöt64_t)
rdi
&0xfff)?((uint64_t)rsi&0xfff):((uint64_t)rdi&0xfff);

1635 
tmp_Àn
 = 0x1000 -Åmp_len;

1636 if(
tmp_Àn
>
Àn
)

1637 
tmp_Àn
 = 
Àn
;

1638 
	`mem˝y
(
rdi
, 
rsi
, 
tmp_Àn
);

1639 
Àn
 -
tmp_Àn
;

1640 
tmp_rsi
 +
tmp_Àn
;

1641 
tmp_rdi
 +
tmp_Àn
;

1642 }
Àn
>0);

1643 
ªgs
->
rsi
 = 
tmp_rsi
;

1644 
ªgs
->
rdi
 = 
tmp_rdi
;

1645 
ªgs
->
rcx
 = 0;

1646 
vmcb
->
rù
 += 3;

1649 }if(*
tmp
 == 0xab){

1650 
Àn
 = 
ªgs
->
rcx
;

1651 
Àn
 &= 0xffffffff;

1652 
__asm__
 
	`__vﬁ©ûe__
("rep stos %%rax, (%%rdi)"

1653 ::"a"(
vmcb
->
øx
), "D"(vmcb->
exôöfo2
), "c"(
Àn
));

1658 
ªgs
->
rcx
 = 0;

1659 
ªgs
->
rdi
 +
Àn
*8;

1660 
vmcb
->
rù
 += 3;

1663 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1667 
ªgs
->
rbp
 = *(
uöt32_t
 *)
vmcb
->
exôöfo2
;

1668 
vmcb
->
rù
 += 3;

1671 
ös
++;

1672 if(*(
uöt8_t
 *)
ös
 == 0x4c){

1673 *(
uöt8_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
r9
;

1674 
vmcb
->
rù
 += 5;

1677 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1681 
tmp
 = (
uöt8_t
 *)(
ös
 + 1);

1682 if(*
tmp
 == 0x7){

1683 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
r8
;

1684 
vmcb
->
rù
 += 3;

1686 }if(*
tmp
 == 0x47){

1687 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
r8
;

1688 
vmcb
->
rù
 += 4;

1691 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1695 
ös
++;

1696 if(*
ös
 == 0x2404){

1697 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
r8
;

1698 
vmcb
->
rù
 += 4;

1700 }if(*(
uöt8_t
 *)
ös
 == 0x85){

1701 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
r8
;

1702 
vmcb
->
rù
 += 7;

1704 }if(*(
uöt8_t
 *)
ös
 == 0xbe){

1705 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
r15
;

1706 
vmcb
->
rù
 += 7;

1708 }if(*(
uöt8_t
 *)
ös
 == 0xbd){

1709 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
r15
;

1710 
vmcb
->
rù
 += 7;

1713 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1718 if(*(
uöt8_t
 *)(
ös
+1)==0x83){

1719 
vmcb
->
øx
 = *(
uöt64_t
 *)vmcb->
exôöfo2
;

1720 
vmcb
->
rù
 += 7;

1722 }if(*(
uöt8_t
 *)(
ös
+1)==0x43){

1723 
vmcb
->
øx
 = *(
uöt64_t
 *)vmcb->
exôöfo2
;

1724 
vmcb
->
rù
 += 4;

1726 }if(*(
uöt8_t
 *)(
ös
+1)==0x1f){

1727 
ªgs
->
rbx
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1728 
vmcb
->
rù
 += 3;

1730 }if(*(
uöt8_t
 *)(
ös
+1)==0x50){

1731 
ªgs
->
rdx
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1732 
vmcb
->
rù
 += 4;

1734 }if(*(
uöt8_t
 *)(
ös
+1)==0x93){

1735 
ªgs
->
rdx
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1736 
vmcb
->
rù
 += 7;

1738 }if(*(
uöt8_t
 *)(
ös
+1)==0xbb){

1739 
ªgs
->
rdi
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1740 
vmcb
->
rù
 += 7;

1742 }if(*(
uöt8_t
 *)(
ös
+1)==0x7f){

1743 
ªgs
->
rdi
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1744 
vmcb
->
rù
 += 4;

1747 
	`lock_˝rötf
("Unknow wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1751 
tmp
 = (
uöt8_t
 *)(
ös
+1);

1752 if(*
tmp
==0x6){

1753 
ªgs
->
r8
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1754 
vmcb
->
rù
+=3;

1756 }if(*
tmp
==0x4e){

1757 
ªgs
->
r9
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1758 
vmcb
->
rù
 += 4;

1760 }if(*
tmp
 == 0xa3){

1761 
ªgs
->
r12
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1762 
vmcb
->
rù
 += 7;

1764 }if(*
tmp
 == 0x56){

1765 
ªgs
->
r10
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1766 
vmcb
->
rù
 += 4;

1768 }if(*
tmp
 == 0x46){

1769 
ªgs
->
r8
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1770 
vmcb
->
rù
 += 4;

1772 }if(*
tmp
 == 0x5e){

1773 
ªgs
->
r11
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1774 
vmcb
->
rù
 += 4;

1776 }if(*
tmp
 == 4){

1777 if((*(
tmp
+1)&7)==5){

1778 
ªgs
->
r8
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1779 
vmcb
->
rù
 += 8;

1782 
ªgs
->
r8
 = *(
uöt64_t
 *)
vmcb
->
exôöfo2
;

1783 
vmcb
->
rù
 += 4;

1787 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1792 
ös
++;

1793 if(*
ös
 == 0x204d){

1794 *(
uöt32_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
rcx
;

1795 
vmcb
->
rù
 += 4;

1799 
ös
++;

1800 if(*(
uöt8_t
 *)
ös
 == 0x47){

1801 *(
uöt32_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
r8
;

1802 
vmcb
->
rù
 += 4;

1805 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1809 
tmp
 = (
uöt8_t
 *)(
ös
+1);

1810 if(*
tmp
==0x1){

1811 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = vmcb->
øx
;

1812 
vmcb
->
rù
+=3;

1814 }if(*
tmp
 == 0x4a){

1815 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
rcx
;

1816 
vmcb
->
rù
 += 4;

1819 
	`lock_˝rötf
("Unk⁄w 0x8948, ins:%x,Ñù:%lx\n", *
ös
, 
vmcb
->
rù
);

1823 if(*(
uöt8_t
 *)(
ös
+1)==0x8d){

1824 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
rcx
;

1825 
vmcb
->
rù
 += 7;

1827 }if(*(
uöt8_t
 *)(
ös
+1)==0x4d){

1828 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
rcx
;

1829 
vmcb
->
rù
 += 4;

1831 }if(*(
uöt8_t
 *)(
ös
+1)==0x45){

1832 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = vmcb->
øx
;

1833 
vmcb
->
rù
 += 4;

1835 }if(*(
uöt8_t
 *)(
ös
+1)==0xbd){

1836 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
rdi
;

1837 
vmcb
->
rù
 += 7;

1840 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x, %x\n", 
vmcb
->
rù
, *
ös
, *(
uöt8_t
 *)(ins+1));

1845 
ös
++;

1846 if(*(
uöt8_t
 *)
ös
 == 0x75){

1847 *(
uöt32_t
 *)
vmcb
->
exôöfo2
 = 
ªgs
->
rsi
;

1848 
vmcb
->
rù
 += 4;

1852 
tmp
 = (
uöt8_t
 *)(
ös
+1);

1853 if(*
tmp
 == 0x30){

1854 
ªgs
->
rsi
 = *(
uöt8_t
 *)
vmcb
->
exôöfo2
;

1855 
vmcb
->
rù
 += 3;

1858 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo,Ñù:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1862 
ös
++;

1863 
tmp
 = (
uöt8_t
 *)
ös
;

1864 if(*
ös
 == 0x704){

1865 
ªgs
->
r8
 = *(
uöt8_t
 *)
vmcb
->
exôöfo2
;

1866 
vmcb
->
rù
 += 4;

1868 }if(*
tmp
 == 0xe){

1869 
ªgs
->
r9
 = *(
uöt8_t
 *)
vmcb
->
exôöfo2
;

1870 
vmcb
->
rù
 += 3;

1872 }if(*
tmp
 == 0x16){

1873 
ªgs
->
r10
 = *(
uöt8_t
 *)
vmcb
->
exôöfo2
;

1874 
vmcb
->
rù
 += 3;

1877 
	`lock_˝rötf
("Unk⁄w 0x8a44,Ñù:%lx\n", 
vmcb
->
rù
);

1881 if(*(
uöt8_t
 *)(
ös
+1)==0x83){

1882 
vmcb
->
øx
 = *(
uöt16_t
 *)vmcb->
exôöfo2
;

1883 
vmcb
->
rù
 += 7;

1886 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo,Ñù:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1891 if(*(
uöt32_t
 *)(
ös
+1) == 0x122c44){

1892 *(
uöt8_t
 *)
vmcb
->
exôöfo2
 = 0;

1893 
vmcb
->
rù
 += 6;

1897 
vmcb
->
øx
 = *(
uöt8_t
 *)vmcb->
exôöfo2
;

1898 
vmcb
->
rù
 += 2;

1901 
rdi
 = (*)
	`phy_to_machöe
(
ªgs
->rdi, 0, 
vmcb
, 0, 
__LINE__
);

1902 
vmcb
->
øx
 = *(
uöt8_t
 *)vmcb->
exôöfo2
;

1903 *(
uöt8_t
*)
rdi
 = *(uöt8_t*)
vmcb
->
exôöfo2
;

1904 
ªgs
->
rdi
 ++;

1905 
ªgs
->
rsi
 ++;

1906 
vmcb
->
rù
 += 2;

1909 
ös
++;

1910 if(*
ös
 == 0x845){

1911 if(*(
uöt32_t
 *)(
ös
+1)==1){

1912 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 1;

1913 
vmcb
->
rù
 += 8;

1915 }if(*(
uöt32_t
 *)(
ös
+1)==0){

1916 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 0;

1917 
vmcb
->
rù
 += 8;

1920 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1924 }if(*
ös
 == 0x1045){

1925 if(*(
uöt32_t
 *)(
ös
+1)==0){

1926 *(
uöt64_t
 *)
vmcb
->
exôöfo2
 = 0;

1927 
vmcb
->
rù
 += 8;

1930 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1935 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo: ip:%lx, ins:%x\n", 
vmcb
->
rù
, *
ös
);

1940 
tmp
 = (
uöt8_t
 *)(
ös
 + 1);

1941 *(
uöt8_t
 *)
vmcb
->
exôöfo2
 = *
tmp
;

1942 
vmcb
->
rù
 += 3;

1945 
tmp
 = (
uöt8_t
 *)(
ös
 + 1);

1946 *(
uöt8_t
 *)
vmcb
->
exôöfo2
 = *
tmp
;

1947 
vmcb
->
rù
 += 3;

1961 
uöt64_t
 *
tmp
;

1962 
uöt64_t
 
kî√l_ba£
;

1963 
	`lock_˝rötf
("Unk⁄w wh©Åÿdo, i¿kî√»•a˚, cr3:%lx\n", 
vmcb
->
¸3
);

1964 
	`lock_˝rötf
("DIDI -- I¿¥ivacy_rw_u£r_mm Rù:%lx, ins:%x,áddr:%lx\n", 
vmcb
->
rù
, *
ös
, vmcb->
exôöfo2
);

1965 
	`lock_˝rötf
("StackÖointer:%lx,áddr:%lx,Üine:%d\n",

1966 
vmcb
->
r•
, 
	`phy_to_machöe
(vmcb->r•, 0, vmcb, 0, 
__LINE__
), __LINE__);

1973 
kî√l_ba£
 = 
	`ªad_m§
(0xc0000102);

1974 
	`lock_˝rötf
("\nGS:%lx, Kî∆ba£:%lx\n", 
gos_m§
[
	`œpicid
()],
kî√l_ba£
);

1975 if(
kî√l_ba£
 != 0){

1976 
tmp
 = (
uöt64_t
 *)
	`phy_to_machöe
(
kî√l_ba£
+
KERNEL_GS_OFFSET
, 0, 
vmcb
, 0, 
__LINE__
);

1977 if((
uöt64_t
)
tmp
!=
KERNEL_GS_OFFSET
){

1978 
	`lock_˝rötf
("Ba£ sèck:%lx\n", *
tmp
);

1982 
	`lock_˝rötf
("Bef‹êföd_∑ge_vút1, %d\n", 
__LINE__
);

1983 
	`föd_∑ge_vút1
(
vmcb
, vmcb->
exôöfo2
);

1984 
	`lock_˝rötf
("rip:%lx-%lx,áddress:%lx,Öte:K%lx-U%lx\n",

1985 
vmcb
->
rù
, 
	`phy_to_machöe
(vmcb->rù, 0, vmcb, 0, 
__LINE__
), vmcb->
exôöfo2
,

1986 
	`gë_±e
(
vmcb
->
exôöfo2
, 
kî√l_≈t_œ°
), gë_±e(vmcb->exôöfo2, 
u£r_≈t_œ°
));

1992 
vmcb
->
éb_c⁄åﬁ
 = 0;

1993 
	}
}

1997 
	$≈t_Áu…_h™dÀ
(
vmcb
 *vmcb, 
gíîl_ªgs
 *
ªgs
)

2002 if((
vmcb
->
exôöfo1
&0x10) != 0){

2003 if(
vmcb
->
rù
>0x7fffffffffffUL && vmcb->
n_¸3
==
u£r_≈t
){

2005 
uöt16_t
 *
ªt_addr
 = 
NULL
;

2006 if(
vmcb
->
rù
 =
SYSTEM_CALL
){

2007 
	`∑r£_gue°_sysˇŒ
(
¥ivacy_vmcb
, 
ªgs
, 0);

2008 }if(
vmcb
->
rù
 =
PAGE_FAULT
){

2010 
	`∑r£_gue°_sysˇŒ
(
¥ivacy_vmcb
, 
ªgs
, 3);

2011 }if(
vmcb
->
rù
 =
GENERAL_PROTECTION
){

2013 
	`∑r£_gue°_sysˇŒ
(
¥ivacy_vmcb
, 
ªgs
, 1);

2015 if(
vmcb
->
rù
 =
DEV_NOT_AVAILABLE
 ||

2016 (
vmcb
->
rù
 >
IRQ_ENTRIES_START
 && vmcb->rù<
IRQ_ENTRIES_END
) ||

2017 
vmcb
->
rù
 =
APIC_TIMER
 ||

2018 
vmcb
->
rù
 =
INVALID_OP
 ||

2019 
vmcb
->
rù
 =
NMI_INTR


2021 
	`∑r£_gue°_sysˇŒ
(
¥ivacy_vmcb
, 
ªgs
, 2);

2023 
	`lock_˝rötf
("VMCB->rù:%lx\n", 
vmcb
->
rù
);

2026 
vmcb
->
n_¸3
 = 
kî√l_≈t
;

2027 
≈t_out
;

2028 }if(
vmcb
->
rù
<=0x7fffffffffffUL && vmcb->
n_¸3
==
kî√l_≈t
){

2030 if(
	`lookup
(
vmcb
->
¸3
)!= -1){

2031 if(
vmcb
->
rù
 =
	`gë_åam∂öe_addr
(vmcb->
¸3
)){

2032 
vmcb
->
n_¸3
 = 
u£r_≈t
;

2033 
vmcb
->
rù
 = 
sys_ªt_addr
;

2035 
	`lock_˝rötf
("Return from kernelÅo user space\n");

2036 
	`lock_˝rötf
("Addªss:%lx,Éxôöfo2:%lx", 
vmcb
->
rù
, vmcb->
exôöfo2
);

2040 
≈t_out
;

2042 
	`lock_˝rötf
("New Proc:%d, %lx,Ñip:%lx, %lx,Éxit1:%lx,Éxit2:%lx\n",

2043 
	`œpicid
(), 
vmcb
->
¸3
, vmcb->
rù
,

2044 
	`phy_to_machöe
(
vmcb
->
rù
, 0, vmcb, 0, 
__LINE__
),

2045 
vmcb
->
exôöfo1
,

2046 
vmcb
->
exôöfo2
);

2049 }if(
vmcb
->
rù
<=0x7fffffffffffUL){

2050 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, 3, 
u£r_≈t_œ°
);

2051 if(
vmcb
->
rù
<0x7f0000000000UL){

2052 
	`˛ór_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, ~1UL, 
kî√l_≈t_œ°
);

2053 
tmp_a
++;

2054 
vmcb
->
éb_c⁄åﬁ
 = 1;

2057 
	`lock_˝rötf
("KernelÉxecute NPT fault\n");

2061 if(
vmcb
->
rù
>0x7fffffffffffUL){

2062 if(
	`lookup
(
vmcb
->
¸3
)!= -1){

2063 if((
vmcb
->
exôöfo1
>>32)==1){

2064 
	`¥ivacy_rw_u£r_mm
(
vmcb
, 
ªgs
);

2066 
	`lock_˝rötf
("KernelÖage,Éxitinfo1:%lx, info2:%lx\n",

2067 
vmcb
->
exôöfo1
, vmcb->
exôöfo2
);

2068 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, 1, 
u£r_≈t_œ°
);

2071 
	`lock_˝rötf
("Löe:%d\t\t", 
__LINE__
);

2072 
	`≈t_åavñ
(
vmcb
->
exôöfo2
, vmcb->
n_¸3
);

2074 
	`föd_∑ge_vút1
(
vmcb
, vmcb->
exôöfo2
);

2075 
	`lock_˝rötf
("rip:%lx, CR2:%lx,Éxitinfo2:%lx\n",

2076 
vmcb
->
rù
, vmcb->
¸2
, vmcb->
exôöfo2
);

2077 
vmcb
->
rù
 = 0xffffffff81415f99UL;

2082 if((
vmcb
->
exôöfo1
&2)==0){

2083 
	`˛ór_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, ~2UL, 
u£r_≈t_œ°
);

2084 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, 1, 
u£r_≈t_œ°
);

2086 if((
vmcb
->
exôöfo1
>>32)==1){

2092 
	`˛ór_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, ~1UL, 
kî√l_≈t_œ°
);

2093 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, 3, 
u£r_≈t_œ°
);

2094 
tmp_a
++;

2095 
vmcb
->
éb_c⁄åﬁ
 = 1;

2097 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, 1, 
u£r_≈t_œ°
);

2102 
≈t_out
:

2103 
vmcb
->
éb_c⁄åﬁ
 = 1;

2106 
	}
}

2109 
	$≈t_Áu…_h™dÀ
(
vmcb
 *vmcb, 
gíîl_ªgs
 *
ªgs
)

2112 if(
vmcb
->
rù
>0x7fffffffffffUL && vmcb->
n_¸3
==
u£r_≈t
){

2114 
uöt16_t
 *
ªt_addr
 = 
NULL
;

2115 if(
vmcb
->
rù
 == 0xffffffff8141ae10UL){

2116 
	`∑r£_gue°_sysˇŒ
(
¥ivacy_vmcb
, 
ªgs
, 0);

2117 }if(
vmcb
->
rù
 == 0xffffffff8141a630UL ||

2118 
vmcb
->
rù
 == 0xffffffff8141a600UL

2134 
	`∑r£_gue°_sysˇŒ
(
¥ivacy_vmcb
, 
ªgs
, 1);

2135 }if(
vmcb
->
rù
 == 0xffffffff8141c000UL ||

2136 (
vmcb
->
rù
 >= 0xffffffff8141b500UL && vmcb->rip<=0xffffffff8141b8f8UL) ||

2137 
vmcb
->
rù
 == 0xffffffff8141ba00

2139 
	`∑r£_gue°_sysˇŒ
(
¥ivacy_vmcb
, 
ªgs
, 2);

2141 
	`lock_˝rötf
("VMCB->rù:%lx\n", 
vmcb
->
rù
);

2144 
vmcb
->
n_¸3
 = 
kî√l_≈t
;

2145 
≈t_out
;

2146 }if(
vmcb
->
rù
<=0x7fffffffffffUL && vmcb->
n_¸3
==
kî√l_≈t
){

2148 if(
	`lookup
(
vmcb
->
¸3
)!= -1){

2149 
	`lock_˝rötf
("Return from kernelÅo user space\n");

2150 
	`lock_˝rötf
("Addªss:%lx,Éxôöfo2:%lx", 
vmcb
->
rù
, vmcb->
exôöfo2
);

2153 
vmcb
->
n_¸3
 = 
u£r_≈t
;

2154 
≈t_out
;

2155 }if((
vmcb
->
exôöfo1
 & 0x10)!=0){

2160 
vmcb
->
n_¸3
 = 
u£r_≈t
;

2161 
	`lock_˝rötf
("New Proc:%d, %lx,Ñip:%lx, %lx,Éxit1:%lx,Éxit2:%lx\n",

2162 
	`œpicid
(), 
vmcb
->
¸3
, vmcb->
rù
,

2163 
	`phy_to_machöe1
(
vmcb
->
rù
, 0, vmcb->
¸3
, 0, 
__LINE__
),

2164 
vmcb
->
exôöfo1
,

2165 
vmcb
->
exôöfo2
);

2167 
	`ö£π
(
vmcb
->
¸3
);

2169 
uöt64_t
 
gs
, 
tmp
;

2170 
uöt64_t
 *
kî√l_°ack
;

2171 
	`mask_u§_mem_by_¸3
(
vmcb
, vmcb->
¸3
);

2173 
gs
 = 
gos_m§
[
	`œpicid
()];

2174 
tmp
 = 
gs
 + 
KERNEL_GS_OFFSET
;

2175 
gs
 = 
	`ªad_m§
(0xc0000102);

2176 
tmp
 = 
gs
 + 
KERNEL_GS_OFFSET
;

2177 
kî√l_°ack
 = (
uöt64_t
 *)
	`phy_to_machöe
(
tmp
, 0, 
vmcb
, 0, 
__LINE__
);

2178 
tmp
 = 
	`phy_to_machöe
(*
kî√l_°ack
, 0, 
vmcb
, 0, 
__LINE__
);

2179 
	`£t_íåõs_Êag
(
tmp
, 4096, 1, 
u£r_≈t_œ°
);

2180 
	`£t_íåõs_Êag
(
tmp
-0x1000, 4096, 1, 
u£r_≈t_œ°
);

2181 
	`£t_íåõs_Êag
(
gs
, 0x13000, 1, 
u£r_≈t_œ°
);

2182 
	`£t_íåõs_Êag
(
gs
-0x40000, 0x13000, 1,
u£r_≈t_œ°
);

2184 
tmp
 = 
	`phy_to_machöe
(
IDT_TABLE
, 0, 
vmcb
, 0, 
__LINE__
);

2185 
	`£t_íåõs_Êag
(
tmp
, 4096, 1, 
u£r_≈t_œ°
);

2186 
tmp
 = 
	`phy_to_machöe
(
NMI_IDT_TABLE
, 0, 
vmcb
, 0, 
__LINE__
);

2187 
	`£t_íåõs_Êag
(
tmp
, 4096, 1, 
u£r_≈t_œ°
);

2188 
tmp
 = 
	`phy_to_machöe
(0xffffffffff600000UL, 0, 
vmcb
, 0, 
__LINE__
);

2189 
	`£t_íåõs_Êag
(
tmp
, 4096, 1, 
u£r_≈t_œ°
);

2190 
	`£t_íåõs_Êag
(0x„e00000, 4096, 1, 
u£r_≈t_œ°
);

2191 
vmcb
->
éb_c⁄åﬁ
 = 1;

2192 
	`ùi_óch_nŸ_£lf
(0);

2198 if(
vmcb
->
rù
 > 0x7f0000000000UL && (vmcb->
exôöfo1
 & 2) == 0){

2199 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, 1, 
kî√l_≈t_œ°
);

2201 
	`dump_îr‹_öfo
(
vmcb
, 
ªgs
, 
__LINE__
);

2204 if(
vmcb
->
rù
>0x7fffffffffffUL){

2206 if(
	`lookup
(
vmcb
->
¸3
)!= -1){

2207 
	`¥ivacy_rw_u£r_mm
(
vmcb
, 
ªgs
);

2210 if(
vmcb
->
rù
 == 0xffffffff8119bfe5UL||

2211 
vmcb
->
rù
 == 0xffffffff8119d3cdUL){

2218 
	`¥ivacy_rw_u£r_mm
(
vmcb
, 
ªgs
);

2219 
	`˛ór_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, ~1UL, 
kî√l_≈t_œ°
);

2220 
vmcb
->
éb_c⁄åﬁ
 = 1;

2221 
	`˛ór_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, ~0x8000000000000000UL, 
u£r_≈t_œ°
);

2222 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, 1, 
u£r_≈t_œ°
);

2233 
	`lock_˝rötf
("Löe:%d\t\t", 
__LINE__
);

2236 
	`föd_∑ge_vút1
(
vmcb
, vmcb->
exôöfo2
);

2237 
	`lock_˝rötf
("rù:%lx, CR2:%lx\n", 
vmcb
->
rù
, vmcb->
¸2
);

2238 
vmcb
->
rù
 = 0xffffffff81415f99UL;

2245 if(
	`lookup
(
vmcb
->
¸3
)!=-1){

2252 if((
vmcb
->
exôöfo1
>>32)==1 &&

2253 !((
vmcb
->
exôöfo1
 & 0x10)!=0 && vmcb->
rù
>0x7f0000000000UL)){

2254 if((
vmcb
->
exôöfo1
 & 2) == 0){

2255 
	`˛ór_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, ~2UL, 
u£r_≈t_œ°
);

2256 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, 1, 
u£r_≈t_œ°
);

2258 
	`˛ór_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, ~1UL, 
kî√l_≈t_œ°
);

2259 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, 3, 
u£r_≈t_œ°
);

2260 if((
vmcb
->
exôöfo2
 & ~0xfffË=(
å≠_phy
 & ~0xfff)){

2261 
	`lock_˝rötf
("NPT fault isÅrampline,Éxitinfo1:%lx\n",

2262 
vmcb
->
exôöfo1
);

2265 
tmp_a
++;

2266 
vmcb
->
éb_c⁄åﬁ
 = 1;

2273 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, 1, 
u£r_≈t_œ°
);

2275 if((
vmcb
->
exôöfo1
&2)==0){

2276 if((
vmcb
->
exôöfo1
>>32)==1){

2277 if((
vmcb
->
exôöfo1
&0x10)==0x10 && vmcb->
rù
<0x7f0000000000UL){

2278 
	`˛ór_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, ~1UL, 
kî√l_≈t_œ°
);

2279 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, 3, 
u£r_≈t_œ°
);

2280 
tmp_a
++;

2281 
vmcb
->
éb_c⁄åﬁ
 = 1;

2283 
	`˛ór_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, ~2UL, 
u£r_≈t_œ°
);

2284 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, 1, 
u£r_≈t_œ°
);

2287 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, 1, 
u£r_≈t_œ°
);

2290 if((
vmcb
->
exôöfo1
>>32)==1){

2291 
	`˛ór_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, ~1UL, 
kî√l_≈t_œ°
);

2292 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, 3, 
u£r_≈t_œ°
);

2293 
tmp_a
++;

2294 
vmcb
->
éb_c⁄åﬁ
 = 1;

2296 
	`£t_íåõs_Êag
(
vmcb
->
exôöfo2
, 4096, 1, 
u£r_≈t_œ°
);

2300 
	`dump_îr‹_öfo
(
vmcb
, 
ªgs
, 
__LINE__
);

2305 
≈t_out
:

2306 
vmcb
->
éb_c⁄åﬁ
 = 1;

2308 
	}
}

2311 
	$°ï_h™dÀ
(
vmcb
 *vmcb, 
gíîl_ªgs
 *
ªgs
)

2316 
vmcb
->
rÊags
 &= ~0x100;

2317 
vmcb
->
exc_öãr˚±s
 &= ~0x2;

2318 
	`lock_˝rötf
("rù:%lx,Ñax:%lx,Ñdi:%lx,Ñcx:%lx,Ñsi:%lx ", 
vmcb
->
rù
, vmcb->
øx
, 
ªgs
->
rdi
,Ñegs->
rcx
,Ñegs->
rsi
);

2319 
	`lock_˝rötf
("rdx:%lx,Ñ10:%lx,Ñ8:%lx,Ñ9:%lx\n", 
ªgs
->
rdx
,Ñegs->
r10
,Ñegs->
r8
,Ñegs->
r9
);

2323 
	}
}

2325 
	$vmmˇŒ_°ï_íabÀ
(
gíîl_ªgs
 *
ªgs
)

2327 
¥ivacy_vmcb
->
exc_öãr˚±s
 |= 2;

2328 
¥ivacy_vmcb
->
rÊags
 |= 0x100;

2330 
	}
}

2333 
	$£t_¥ivacy_≈t
(
vmcb
 *vmcb)

2335 
uöt64_t
 
≈t_size
, 
≈t_°¨t
;

2336 
uöt64_t
 
≈t_pml4e
, 
≈t_pd≥
, 
≈t_pde
;

2337 
uöt64_t
 *
tmp
;

2338 
uöt64_t
 
m
, 
n
, 
p
, 
q
;

2339 
id
 = 0;

2340 
off£t
 = 
USR_NPT
;

2341 
e820íåy
 *
íåy
 = 
domaös
[
id
].
boŸ_∑øms
->
e820_m≠
;

2342 
íåõs
 = 
domaös
[
id
].
boŸ_∑øms
->
e820_íåõs
;

2343 
id
 = 1;

2346 
≈t_pml4e
 = 
u£r_≈t
;

2347 
≈t_pd≥
 = 
≈t_pml4e
 + 4096;

2348 
≈t_pde
 = 
≈t_pd≥
 + 4096;

2349 
tmp
 = (
uöt64_t
 *)
≈t_pml4e
;

2350 *
tmp
 = 
≈t_pd≥
 + 7;

2351 
uöt32_t
 
i
 = 0; i < 
íåõs
; i++){

2352 if(
íåy
[
i
].
ty≥
 == 1){

2354 
m
 = (
íåy
[
i
].
addr
 >> 30) & 0x1ff;

2355 
n
 = (
íåy
[
i
].
size
 >> 30) & 0x1ff;

2356 
n
 +(
íåy
[
i
].
size
 & 0x3fffffff)?1:0;

2357 
n
 +
m
;

2358 
tmp
 = (
uöt64_t
 *)
≈t_pd≥
;

2359 
tmp
 +
m
;

2360 ; 
m
<
n
; m++){

2361 *
tmp
 = 
≈t_pde
 + (
m
<<12) + 7;

2362 
tmp
 ++;

2366 
≈t_°¨t
 = 
u£r_≈t_œ°
;

2367 
m
 = (
íåy
[
i
].
addr
 >> 21) & 0x3ffff;

2368 
n
 = ((
íåy
[
i
].
size
 >> 21) & 0x3ffff);

2369 
n
 +(
íåy
[
i
].
size
 & 0x1fffff)?1:0;

2370 
n
 +
m
;

2371 
tmp
 = (
uöt64_t
 *)
≈t_pde
;

2372 
tmp
 +
m
;

2373 ; 
m
<
n
; m++){

2374 *
tmp
 = 
≈t_°¨t
 + (
m
<<12) + 7;

2375 
tmp
 ++;

2378 
m
 = (
íåy
[
i
].
addr
 >> 12) & 0x7ffffff;

2379 
n
 = ((
íåy
[
i
].
size
 >> 12) & 0x7ffffff);

2380 
n
 +
m
;

2381 
≈t_°¨t
 = 
u£r_≈t_œ°
;

2382 
tmp
 = (
uöt64_t
 *)
≈t_°¨t
;

2383 
tmp
 +
m
;

2384 ; 
m
<
n
; m++){

2385 *
tmp
 = (
m
<<12) + 6;

2386 
tmp
 ++;

2390 
vmcb
->
n_¸3
 = 
≈t_pml4e
;

2391 
	}
}

2394 
	$¥o˚ss_exô_h™dÀ
(
vmcb
 *vmcb)

2396 
	`dñëe
(
vmcb
->
¸3
);

2397 
	`unmask_u§_mem_by_¸3
(
vmcb
, 
¥ivacy_vmcb
->
¸3
);

2398 
brk_ªc‹d
[0].
addr
 = 0;

2399 
ã°_Êag
 = 0;

2400 
	`lock_˝rötf
("Freeáll User memoryÖage,Åmp_a:%lx,Åmp_b:%lx\n",

2401 
tmp_a
, 
tmp_b
);

2402 
tmp_a
 = 0;

2403 
tmp_b
 = 0;

2404 
	}
}

2406 
	$swôch_kîn2u£r
(
vmcb
 *vmcb, 
gíîl_ªgs
 *
ªgs
)

2408 
uöt64_t
 *
ªt_addr
;

2409 if(
¥ivacy_vmcb
->
n_¸3
 =
u£r_≈t
){

2410 
	`lock_˝rötf
("NPT isálready user_npt\n");

2411 
	`≈t_åavñ
(
å≠_phy
, 
kî√l_≈t
);

2412 
	`≈t_åavñ
(
å≠_phy
, 
u£r_≈t
);

2416 
¥ivacy_vmcb
->
n_¸3
 = 
u£r_≈t
;

2417 
ªt_addr
 = (
uöt64_t
 *)
	`phy_to_machöe
(
¥ivacy_vmcb
->
r•
+8, 0,Örivacy_vmcb, 0, 
__LINE__
);

2418 if((
uöt64_t
)
ªt_addr
 < 0x1000)

2419 
	`lock_˝rötf
("phy_to_machine failed\n");

2420 
¥ivacy_vmcb
->
øx
 = *
ªt_addr
;

2421 
ªt_addr
 = (
uöt64_t
 *)
	`phy_to_machöe
(
¥ivacy_vmcb
->
r•
, 0,Örivacy_vmcb, 0, 
__LINE__
);

2422 if((
uöt64_t
)
ªt_addr
 < 0x1000)

2423 
	`lock_˝rötf
("phy_to_machine failed\n");

2424 
ªgs
->
rbx
 = *
ªt_addr
;

2425 
¥ivacy_vmcb
->
r•
 += 16;

2427 
	`lock_˝rötf
("rip:%lx,Ñsp:%lx, ",

2428 
¥ivacy_vmcb
->
rù
,Örivacy_vmcb->
r•
);

2429 
¥ivacy_vmcb
->
rù
 = 
sys_ªt_addr
 - 3;

2430 
	`lock_˝rötf
("gŸÿ%lx\n", 
¥ivacy_vmcb
->
rù
 + 3);

2432 if(
ã°_Êag
 == 1)

2433 
ã°_Êag
--;

2435 
	`lock_˝rötf
("ã°_Êag:%ld\n", 
ã°_Êag
);

2438 
	}
}

2445 
	$¥ivacy_£t
(
gíîl_ªgs
 *
ªgs
)

2448 
uöt64_t
 
∑ge
 = 
ªgs
->
rcx
;

2449 
pgt_íd
[], 
pml4e
[], 
≈t
[];

2450 
uöt64_t
 
tmp_cs
;

2451 
uöt64_t
 
tmp_ss
;

2452 
uöt64_t
 
tmp_r•
;

2455 
ªgs
->
rbx
){

2457 if(
°¨t_¥ivis‹
 == 0)

2459 
	`°¨t_¥Ÿe˘
(
¥ivacy_vmcb
);

2460 
¥ivacy_vmcb
->
éb_c⁄åﬁ
 = 1;

2461 
	`lock_˝rötf
("%s, %d,Ñip:%lx,Ç_cr3:%lx,Öroc:%d\n",

2462 
__func__
, 
__LINE__
, 
¥ivacy_vmcb
->
rù
,

2463 
¥ivacy_vmcb
->
n_¸3
, 
	`œpicid
());

2466 if(
ªgs
->
rcx
 == 1){

2467 
°¨t_¥ivis‹
 = 1;

2468 
	`lock_˝rötf
("Start AppSec\n");

2470 
°¨t_¥ivis‹
 = 0;

2473 
	`phy_to_machöe1
(0xffffffffff600000UL, 0, 
¥ivacy_vmcb
->
¸3
, 0, 
__LINE__
);

2476 
	`¥o˚ss_exô_h™dÀ
(
¥ivacy_vmcb
);

2479 
å≠_phy
 = 
	`phy_to_machöe
(
ªgs
->
rdx
, 0, 
¥ivacy_vmcb
, 0, 
__LINE__
);

2480 
	`lock_˝rötf
("Program Name:%s,Årampline:%lx, %lx\n",

2481 (*)
	`phy_to_machöe
(
ªgs
->
rcx
, 0, 
¥ivacy_vmcb
, 0, 
__LINE__
),

2482 
ªgs
->
rdx
, 
å≠_phy
);

2483 
	`ªgi°î_åam∂öe
(
ªgs
->
rdx
, 
¥ivacy_vmcb
->
¸3
);

2487 
tmp_r•
 = 
	`phy_to_machöe
(
¥ivacy_vmcb
->
r•
, 0,Örivacy_vmcb, 0, 
__LINE__
);

2488 
	`lock_˝rötf
("VMCALL Swôch,Ñù:%lx,Ñ•:%lx\n", 
¥ivacy_vmcb
->
rù
,Örivacy_vmcb->
r•
);

2489 
	`≈t_åavñ
(
tmp_r•
, 
kî√l_≈t
);

2490 
	`≈t_åavñ
(
tmp_r•
, 
u£r_≈t
);

2494 
	`swôch_kîn2u£r
(
¥ivacy_vmcb
, 
ªgs
);

2498 
	`lock_˝rötf
("ö %†swôch deÁu…\n", 
__func__
);

2500 
¥ivacy_vmcb
->
éb_c⁄åﬁ
 = 1;

2502 
	}
}

2505 
	$vmmˇŒ_ã°
(
gíîl_ªgs
 *
ªgs
)

2527 
uöt32_t
 
queued
 = 0;

2528 
i
;

2529 
i
=7; i>=0; i--){

2530 
queued
 = 
	`ªad_œpic
(0x200+
i
*0x10);

2531 if(
queued
){

2532 
	`lock_˝rötf
("i:%d, queued is:%x\n", 
i
, 
queued
);

2533 
	`wrôe_œpic
(0xb0, 0x0);

2534 
	`wrôe_œpic
(0xb0, 0x0);

2536 
queued
 = 
	`ªad_œpic
(0x200+
i
*0x10);

2537 
	`lock_˝rötf
("i:%d, queued is:%x\n", 
i
, 
queued
);

2538 
queued
 = 0;

2544 
	`lock_˝rötf
("CMD: %s\n", (*)(0x28001000 + 
node
[1].
ba£_addr
));

2546 
	}
}

2548 
	$vmmˇŒ_dom¥öt
(
gíîl_ªgs
 *
ªgs
)

2551 
vmcb
 *vmcb = 
¥ivacy_vmcb
;

2552 if(
ªgs
->
rbx
 != 0){

2553 * 
com
 = (*)
	`phy_to_machöe
(
ªgs
->
rbx
, 1, 
vmcb
, 0, 
__LINE__
);

2554 *
°r
 = (*)
	`≈t_åavñ1
((
uöt64_t
)
com
, 
vmcb
->
n_¸3
);

2555 
	`lock_˝rötf
("%s", 
°r
);

2560 
	}
}

	@kern/svm.c

1 
	~<öc/≈t.h
>

2 
	~<öc/x86.h
>

3 
	~<kîn/c⁄sﬁe.h
>

4 
	~<öc/≠ic.h
>

5 
	~<öc/˝u.h
>

6 
	~<öc/≥r˝u.h
>

7 
	~<öc/domaö.h
>

9 
	~<öc/¥ivacy.h
>

10 
	~<öc/pci.h
>

11 
	~<öc/iommu.h
>

20 vﬁ©ûê
	g≈t_öô
 = 0;

22 
uöt64_t
 
	gshadow_≈t
;

24 
uöt64_t
 
	g±e
[512 * 8] 
__©åibuã__
((
Æig√d
 (4096), 
£˘i⁄
(".data")));

26 
uöt64_t
 
	gfú°
[0xA0000] 
__©åibuã__
((
Æig√d
 (4096), 
£˘i⁄
(".data")));

28 
vmcb
 
	gvmcb_ã°
[32] 
__©åibuã__
((
Æig√d
 (4096), 
£˘i⁄
 (".data")));

29 
vm_‰ame
 
	gv‰m
[32] 
__©åibuã__
((
Æig√d
 (4096), 
£˘i⁄
 (".data")));

30 
	gho°_ßve
[4096*32] 
__©åibuã__
((
Æig√d
 (4096), 
£˘i⁄
 (".data")));

31 
uöt8_t
 
	gio_≥rm≠
[4096*3*8]
__©åibuã__
((
Æig√d
(4096), 
£˘i⁄
(".data")));

32 
uöt32_t
 *
	gcode32_addr
 = (uint32_t *)0x400fa;

34 
cga_öô
();

36 
c⁄°ru˘_dev_≈t
(
uöt64_t
 
dev_addr
, 
id
, uöt64_à
n_¸3
, uöt64_à
off£t
);

38 
	$m§_öãr
(*
pm
, 
uöt32_t
 
m§
, uöt32_à
acc
)

40 
uöt32_t
 
ba£
 = 0x0, 
ödex
 = 0x0, 
off£t
 = 0x0;

42 
uöt8_t
 *
m≠
 = (uöt8_à*Ë
pm
;

43 
uöt32_t
 
i
 = 0; i < 8192; i ++)

44 
m≠
[
i
] = 0x0;

46 if(
m§
 >= 0xc0000000 && msr < 0xc0010000)

47 
ba£
 = 0x800;

48 if(
m§
 >= 0xc0001000)

49 
ba£
 = 0x1000;

51 
ödex
 = 
m§
&0xffff;

52 
off£t
 = (
ödex
 * 2)%8;

53 
ödex
 = (index * 2)/8;

54 
m≠
 = m≠ + 
ba£
 + 
ödex
;

55 *
m≠
 |
acc
<<
off£t
;

56 
	}
}

59 
	$wrm§_öãr
(*
‰ame
, *
vmcb
)

61 
vm_‰ame
 *
vf
;

62 
vmcb
 *
vb
;

63 
uöt32_t
 
óx
, 
edx
, 
ecx
;

65 
vf
 = 
‰ame
;

66 
vb
 = 
vmcb
;

67 
edx
 = 0xc0000080;

68 
óx
 = 
vb
->
øx
;

69 
edx
 = 
vf
->
gªgs
.
rdx
;

70 
óx
 |= 0x1000;

71 
vb
->
e„r
 = (((
uöt64_t
Ë
edx
Ë<< 32Ë| ((uöt64_tË
óx
);

72 
vb
->
rù
 += 2;

73 
	}
}

75 
	$ª°_°ack_run_svm
(
vmcb
 *vmcb, 
vm_‰ame
 *
v‰m1
)

77 
uöt64_t
 
gue°_°ack
 = (uöt64_à)
v‰m1
;

78 
uöt64_t
 
vmcb_phya
 = (uöt64_t)
vmcb
;

80 
__asm
 
	`__vﬁ©ûe
(

84 ::"r"(
gue°_°ack
),"r"(
vmcb_phya
)

86 
	}
}

88 
	giommu_öôed
 = 0;

90 
uöt64_t
 *
	$gë_≈t_±e
(
uöt64_t
 
addr
, uöt64_à
n¸3
)

92 
uöt64_t
 *
tmp
;

93 
uöt64_t
 
phy_addr
;

95 
phy_addr
 = 
n¸3
 + ((
addr
>>39)&0x1ff)*8;

96 
tmp
 = (
uöt64_t
 *)
phy_addr
;

97 
phy_addr
 = *
tmp
;

98 if((
phy_addr
&1)==0){

101 
phy_addr
 &= 0xffffffffff000UL;

103 
phy_addr
 +((
addr
>>30)&0x1ff) * 8;

104 
tmp
 = (
uöt64_t
 *)
phy_addr
;

105 
phy_addr
 = *
tmp
;

106 if((
phy_addr
&1)==0){

109 
phy_addr
 &= 0xffffffffff000UL;

111 
phy_addr
 +((
addr
>>21)&0x1ff) * 8;

112 
tmp
 = (
uöt64_t
 *)
phy_addr
;

113 
phy_addr
 = *
tmp
;

114 if((
phy_addr
&1)==0){

117 
phy_addr
 &= 0xffffffffff000UL;

119 
phy_addr
 +((
addr
>>12)&0x1ff) * 8;

120 
tmp
 = (
uöt64_t
 *)
phy_addr
;

121  
tmp
;

122 
	}
}

124 
	$ªm≠_≈t_∑ge
(
uöt64_t
 
vút_addr
, uöt64_à
phy_addr
, uöt64_à
Êags
, uöt64_à
n¸3
)

126 
uöt64_t
 *
±e_íåy
;

127 
±e_íåy
 = 
	`gë_≈t_±e
(
vút_addr
, 
n¸3
);

128 if(!
±e_íåy
){

129 
	`öô_≈t_ønge
(
vút_addr
, 4096, 0, 0);

130 
±e_íåy
 = 
	`gë_≈t_±e
(
vút_addr
, 
n¸3
);

132 *
±e_íåy
 = 
phy_addr
 & ~0xfffUL;

133 *
±e_íåy
 |
Êags
;

134 
	}
}

136 
	$°¨t_svm
(
id
)

139 
uöt32_t
 
¥ocid
;

140 
ivrs
 *ivrs;

143 
¥ocid
 = 
	`œpicid
();

145 
vmcb
 *vmcb = &
vmcb_ã°
[
¥ocid
];

147 *
p
 = (*)
vmcb
;

148 
pda
[
¥ocid
].
vmcb_addr
 = (
uöt64_t
)
vmcb
;

150 
	`dißbÀ_m˚
();

151 
	`wrôe_m§
(0xc0010117, ((
uöt64_t
Ë
ho°_ßve
Ë+ 
¥ocid
*4096);

153 
uöt32_t
 
i
 = 0; i < (
vmcb
); i ++)

154 
p
[
i
] = 0;

156 
	`svm_vmcb_öô
(
vmcb
, 
id
);

158 if(
domaös
[
id
].
dom_ty≥
 != 1){

159 
vmcb
->
öãr˚±s1
 |
INTERCEPT_CPUID
;

162 if(
node
[
id
].
boŸpid
!
	`ªad_pda
(
˝upid
))

164 
uöt64_t
 
vÆ
 = 
	`ªad_m§
(0xc0010114);

165 
	`wrôe_m§
(0xc0010114, 
vÆ
 | 0x2);

166 
vmcb
->
exc_öãr˚±s
 |= 1<<30;

170 
vmcb
->
rù
 = 0x15c;

171 
vmcb
->
öãr˚±s1
 |
INTERCEPT_MSR_PROT
;

172 
vmcb
->
m§pm_ba£_∑
 = (
uöt64_t
)
m§pm
 + 8192 * 
¥ocid
;

173 
	`m§_öãr
((*)
vmcb
->
m§pm_ba£_∑
, 0xc0000080, 0x2);

174 
vmcb
->
öãr˚±s1
 |
INTERCEPT_IOIO_PROT
;

176 
vmcb
->
i›m_ba£_∑
 = (
uöt64_t
)&
io_≥rm≠
[4096*3*
id
];

177 !
≈t_öô
);

178 
	`íabÀ_≈t
(
vmcb
, 
id
);

183 *
tmp
 = 
madt_°¨t
;

184 
uöt64_t
 
∑ge_Êags
;

185 
uöt64_t
 
phy_∑ge
;

187 if(
domaös
[
id
].
dom_ty≥
 == 1){

188 *
code32_addr
 =(
uöt32_t
Ë
domaös
[
id
].
boŸ_∑øms
->
hdr
.
code32_°¨t
;

189 if(
id
 > 0)

191 
domaös
[
id
].
boŸ_∑øms
 = (boŸ_∑øm†*)((
uöt64_t
)domaös[id].boŸ_∑øm†- 
node
[id].
ba£_addr
);

196 *
code32_addr
 = 
domaös
[
id
].
code32_°¨t
;

197 
v‰m
[
¥ocid
].
gªgs
.
rbx
 = 
domaös
[
id
].
mb_öfo_addr
;

200 if(
id
 > 0)

202 
	`p‹t_öãr˚±_£t
((*)
vmcb
->
i›m_ba£_∑
, 0x20);

203 
	`p‹t_öãr˚±_£t
((*)
vmcb
->
i›m_ba£_∑
, 0x21);

204 
	`p‹t_öãr˚±_£t
((*)
vmcb
->
i›m_ba£_∑
, 0xA0);

205 
	`p‹t_öãr˚±_£t
((*)
vmcb
->
i›m_ba£_∑
, 0xA1);

208 
	`íabÀ_≈t
(
vmcb
, 
id
);

209 
vmcb
->
öãr˚±s1
 |
INTERCEPT_IOIO_PROT
;

211 
vmcb
->
i›m_ba£_∑
 = (
uöt64_t
)&
io_≥rm≠
[4096*3*
id
];

214 if(
id
 == 0){

216 
phy_∑ge
 = (
uöt64_t
)
madt_∑ge
;

217 
∑ge_Êags
 = 5 | 2<<9 | 3UL<<61;

218 ; 
tmp
<
madt_íd
;Åmp+= 4096){

219 
	`ªm≠_≈t_∑ge
((
uöt64_t
)
tmp
, 
phy_∑ge
, 
∑ge_Êags
, 
vmcb
->
n_¸3
);

220 
phy_∑ge
 += 4096;

224 
≈t_öô
 = 1;

225 
node
[
id
].
boŸed
 = 1;

230 
	`lock_˝rötf
("Sèπög Domaö: %d, boŸ_∑øms: %lx\n", 
id
, (
uöt64_t
)
domaös
[id].
boŸ_∑øms
);

233 
v‰m
[
¥ocid
].
gªgs
.
rsi
 = (
uöt64_t
)
domaös
[
id
].
boŸ_∑øms
;

234 
v‰m
[
¥ocid
].
gªgs
.
øx
 = (
uöt64_t
)
vmcb
;

235 
	`ª°_°ack_run_svm
(
vmcb
, &
v‰m
[
¥ocid
]);

236 
	}
}

238 
	$vmmˇŒ_öå_des
(
gíîl_ªgs
 *
ªgs
)

240 
uöt32_t
 
d©a
;

241 
uöt32_t
 
iﬂpic_ba£_addr
 = 
iﬂpic
[0]->
mmiﬂpic_addr
;

243 if(
ªgs
->
rbx
 == 0){

244 
d©a
 = 0x1a03a;

245 
	`mul_wrôe_iﬂpic
(0x10 + 2 * 10,

246 
d©a
, 
iﬂpic_ba£_addr
);

247 
d©a
 = 0x20<<24;

248 
	`mul_wrôe_iﬂpic
(0x11 + 2 * 10,

249 
d©a
, 
iﬂpic_ba£_addr
);

250 
d©a
 = 0xa03a;

251 
	`mul_wrôe_iﬂpic
(0x10 + 2 * 10,

252 
d©a
, 
iﬂpic_ba£_addr
);

254 
d©a
 = 0x1a03a;

255 
	`mul_wrôe_iﬂpic
(0x10 + 2 * 10,

256 
d©a
, 
iﬂpic_ba£_addr
);

257 
d©a
 = 0x44<<24;

258 
	`mul_wrôe_iﬂpic
(0x11 + 2 * 10,

259 
d©a
, 
iﬂpic_ba£_addr
);

260 
d©a
 = 0xa03a;

261 
	`mul_wrôe_iﬂpic
(0x10 + 2 * 10,

262 
d©a
, 
iﬂpic_ba£_addr
);

265 
	`lock_˝rötf
("Hkey, %s\n", 
__func__
);

267 
	}
}

269 
	$°¨t_domaö
(
id
)

271 
uöt8_t
 
œpicid_to_ödex
[256];

272 
i
, 
j
 = 
	`ªad_pda
(
˝upid
Ë+ 1, 
ödex
;

273 
i
=1; i < 
node
[
id
].
ödex
; i ++, 
j
++){

274 
ödex
 = 
œpicid_to_ödex
[
j
];

275 
˝us
[
ödex
].
svm
 = 1;

277 
	`°¨t_svm
(
id
);

278 
	}
}

280 
	$£t_≠boŸù
(
vmcb
 *vmcb)

282 
≈_íabÀ
 = 
vmcb
->np_enable;

283 
uöt16_t
 *
vec
;

284 
uöt32_t
 
cs
;

285 
uöt64_t
 
tmp
;

287 if(!
≈_íabÀ
)

289 
vec
 = (
uöt16_t
 *)0x467;

290 
cs
 = 
vec
[1];

291 
	`lock_˝rötf
("I¿%s,Çe°edÖagêèbÀ i†nŸÉ«bÀd\n", 
__func__
);

295 
uöt64_t
 *
n¸3
 =(uöt64_à*Ë(
vmcb
->
n_¸3
 & 0xfffffffffffffUL);

296 
uöt64_t
 *
pd≥
 =(uöt64_à*)–
n¸3
[0] & ~((0x1UL << 12) - 1) & 0xfffffffffffffUL);

297 
uöt64_t
 *
pde
 = (uöt64_à*)(
pd≥
[0] & ~((0x1UL << 12) - 1) & 0xfffffffffffffUL);

298 
uöt64_t
 *
pmd
 =(uöt64_à*Ë(
pde
[0] & ~((0x1UL << 12) - 1) & 0xfffffffffffffUL);

299 
uöt8_t
 *
±e
 = (uöt8_à*)(
pmd
[0] & ~((0x1UL << 12) - 1) & 0xfffffffffffffUL);

300 
vec
 = (
uöt16_t
 *)&
±e
[0x467];

301 
cs
 = 
vec
[1];

307 
vmcb
->
cs
.
£l
 = cs;

308 
vmcb
->
rù
 = 0x0;

309 
vmcb
->
cs
.
ba£
 = cs<<4;

310 
vmcb
->
e„r
 = 0x1000;

311 
	}
}

313 
	$svm_e„r_¥o
(
vmcb
 *vmcb)

315 
uöt64_t
 
vÆ
 = 
	`ªad_m§
(0xc0010114);

316 
vÆ
 &= ~0x2;

317 
	`wrôe_m§
(0xc0010114, 
vÆ
);

318 
	`£t_≠boŸù
(
vmcb
);

319 
	}
}

321 
uöt64_t
 
	ggos_m§
[32];

323 
	$m§_ßve
(
id
)

325 
osv_pda
 *
˝u
 = &
pda
[
id
];

326 
__asm__
 
	`__vﬁ©ûe__
("mfence":::"memory");

327 
gos_m§
[
id
] = 
	`ªad_m§
(0xc0000101);

328 
__asm__
 
	`__vﬁ©ûe__
("mfence":::"memory");

330 
__asm__
 
	`__vﬁ©ûe__
("mfence":::"memory");

331 
	`wrôe_m§
(0xc0000101, (
uöt64_t
)
˝u
);

332 
__asm__
 
	`__vﬁ©ûe__
("mfence":::"memory");

333 
	}
}

335 
	$m§_ªlﬂd
(
id
)

337 
__asm__
 
	`__vﬁ©ûe__
("mfence":::"memory");

338 
	`wrôe_m§
(0xc0000101, 
gos_m§
[
id
]);

339 
__asm__
 
	`__vﬁ©ûe__
("mfence":::"memory");

340 
	}
}

342 
	$addr_ismem
(
uöt64_t
 
addr
)

344 
i
;

345 
íåõs
 = 
boŸ_∑øms
->
e820_íåõs
;

346 
e820íåy
 *
íåy
 = 
boŸ_∑øms
->
e820_m≠
;

347 
i
=0; i<
íåõs
; i++){

348 if(
addr
>=
íåy
[
i
].add∏&&áddr<íåy[i].addr+íåy[i].
size
){

349 if(
íåy
[
i
].
ty≥
 == 1){

350 
	`lock_˝rötf
("%†addªs†øngê°¨t:%lx,Énd:%lx\n", 
__func__
,

351 
íåy
[
i
].
addr
,É¡ry[i].addr+íåy[i].
size
);

359 
	}
}

362 
uöt64_t
 
	$≈t_åavñ1
(
uöt64_t
 
addr
, uöt64_à
n¸3
)

364 
uöt64_t
 *
tmp
;

365 
uöt64_t
 
phy_addr
;

367 
phy_addr
 = 
n¸3
 + ((
addr
>>39)&0x1ff)*8;

368 
tmp
 = (
uöt64_t
 *)
phy_addr
;

369 
phy_addr
 = *
tmp
;

370 if((
phy_addr
&1)==0){

371 
	`lock_˝rötf
("NotÖresent\n");

374 
phy_addr
 &= 0xffffffffff000UL;

376 
phy_addr
 +((
addr
>>30)&0x1ff) * 8;

377 
tmp
 = (
uöt64_t
 *)
phy_addr
;

378 
phy_addr
 = *
tmp
;

379 if((
phy_addr
&1)==0){

380 
	`lock_˝rötf
("NotÖresent\n");

383 
phy_addr
 &= 0xffffffffff000UL;

385 
phy_addr
 +((
addr
>>21)&0x1ff) * 8;

386 
tmp
 = (
uöt64_t
 *)
phy_addr
;

387 
phy_addr
 = *
tmp
;

388 if((
phy_addr
&1)==0){

389 
	`lock_˝rötf
("NotÖresent\n");

392 
phy_addr
 &= 0xffffffffff000UL;

394 
phy_addr
 +((
addr
>>12)&0x1ff) * 8;

395 
tmp
 = (
uöt64_t
 *)
phy_addr
;

396 
phy_addr
 = *
tmp
;

397 
phy_addr
 &= 0xffffffffff000UL;

398  
phy_addr
 + (
addr
 & 0xfff);

399 
	}
}

401 
uöt64_t
 
	$≈t_åavñ
(
uöt64_t
 
addr
, uöt64_à
n¸3
)

403 
uöt64_t
 *
tmp
;

404 
uöt64_t
 
phy_addr
;

406 
phy_addr
 = 
n¸3
 + ((
addr
>>39)&0x1ff)*8;

407 
tmp
 = (
uöt64_t
 *)
phy_addr
;

408 
phy_addr
 = *
tmp
;

409 
	`lock_˝rötf
("2:%lx-- ", 
phy_addr
);

410 if((
phy_addr
&1)==0){

411 
	`lock_˝rötf
("NotÖresent\n");

414 
phy_addr
 &= 0xffffffffff000UL;

416 
phy_addr
 +((
addr
>>30)&0x1ff) * 8;

417 
tmp
 = (
uöt64_t
 *)
phy_addr
;

418 
phy_addr
 = *
tmp
;

419 
	`lock_˝rötf
("3:%lx-- ", 
phy_addr
);

420 if((
phy_addr
&1)==0){

421 
	`lock_˝rötf
("NotÖresent\n");

424 if((
phy_addr
 & 0x80) != 0){

425 
	`lock_˝rötf
("1GÖage\n");

426 
phy_addr
 &= ~0x3fffffff;

427  
phy_addr
 + (
addr
 & 0x3fffffff);

430 
phy_addr
 &= 0xffffffffff000UL;

432 
phy_addr
 +((
addr
>>21)&0x1ff) * 8;

433 
tmp
 = (
uöt64_t
 *)
phy_addr
;

434 
phy_addr
 = *
tmp
;

435 
	`lock_˝rötf
("4:%lx-- ", 
phy_addr
);

436 if((
phy_addr
&1)==0){

437 
	`lock_˝rötf
("NotÖresent\n");

440 if((
phy_addr
 & 0x80) != 0){

441 
	`lock_˝rötf
("2MÖage\n");

442 
phy_addr
 &= ~0x1fffff;

443  
phy_addr
 + (
addr
 & 0x1fffff);

446 
phy_addr
 &= 0xffffffffff000UL;

448 
phy_addr
 +((
addr
>>12)&0x1ff) * 8;

449 
tmp
 = (
uöt64_t
 *)
phy_addr
;

450 
phy_addr
 = *
tmp
;

451 
	`lock_˝rötf
("±e:%lx,Åmp:%p\n", 
phy_addr
, 
tmp
);

452 
phy_addr
 &= 0xffffffffff000UL;

453  
phy_addr
 + (
addr
 & 0xfff);

454 
	}
}

456 
vmcb
 *
	g¥ivacy_vmcb
;

458 
	$˝uid_öãr˚±
(
vmcb
 *vmcb, 
gíîl_ªgs
 *
gªgs
)

460 
uöt32_t
 
óx
, 
ebx
, 
ecx
, 
edx
;

462 
óx
 = (
uöt32_t
Ë
vmcb
->
øx
;

464 
__asm__
 
	`__vﬁ©ûe__
(

466 :"˜"(
óx
), "=b"(
ebx
), "=c"(
ecx
), "=d"(
edx
)

467 :"a"(
óx
));

468 if(
vmcb
->
øx
 == 0x80000001){

469 
ecx
 &~(
uöt32_t
) 0x4;

472 
vmcb
->
øx
 = (
uöt64_t
Ë
óx
;

473 
gªgs
->
rbx
 = (
uöt64_t
Ë
ebx
;

474 
gªgs
->
rcx
 = (
uöt64_t
Ë
ecx
;

475 
gªgs
->
rdx
 = (
uöt64_t
Ë
edx
;

476 
vmcb
->
rù
 += 2;

478 
	}
}

481 
	$svm_exô_h™dÀr
(
uöt64_t
 
‹ig_r•
)

483 
vmcb
 *vmcb;

484 
uöt32_t
 
¥ocid
;

485 
did
;

487 
__asm
 
	`__vﬁ©ûe
("mov %%øx, %0":"˜"(
vmcb
)::"cc");

489 
¥ocid
 = 
	`œpicid
();

491 
	`m§_ßve
(
¥ocid
);

492 if((
uöt64_t
)
vmcb
 !(uöt64_t)&
vmcb_ã°
[
¥ocid
]){

493 
	`lock_˝rötf
("VMCBÇotÉqual\n");

494 
vmcb
 = &
vmcb_ã°
[
¥ocid
];

499 
¥ivacy_vmcb
 = 
vmcb
;

500 if(
vmcb
->
evít_öj
.
v
 ==1){

502 
	`lock_˝rötf
("Event inject set\n");

510 if(
vmcb
->
exôöfo
.
v
 != 0){

511 
	`h™dÀ_idt_öãºu±_öãr˚±s
(
vmcb
);

513 
vmcb
->
evít_öj
 = vmcb->
exôöfo
;

514 
vmcb
->
evít_öj
.
v
 = 1;

516 
vmcb
->
exôcode
)

519 
	`öãr˚±_¸3_›
(
vmcb
, &
v‰m
[
¥ocid
].
gªgs
);

522 
	`°ï_h™dÀ
(
vmcb
, &
v‰m
[
¥ocid
].
gªgs
);

525 
	`svm_e„r_¥o
(
vmcb
);

528 
	`˝uid_öãr˚±
(
vmcb
, &
v‰m
[
¥ocid
].
gªgs
);

531 
	`io_öãr˚±
(
vmcb
);

535 
	`wrm§_öãr
(&
v‰m
[
¥ocid
], 
vmcb
);

539 
	`lock_˝rötf
("Gue°Éxecuã†vmm_ru¿ö°ru˘i⁄,Ñù:%lx\n", 
vmcb
->
rù
);

542 
¥ivacy_vmcb
 = 
vmcb
;

543 
	`vmˇŒ
(
vmcb
->
øx
, &
v‰m
[
¥ocid
].
gªgs
);

544 
vmcb
->
rù
 +=3;

548 if(!
	`addr_ismem
(
vmcb
->
exôöfo2
)){

549 if(
vmcb
->
exôöfo2
>=(
uöt64_t
)
madt_°¨t
 && vmcb->exôöfo2<(uöt64_t)
madt_íd
){

550 
	`lock_˝rötf
("Thi†i†®madàwrôê›î©i⁄,Éxôöfo1:%lx\n", 
vmcb
->
exôöfo1
);

551 
	`lock_˝rötf
("madt_start:%p, madt_end:%p,Éxitinfo2:%lx\n",

552 
madt_°¨t
, 
madt_íd
, 
vmcb
->
exôöfo2
);

553 
	`lock_˝rötf
("Gue° IP i†:%lx\n", 
vmcb
->
rù
);

556 
did
 = 
	`ªad_pda
(
˝udid
);

557 if(
did
 != 0){

558 
	`lock_˝rötf
("Devi˚ NPT fau…, %lx\n", 
vmcb
->
exôöfo2
);

560 
	`öô_≈t_ønge
(
vmcb
->
exôöfo2
 & ~0xfff, 4096, 
did
, 0);

562 
	`lock_˝rötf
("NPT Fault occurred,áddress:%lx,Ñip:%lx\n",

563 
vmcb
->
exôöfo2
, vmcb->
rù
);

564 
	`≈t_åavñ
(
vmcb
->
exôöfo2
, vmcb->
n_¸3
);

565 
	`≈t_åavñ
(
vmcb
->
rù
, vmcb->
n_¸3
);

571 
	`lock_˝rötf
("DefaultÉxitcode:%lx,Ñip:%lx\n",

572 
vmcb
->
exôcode
, vmcb->
rù
);

577 
	`m§_ªlﬂd
(
¥ocid
);

578 
	}
}

580 
	$íabÀ_≈t
(
vmcb
 *vmcb, 
did
)

582 
pgt_íd
[], 
pml4e
[], 
≈t
[];

583 
uöt64_t
 
≈t_size
, 
≈t_pml4e
, 
≈t_°¨t
;

584 
uöt64_t
 *
tmp
;

585 
≈t_size
 = (
uöt64_t
Ë
pgt_íd
 - (uöt64_t)
pml4e
;

586 
≈t_pml4e
 = (
uöt64_t
)&
≈t
[
did
*
≈t_size
];

587 
≈t_°¨t
 = 
node
[
did
].
ba£_addr
 +Çode[did].
Àngth
 - 
NPT_TAB_RESERVE_MEM
;

589 if(!
≈t_öô
){

590 
tmp
 = (
uöt64_t
 *)
≈t_°¨t
;

591 
i
 = 0; i < 160; i ++)

593 
tmp
[
i
] =(
uöt64_t
Ë&
fú°
[(0xA0000 * 
did
)/8 + (0x1000 * i)/8] | 0x7 | (3UL<<61);

594 
	`mem˝y
(&
fú°
[(0xa0000*
did
)/8], (*)0x0, 0xa0000);

598 
vmcb
->
n_¸3
 = 
≈t_pml4e
;

599 
vmcb
->
≈_íabÀ
 = 1;

600 
	}
}

602 
	$p‹t_öãr˚±_£t
(*
m≠
, 
p‹t
)

604 
byã_ödex
, 
bô_ödex
;

606 
byã_ödex
 = 
p‹t
/8;

607 
bô_ödex
 = 
p‹t
%8;

609 *
≥r
 = (*)
m≠
;

610 
≥r
[
byã_ödex
] |1 << 
bô_ödex
;

611 
	}
}

613 
	$io_öãr˚±
(
vmcb
 *vmcb)

615 
uöt16_t
 
p‹t
;

616 
i
;

617 
p‹t
 = 
vmcb
->
exôöfo1
 >> 16;

618 
vmcb
->
rù
 = vmcb->
exôöfo2
;

619 
p‹t
){

621 if((
vmcb
->
exôöfo1
 & 1) == 0){

622 if(((
vmcb
->
øx
)&0xff)!=0xfe)

625 
	`lock_˝rötf
("Before domÑeboot\n");

631 
	`pci_c⁄fig_ac˚ss
(
vmcb
);

634 
	}
}

636 
	$úq_öje˘
(
vmcb
 *vmcb, 
uöt64_t
 
úq
)

638 
vmcb
->
öå_t
.
ve˘‹
 = 
úq
;

639 
vmcb
->
öå_t
.
çr
 = 0xf;

640 
vmcb
->
öå_t
.
úq
 = 0x1;

641 
vmcb
->
öå_t
.
¥io
 = 0xf;

642 
vmcb
->
öå_t
.
ign_çr
 = 0x1;

643 
	}
}

645 
	$gë_did
(
gíîl_ªgs
 *
ªgs
)

647 
did
;

648 
did
 = 
	`ªad_pda
(
˝udid
);

649 
ªgs
->
rdi
 = 
did
;

650 
	}
}

	@kern/vmcall.c

1 
	~<öc/ty≥s.h
>

2 
	~<öc/x86.h
>

4 
	#__NR_vmˇŒ_max
 32

	)

6 
	#__VMCALL
(
ƒ
, 
sym
Ë
	`sym
();

	)

8 
	~<öc/osv°d.h
>

10 #unde‡
__VMCALL


12 
	#__VMCALL
(
ƒ
, 
sym
Ë[ƒ] = sym,

	)

14 
vm_ni_vmˇŒ
();

18 (*
	tvm_ˇŒ_±r_t
)();

20 c⁄° 
vm_ˇŒ_±r_t
 
vm_ˇŒ_èbÀ
[
__NR_vmˇŒ_max
 + 1] =

22 [0 ... 
__NR_vmˇŒ_max
] = &
vm_ni_vmˇŒ
,

24 
	~<öc/osv°d.h
>

25 
	}
};

	@kern/vmfile.c

1 
	~<öc/ty≥s.h
>

2 
	~<öc/vmfûe.h
>

3 
	~<öc/°dio.h
>

5 
	$vm_ªad
(
gíîl_ªgs
 *
ªgs
)

7 
	`lock_˝rötf
("This is vmmÑead call \n");

9 
	}
}

11 
	$vm_wrôe
(
gíîl_ªgs
 *
ªgs
)

14 
	}
}

16 
	$vm_›í
(
gíîl_ªgs
 *
ªgs
)

19 
	}
}

21 
	$vm_˛o£
(
gíîl_ªgs
 *
ªgs
)

24 
	}
}

	@kern/vmmcons.c

3 
	~<öc/ty≥s.h
>

4 
	~<öc/vmmc⁄s.h
>

5 
	~<öc/°dio.h
>

6 
	~<öc/x86.h
>

7 
	~<öc/≥r˝u.h
>

8 
	~<öc/osv.h
>

19 
£m
 *
vmm_£m
;

22 
mem˝y
(*
d°0
, c⁄° *
§c0
, 
size_t
 
Àngth
);

24 
	sbt°‹e
{

25 
domaö_ªcv_buff
 *
	mªcv_buff
;

26 *
	mbuff_hód
;

27 *
	mwrôe_pos_back
;

31 
	#MAX_DOMAIN_NUM
 2

	)

33 
bt°‹e
 
	g°‹e
[
MAX_DOMAIN_NUM
] = {{
NULL
, NULL, NULL}};

34 *
	gªcv_buff
;

35 
domaö_ªcv_buff
 *
	gdomaö_ªcv_buff
;

37 
	$vmmc⁄s_öô
(
gíîl_ªgs
 *
ªgs
)

39 
	`•ö_lock
(&
¥öt_£m
);

41 if(
ªgs
->
rdi
 < 0x1a00000)

43 
öfo
 = 0;

44 
	`•ö_u∆ock
(&
¥öt_£m
);

48 
öfo
 = (
buff_öfo
 *)
ªgs
->
rdi
;

50 if(!
öfo
)

52 
	`•ö_u∆ock
(&
¥öt_£m
);

56 if(!
öfo
->
msg_öô
)

58 
öfo
 = 0;

59 
	`•ö_u∆ock
(&
¥öt_£m
);

63 
vmm_£m
 =(
£m
 *Ë&
öfo
->
lock
;

66 
	`•ö_u∆ock
(&
¥öt_£m
);

69 
	}
}

71 
	$vmmputch¨
(
ch
)

73 
öfo
->
msg_buf„r
[öfo->
cur_pos
 ++] = (
uöt8_t
 )
ch
;

74 
öfo
->
cur_À¡h
 ++;

75 if(
öfo
->
cur_pos
 >öfo->
max_À¡h
)

77 
öfo
->
cur_pos
 %öfo->
max_À¡h
;

78 
öfo
->
ovî_Êow
 = 1;

81 
	}
}

83 
	$vmgëdid
(
gíîl_ªgs
 *
ªgs
)

86 
Did
 = 
	`ªad_pda
(
˝udid
);

91 
ªgs
->
rbx
 = 
Did
;

93 
	}
}

95 
c⁄s_öô
();

96 
hkey_ã°
();

98 
	$gue°_ã°
(
gíîl_ªgs
 *
ªgs
)

100 
	`c⁄s_öô
();

103 
	}
}

106 
vmcb
 
	gvmcb_ßve
[4];

107 
vmcb
 
vmcb_ã°
[];

110 
	$gë_em±y_íåy
(
osv_èbÀ_íåy
 *
íåy_èb
, 
èbÀ_max_num
)

112 
i
, 
ªt
 = -1;

113 
i
=0; i<
èbÀ_max_num
; i++){

114 if(
íåy_èb
[
i
].
°©us
 =
OSV_STATUS_FREE
){

115 
ªt
 = 
i
;

119  
ªt
;

120 
	}
}

122 
	smm_block
{

123 
	m°¨t
;

124 
	mÀn
;

127 
	s∑ckë_c⁄åﬁ


129 
u32
 
	mcur_pos
;

130 
u32
 
	m∑cked
[15];

131 
u32
 
	m°¨t
;

132 
	mlock
;

133 
	mªady
;

134 
¢uŒ_∑ckë
 *
	mpkt
, *
	mp_pkt
, *
	mçkt
;

135 
	mÊag
;

136 
	mup
;

137 }
__©åibuã__
((
∑cked
));

139 vﬁ©ûê
	gª°¨t_Êag
 = 0;

140 vﬁ©ûê
	gis_vmcb_ßved
 = 0;

141 
	#DOM_BOOT_CPU
 4

	)

142 
uöt64_t
 
fú°
[0xa0000];

143 
∑ckë_c⁄åﬁ
 *
¢
[2];

	@kern/vmmsock.c

1 
	~<öc/sockë.h
>

2 
	~<öc/°dio.h
>

3 
	~<öc/°rög.h
>

4 
	~<öc/x86.h
>

5 
	~<öc/≈t.h
>

6 
	~<öc/≥r˝u.h
>

8 
	#ETH_DATA_LEN
 1500

	)

9 
	#ETH_FRAME_LEN
 1500

	)

10 
	gpoﬁ_size
 = 2048;

12 
	s¢uŒ_∑ckë
 {

13 
¢uŒ_∑ckë
 *
	m√xt
;

14 
√t_devi˚
 *
	mdev
;

15 
u32
 
	md©Æí
;

16 
u8
 
	md©a
[
ETH_FRAME_LEN
];

17 
u32
 
	m‰ì
;

19 }
__©åibuã__
((
∑cked
));

21 
	s∑ckë_c⁄åﬁ


23 
u32
 
	mcur_pos
;

24 
u32
 
	m∑cked
[15];

25 
u32
 
	m°¨t
;

26 
	mlock
;

27 
	mªady
;

28 
¢uŒ_∑ckë
 *
	mpkt
, *
	mp_pkt
, *
	mçkt
;

29 
	mÊag
;

30 
	mup
;

31 }
__©åibuã__
((
∑cked
));

34 
∑ckë_c⁄åﬁ
 
	gp˘l
[2] 
__©åibuã__
((
Æig√d
(4096), 
£˘i⁄
(".data")));

36 
¢uŒ_∑ckë
 
	gvmm_pkt1
[2048] 
__©åibuã__
((
Æig√d
(4096), 
£˘i⁄
(".data")));

37 
¢uŒ_∑ckë
 
	gvmm_pkt2
[2048] 
__©åibuã__
((
Æig√d
(4096), 
£˘i⁄
(".data")));

40 
∑ckë_c⁄åﬁ
 *
	g¢
[2];

41 
	g¢uŒ_ªady
 = 0;

44 
	$¢uŒ_öô
(
gíîl_ªgs
 *
ªgs
)

46 
id
;

47 
uöt64_t
 
addr
;

48 
id
 = 
	`ªad_pda
(
˝udid
);

49 if(
id
 != 0){

50 
	`öô_≈t_ønge
(
node
[0].
ba£_addr
 +Çode[0].
Àngth
 - 
SNULL_RESERVE_MEM
,

51 
SNULL_RESERVE_MEM
, 
id
, 0);

53 
ªgs
->
rbx
 = 
node
[0].
ba£_addr
 +Çode[0].
Àngth
 - 
SNULL_RESERVE_MEM
;

54 
	`lock_˝rötf
("Hkey in snull_init\n");

56 
	}
}

58 
	$¢uŒ_öã∫Æ_öô
(
gíîl_ªgs
 *
ªgs
)

60 
¢
[0] = &
p˘l
[0];

61 
¢
[1] = &
p˘l
[1];

62 
¢
[0]->
p_pkt
 = &
vmm_pkt1
[0];

63 
¢
[1]->
p_pkt
 = &
vmm_pkt2
[0];

65 
	}
}

68 
¢uŒ_∑ckë
 *
	$¢uŒ_gë_rx_pk
(
id
)

71 
¢uŒ_∑ckë
 *
pkt
;

73 if(
¢
[
id
]->
cur_pos
 + 1 =¢[id]->
°¨t
)

75 
pkt
 = &
¢
[
id
]->
p_pkt
[¢[id]->
cur_pos
];

76  
pkt
;

77 
	}
}

79 
	$¢uŒ_tx
(
gíîl_ªgs
 *
ªgs
)

81 
¢uŒ_∑ckë
 *
§c
, *
des
;

82 
id
;

84 if(!
¢uŒ_ªady
)

87 
§c
 = (
¢uŒ_∑ckë
 *)
ªgs
->
rdi
;

88 
id
 = 
ªgs
->
rsi
;

89 
	`•ö_lock
((
£m
 *)&
¢
[
id
]->
lock
);

90 
des
 = 
	`¢uŒ_gë_rx_pk
(
id
);

91 if(!
des
)

93 
	`•ö_u∆ock
((
£m
 *)&
¢
[
id
]->
lock
);

96 
	`mem˝y
(
des
->
d©a
, 
§c
->d©a, src->
d©Æí
);

97 
des
->
d©Æí
 = 
§c
->datalen;

98 
¢
[
id
]->
cur_pos
 ++;

99 
¢
[
id
]->
cur_pos
 = sn[id]->cur_po†% 
poﬁ_size
;

100 
	`•ö_u∆ock
((
£m
 *)&
¢
[
id
]->
lock
);

102 
	}
}

104 
	$¢uŒ_gë
(
gíîl_ªgs
 *
ªgs
)

106 
id
;

107 
uöt64_t
 
addr
;

108 
id
 = 
ªgs
->
rsi
;

109 
addr
 = (
uöt64_t
)
¢
[
id
];

110 if(
id
 != 0){

111 
	`öô_≈t_ønge
(
node
[0].
ba£_addr
 +Çode[0].
Àngth
 - 
NPT_TAB_RESERVE_MEM
 - 
SNULL_RESERVE_MEM
,

112 
SNULL_RESERVE_MEM
, 
id
, 0);

114 
ªgs
->
rdi
 = 
node
[0].
ba£_addr
 +Çode[0].
Àngth
 - 
NPT_TAB_RESERVE_MEM
 - 
SNULL_RESERVE_MEM
;

116 
	}
}

118 
	$vmm_sock¸óã
(
gíîl_ªgs
 *
ªgs
)

121 
	}
}

123 
	$vmm_böd
(
gíîl_ªgs
 *
ªgs
)

126 
	}
}

128 
	$vmm_li°í
(
gíîl_ªgs
 *
ªgs
)

131 
	}
}

133 
	$vmm_ac˚±
(
gíîl_ªgs
 *
ªgs
)

136 
	}
}

138 
	$vmm_£ndmsg
(
gíîl_ªgs
 *
ªgs
)

141 
	}
}

143 
	$vmm_ªcvmsg
(
gíîl_ªgs
 *
ªgs
)

146 
	}
}

148 
	$vmm_sock˛o£
(
gíîl_ªgs
 *
ªgs
)

151 
	}
}

154 
	$vmm_sock
(
gíîl_ªgs
 *
ªgs
)

156 
vec
 = 
ªgs
->
rdi
;

158 
vec
)

161  
	`vmm_sock¸óã
(
ªgs
);

163  
	`vmm_böd
(
ªgs
);

165  
	`vmm_li°í
(
ªgs
);

167  
	`vmm_ac˚±
(
ªgs
);

169  
	`vmm_£ndmsg
(
ªgs
);

171  
	`vmm_ªcvmsg
(
ªgs
);

173  
	`vmm_sock˛o£
(
ªgs
);

178 
	}
}

	@kern/vmpt.c

1 
	~<öc/vm±.h
>

2 
	~<öc/a˝i.h
>

4 *
	gmp_èbÀ
;

6 *
	$¸óã_m±
(*
addr
)

8 
	`dump_m±
((
mp_Âå
 *)
addr
);

9  
NULL
;

10 
	}
}

12 
	$ªdump_mp
()

14 
mp_Âå
 *
Âå
;

15 
mp_c⁄f_hódî
 *
mp_hódî
;

16 
mp_¥o˚s£r
 *
¥oc
;

17 
mp_bu£¡ry
 *
bus
;

18 
mp_iﬂpic
 *
iﬂpic
;

19 
mp_ioöå_assign
 *
ioöå
;

20 
mp_locöå_assign
 *
löå
;

28 
Âå
 = 
	`mp_gë_Âå
();

29 if(!
Âå
)

31 if(!
Âå
->
mp_„©uª
[0])

32 
	`˝rötf
("mpÅableÉxists\n");

34 
mp_hódî
 = (
mp_c⁄f_hódî
 *)((
uöt64_t
 ) 
Âå
->
tb_addr
);

36 
	}
}

38 *
	$m±_domaö_£t
(
id
, *
addr
)

40 
numa_node
 *
domaö
 = &
node
[
id
];

41 
mp_c⁄f_hódî
 *
hd
 = (mp_c⁄f_hódî *)
addr
;

43 
uöt8_t
 *
p
 = (uöt8_à*)(
hd
 + 1);

44 
uöt8_t
 
åue
 = 0;

46 ; 
p
 < ((
uöt8_t
 *Ë
hd
 + hd->
ba£_t_Àngth
);)

48 
åue
 = 0;

49 if(*
p
 == 0)

51 
mp_¥o˚s£r
 *
¥oc
 =(mp_¥o˚s£∏*)
p
;

52 
i
 = 0; i < 
domaö
->
ödex
; i ++)

53 if(
¥oc
->
œpicid
 =
domaö
->œpicid[
i
])

55 
åue
 = 1;

56 
¥oc
->
˝uÊags
 |= 1;

57 
	`lock_˝rötf
("Së CPU %d\n", 
¥oc
->
œpicid
);

58 if(
¥oc
->
œpicid
 =
domaö
->
boŸpid
)

60 
	`lock_˝rötf
("Domaö %d boŸpid:%d\n", 
id
, 
¥oc
->
œpicid
);

61 
¥oc
->
˝uÊags
 |= 0x2;

63 
¥oc
->
˝uÊags
 &= ~0x2;

67 if(!
åue
)

69 
¥oc
->
˝uÊags
 = 0;

71 
p
 += 20;

76 
uöt8_t
 
sum
 = 0;

77 
i
 = 0; i < 
hd
->
ba£_t_Àngth
; i ++)

78 
sum
 +((
uöt8_t
 *)
hd
)[
i
];

79 
sum
 -((
uöt8_t
 *)
hd
)[7];

80 ((
uöt8_t
 *)
hd
)[7] = (1<<8Ë- 
sum
;

82  
hd
;

83 
	}
}

	@lib/memcmp.c

1 
	~<öc/ty≥s.h
>

2 
	~<°d¨g.h
>

3 
	~<°ddef.h
>

5 
	$memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
size_t
 
n
)

7 if(
n
 != 0)

9 c⁄° *
p1
 = 
v1
, *
p2
 = 
v2
;

10 ;
n
 > 0;Ç --)

12 if(*
p1
 ++ !*
p2
 ++)

13  (*--
p1
 - * --
p2
);

17 
	}
}

	@lib/memcpy.c

38 
	~<öc/ty≥s.h
>

39 
	~<°ddef.h
>

40 
	~<°d¨g.h
>

42 
	tw‹d
;

44 
	#wsize
 (
w‹d
)

	)

45 
	#wmask
 (
wsize
 - 1)

	)

48 
	$mem˝y
(*
d°0
, c⁄° *
§c0
, 
size_t
 
Àngth
)

50 *
d°
 = 
d°0
;

51 c⁄° *
§c
 = 
§c0
;

52 
size_t
 
t
;

54 i‡(
Àngth
 =0 || 
d°
 =
§c
)

55 
d⁄e
;

60 
	#TLOOP
(
s
Ëi‡(
t
Ë
	`TLOOP1
(s)

	)

61 
	#TLOOP1
(
s
Ëdÿ{ s; } --
t
)

	)

63 i‡(()
d°
 < ()
§c
) {

67 
t
 = ()
§c
;

68 i‡((
t
 | ()
d°
Ë& 
wmask
) {

73 i‡((
t
 ^ ()
d°
Ë& 
wmask
 || 
Àngth
 < 
wsize
)

74 
t
 = 
Àngth
;

76 
t
 = 
wsize
 - (à& 
wmask
);

77 
Àngth
 -
t
;

78 
	`TLOOP1
(*
d°
++ = *
§c
++);

83 
t
 = 
Àngth
 / 
wsize
;

84 
	`TLOOP
(*(
w‹d
 *)(*)
d°
 = *(w‹d *)(*)
§c
;

85 
§c
 +
wsize
; 
d°
 += wsize);

86 
t
 = 
Àngth
 & 
wmask
;

87 
	`TLOOP
(*
d°
++ = *
§c
++);

94 
§c
 +
Àngth
;

95 
d°
 +
Àngth
;

96 
t
 = ()
§c
;

97 i‡((
t
 | ()
d°
Ë& 
wmask
) {

98 i‡((
t
 ^ ()
d°
Ë& 
wmask
 || 
Àngth
 <
wsize
)

99 
t
 = 
Àngth
;

101 
t
 &
wmask
;

102 
Àngth
 -
t
;

103 
	`TLOOP1
(*--
d°
 = *--
§c
);

105 
t
 = 
Àngth
 / 
wsize
;

106 
	`TLOOP
(
§c
 -
wsize
; 
d°
 -= wsize;

107 *(
w‹d
 *)(*)
d°
 = *(w‹d *)(*)
§c
);

108 
t
 = 
Àngth
 & 
wmask
;

109 
	`TLOOP
(*--
d°
 = *--
§c
);

111 
d⁄e
:

112  (
d°0
);

113 
	}
}

115 #i‚de‡
JOS_KERNEL


116 
	$libc_hiddí_def
(
mem˝y
)

	@lib/printfmt.c

5 
	~<öc/ty≥s.h
>

6 
	~<öc/°dio.h
>

7 
	~<öc/°rög.h
>

8 
	~<öc/îr‹.h
>

9 
	~<öc/ötma¸o.h
>

10 
	~<°ddef.h
>

11 
	~<°d¨g.h
>

23 c⁄° * c⁄° 
	gîr‹_°rög
[
MAXERROR
 + 1] =

25 
NULL
,

40 
¥öäum
 ((*
putch
Ë(, *), *
putd©
,

41 
num
, 
ba£
, 
width
, 
∑dc
)

44 
buf
[68], *
x
;

46 
x
 = 
buf
; 
num
;Çum /
ba£
)

47 *
x
++ = "0123456789abcdef"[
num
 % 
ba£
];

48 i‡(
x
 =
buf
)

49 *
x
++ = '0';

51 i‡(
∑dc
 != '-')

52 ; 
width
 > 
x
 - 
buf
; width--)

53 
	`putch
 (
∑dc
, 
putd©
);

55 ; 
x
 > 
buf
; 
width
--)

56 
	`putch
 (*--
x
, 
putd©
);

58 i‡(
∑dc
 == '-')

59 ; 
width
 > 0; width--)

60 
	`putch
 (' ', 
putd©
);

61 
	}
}

77 
	#gëuöt
(
≠
, 
lÊag
) \

79 
__v
; \

80 i‡(
lÊag
 >= 2) \

81 
__v
 = 
	`va_¨g
 (
≠
, ); \

82 i‡(
lÊag
) \

83 
__v
 = 
	`va_¨g
 (
≠
, ); \

85 
__v
 = 
	`va_¨g
 (
≠
, ); \

86 
__v
; \

87 })

	)

91 
	#gëöt
(
≠
, 
lÊag
) \

93 
__v
; \

94 i‡(
lÊag
 >= 2) \

95 
__v
 = 
	`va_¨g
 (
≠
, ); \

96 i‡(
lÊag
) \

97 
__v
 = 
	`va_¨g
 (
≠
, ); \

99 
__v
 = 
	`va_¨g
 (
≠
, ); \

100 
__v
; \

101 })

	)

104 
v¥ötfmt
 ((*
putch
Ë(, *), *
putd©
, c⁄° *
fmt
,

105 
va_li°
 
≠
)

107 c⁄° *
p
;

108 
ch
;

109 
num
;

110 
ba£
, 
lÊag
, 
width
, 
¥ecisi⁄
, 
ÆtÊag
;

111 
∑dc
;

114 (
ch
 = *(*Ë
fmt
++) != '%') {

115 i‡(
ch
 == '\0')

117 
	`putch
 (
ch
, 
putd©
);

121 
∑dc
 = ' ';

122 
width
 = -1;

123 
¥ecisi⁄
 = -1;

124 
lÊag
 = 0;

125 
ÆtÊag
 = 0;

126 
ªswôch
:

127 
ch
 = *(*Ë
fmt
++) {

131 
∑dc
 = '-';

132 
ªswôch
;

136 
∑dc
 = '0';

137 
ªswôch
;

149 
¥ecisi⁄
 = 0;; ++
fmt
) {

150 
¥ecisi⁄
 =Öªcisi⁄ * 10 + 
ch
 - '0';

151 
ch
 = *
fmt
;

152 i‡(
ch
 < '0' || ch > '9')

155 
¥o˚ss_¥ecisi⁄
;

158 
¥ecisi⁄
 = 
	`va_¨g
 (
≠
, );

159 
¥o˚ss_¥ecisi⁄
;

162 i‡(
width
 < 0)

163 
width
 = 0;

164 
ªswôch
;

167 
ÆtÊag
 = 1;

168 
ªswôch
;

170 
¥o˚ss_¥ecisi⁄
:

171 i‡(
width
 < 0)

172 
width
 = 
¥ecisi⁄
,Örecision = -1;

173 
ªswôch
;

177 
lÊag
++;

178 
ªswôch
;

182 i‡((
size_t
) == ())

183 
lÊag
 = 1;

184 i‡((
size_t
) == ())

185 
lÊag
 = 2;

187 
lÊag
 = 0;

188 
ªswôch
;

192 
	`putch
 (
	`va_¨g
 (
≠
, ), 
putd©
);

197 i‡((
p
 = 
	`va_¨g
 (
≠
, *)Ë=
NULL
)

198 
p
 = "(null)";

199 i‡(
width
 > 0 && 
∑dc
 != '-')

200 
width
 -
	`°æí
 (
p
); width > 0; width--)

201 
	`putch
 (
∑dc
, 
putd©
);

202 ; (
ch
 = *
p
++Ë!'\0' && (
¥ecisi⁄
 < 0 || --precision >= 0);

203 
width
--)

204 i‡(
ÆtÊag
 && (
ch
 < ' ' || ch > '~'))

205 
	`putch
 ('?', 
putd©
);

207 
	`putch
 (
ch
, 
putd©
);

208 ; 
width
 > 0; width--)

209 
	`putch
 (' ', 
putd©
);

214 
num
 = 
	`gëöt
 (
≠
, 
lÊag
);

215 
ba£
 = 2;

216 
numbî
;

220 
num
 = 
	`gëöt
 (
≠
, 
lÊag
);

221 i‡((Ë
num
 < 0) {

222 
	`putch
 ('-', 
putd©
);

223 
num
 = -()Çum;

225 
ba£
 = 10;

226 
numbî
;

230 
num
 = 
	`gëuöt
 (
≠
, 
lÊag
);

231 
ba£
 = 10;

232 
numbî
;

236 
num
 = 
	`gëuöt
 (
≠
, 
lÊag
);

237 
ba£
 = 8;

238 
numbî
;

242 
	`putch
 ('0', 
putd©
);

243 
	`putch
 ('x', 
putd©
);

244 
num
 = ()

245 (
uöçå_t
Ë
	`va_¨g
 (
≠
, *);

246 
ba£
 = 16;

247 
numbî
;

251 
num
 = 
	`gëuöt
 (
≠
, 
lÊag
);

252 
ba£
 = 16;

253 
numbî
:

254 
	`¥öäum
 (
putch
, 
putd©
, 
num
, 
ba£
, 
	`JMAX
 (
width
, 0), 
∑dc
);

259 
	`putch
 ('%', 
putd©
);

260 
lÊag
-- > 0)

261 
	`putch
 ('l', 
putd©
);

266 
	`putch
 (
ch
, 
putd©
);

269 
	}
}

272 
¥ötfmt
 ((*
putch
Ë(, *), *
putd©
, c⁄° *
fmt
, ...)

274 
va_li°
 
≠
;

276 
	`va_°¨t
 (
≠
, 
fmt
);

277 
	`v¥ötfmt
 (
putch
, 
putd©
, 
fmt
, 
≠
);

278 
	`va_íd
 (
≠
);

279 
	}
}

281 #ifde‡
JOS_KERNEL


282 
	s•rötbuf


284 *
	mbuf
;

285 *
	mebuf
;

286 
	m˙t
;

290 
	$•röçutch
 (
ch
, 
•rötbuf
 *
b
)

292 
b
->
˙t
++;

293 i‡(
b
->
buf
 < b->
ebuf
)

294 *
b
->
buf
++ = 
ch
;

295 
	}
}

298 
	$v¢¥ötf
 (*
buf
, 
size_t
 
n
, c⁄° *
fmt
, 
va_li°
 
≠
)

300 
•rötbuf
 
b
 = { 
buf
, bu‡+ 
n
 - 1, 0 };

302 i‡(
buf
 =
NULL
 || 
n
 < 1)

303  -
E_INVAL
;

306 
	`v¥ötfmt
 ((*Ë
•röçutch
, &
b
, 
fmt
, 
≠
);

309 *
b
.
buf
 = '\0';

311  
b
.
˙t
;

312 
	}
}

315 
	$¢¥ötf
 (*
buf
, 
size_t
 
n
, c⁄° *
fmt
, ...)

317 
va_li°
 
≠
;

318 
rc
;

320 
	`va_°¨t
 (
≠
, 
fmt
);

321 
rc
 = 
	`v¢¥ötf
 (
buf
, 
n
, 
fmt
, 
≠
);

322 
	`va_íd
 (
≠
);

324  
rc
;

325 
	}
}

328 
	$•rötf
 (*
buf
, c⁄° *
fmt
, ...)

330 
va_li°
 
≠
;

331 
˙t
;

333 
	`va_°¨t
 (
≠
, 
fmt
);

334 
˙t
 = 
	`v¢¥ötf
 (
buf
, 100000, 
fmt
, 
≠
);

335 
	`va_íd
 (
≠
);

337  
˙t
;

338 
	}
}

	@lib/readline.c

1 
	~<öc/°dio.h
>

2 
	~<öc/îr‹.h
>

4 
	#BUFLEN
 1024

	)

5 
	gbuf
[
BUFLEN
];

8 
	$ªadlöe
(c⁄° *
¥om±
)

10 
i
, 
c
, 
echoög
;

12 i‡(
¥om±
 !
NULL
)

13 
	`˝rötf
("%s", 
¥om±
);

15 
i
 = 0;

16 
echoög
 = 
	`isc⁄s
(0);

18 
c
 = 
	`gëch¨
();

19 i‡(
c
 < 0) {

20 
	`˝rötf
("ªadÉº‹: %d\n", 
c
);

21  
NULL
;

22 } i‡(
c
 >' ' && 
i
 < 
BUFLEN
-1) {

23 i‡(
echoög
)

24 
	`˝utch¨
(
c
);

25 
buf
[
i
++] = 
c
;

26 } i‡(
c
 ='\b' && 
i
 > 0) {

27 i‡(
echoög
)

28 
	`˝utch¨
(
c
);

29 
i
--;

30 } i‡(
c
 == '\n' || c == '\r') {

31 i‡(
echoög
)

32 
	`˝utch¨
(
c
);

33 
buf
[
i
] = 0;

34  
buf
;

37 
	}
}

	@lib/string.c

3 
	~<öc/°rög.h
>

6 
	$°æí
(c⁄° *
s
)

8 
n
;

10 
n
 = 0; *
s
 != '\0'; s++)

11 
n
++;

12  
n
;

13 
	}
}

16 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
size
)

18 
n
;

20 
n
 = 0; 
size
 > 0 && *
s
 != '\0'; s++, size--)

21 
n
++;

22  
n
;

23 
	}
}

26 
	$°r˝y
(*
d°
, c⁄° *
§c
)

28 *
ªt
;

30 
ªt
 = 
d°
;

31 (*
d°
++ = *
§c
++) != '\0')

33  
ªt
;

34 
	}
}

37 
	$°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
) {

38 
size_t
 
i
;

39 *
ªt
;

41 
ªt
 = 
d°
;

42 
i
 = 0; i < 
size
; i++) {

43 *
d°
++ = *
§c
;

45 i‡(*
§c
 != '\0')

46 
§c
++;

48  
ªt
;

49 
	}
}

51 
size_t


52 
	$°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
)

54 *
d°_ö
;

56 
d°_ö
 = 
d°
;

57 i‡(
size
 > 0) {

58 --
size
 > 0 && *
§c
 != '\0')

59 *
d°
++ = *
§c
++;

60 *
d°
 = '\0';

62  
d°
 - 
d°_ö
;

63 
	}
}

66 
	$°rcmp
(c⁄° *
p
, c⁄° *
q
)

68 *
p
 && *∞=*
q
)

69 
p
++, 
q
++;

70  (Ë((Ë*
p
 - (Ë*
q
);

71 
	}
}

74 
	$°∫cmp
(c⁄° *
p
, c⁄° *
q
, 
size_t
 
n
)

76 
n
 > 0 && *
p
 && *∞=*
q
)

77 
n
--, 
p
++, 
q
++;

78 i‡(
n
 == 0)

81  (Ë((Ë*
p
 - (Ë*
q
);

82 
	}
}

87 
	$°rchr
(c⁄° *
s
, 
c
)

89 ; *
s
; s++)

90 i‡(*
s
 =
c
)

91  (*Ë
s
;

93 
	}
}

98 
	$°rföd
(c⁄° *
s
, 
c
)

100 ; *
s
; s++)

101 i‡(*
s
 =
c
)

103  (*Ë
s
;

104 
	}
}

108 
	$mem£t
(*
v
, 
c
, 
size_t
 
n
)

110 *
p
;

111 
m
;

113 
p
 = 
v
;

114 
m
 = 
n
;

115 --
m
 >= 0)

116 *
p
++ = 
c
;

118  
v
;

119 
	}
}

124 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

126 c⁄° 
uöt8_t
 *
s
;

127 
uöt8_t
 *
d
;

129 
s
 = 
§c
;

130 
d
 = 
d°
;

131 i‡(
s
 < 
d
 && s + 
n
 > d) {

132 
s
 +
n
;

133 
d
 +
n
;

134 
n
-- > 0)

135 *--
d
 = *--
s
;

137 
n
-- > 0)

138 *
d
++ = *
s
++;

140  
d°
;

141 
	}
}

152 
	$memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
size_t
 
n
)

154 c⁄° 
uöt8_t
 *
s1
 = (c⁄° uöt8_à*Ë
v1
;

155 c⁄° 
uöt8_t
 *
s2
 = (c⁄° uöt8_à*Ë
v2
;

157 
n
-- > 0) {

158 i‡(*
s1
 !*
s2
)

159  (Ë*
s1
 - (Ë*
s2
;

160 
s1
++, 
s2
++;

164 
	}
}

167 
	$memföd
(c⁄° *
s
, 
c
, 
size_t
 
n
)

169 c⁄° *
íds
 = (c⁄° *Ë
s
 + 
n
;

170 ; 
s
 < 
íds
; s++)

171 i‡(*(c⁄° *Ë
s
 =(Ë
c
)

173  (*Ë
s
;

174 
	}
}

177 
	$°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
)

179 
√g
 = 0;

180 
vÆ
 = 0;

183 *
s
 == ' ' || *s == '\t')

184 
s
++;

187 i‡(*
s
 == '+')

188 
s
++;

189 i‡(*
s
 == '-')

190 
s
++, 
√g
 = 1;

193 i‡((
ba£
 =0 || ba£ =16Ë&& (
s
[0] == '0' && s[1] == 'x'))

194 
s
 +2, 
ba£
 = 16;

195 i‡(
ba£
 =0 && 
s
[0] == '0')

196 
s
++, 
ba£
 = 8;

197 i‡(
ba£
 == 0)

198 
ba£
 = 10;

202 
dig
;

204 i‡(*
s
 >= '0' && *s <= '9')

205 
dig
 = *
s
 - '0';

206 i‡(*
s
 >= 'a' && *s <= 'z')

207 
dig
 = *
s
 - 'a' + 10;

208 i‡(*
s
 >= 'A' && *s <= 'Z')

209 
dig
 = *
s
 - 'A' + 10;

212 i‡(
dig
 >
ba£
)

214 
s
++, 
vÆ
 = (vÆ * 
ba£
Ë+ 
dig
;

218 i‡(
íd±r
)

219 *
íd±r
 = (*Ë
s
;

220  (
√g
 ? -
vÆ
 : val);

221 
	}
}

	@osvmodul/lsn.c

31 
	~<löux/kî√l.h
>

32 
	~<löux/jiffõs.h
>

33 
	~<löux/moduÀ.h
>

34 
	~<löux/öãºu±.h
>

35 
	~<löux/fs.h
>

36 
	~<löux/ty≥s.h
>

37 
	~<löux/°rög.h
>

38 
	~<löux/sockë.h
>

39 
	~<löux/î∫o.h
>

40 
	~<löux/f˙é.h
>

41 
	~<löux/ö.h
>

42 
	~<löux/öô.h
>

44 
	~<asm/sy°em.h
>

45 
	~<asm/uac˚ss.h
>

46 
	~<asm/io.h
>

48 
	~<löux/öë.h
>

49 
	~<löux/√tdevi˚.h
>

50 
	~<löux/ëhîdevi˚.h
>

51 
	~<löux/skbuff.h
>

52 
	~<löux/ëhtoﬁ.h
>

53 
	~<√t/sock.h
>

54 
	~<√t/checksum.h
>

55 
	~<löux/if_ëhî.h
>

56 
	~<löux/if_¨p.h
>

57 
	~<löux/ù.h
>

58 
	~<löux/t˝.h
>

59 
	~<löux/≥r˝u.h
>

60 
	~<√t/√t_«me•a˚.h
>

62 
	s¢uŒ_¥iv
 {

63 
√t_devi˚_°©s
 
	m°©s
;

64 
	m°©us
;

65 
	mrx_öt_íabÀd
;

66 
	mtx_∑ckëÀn
;

67 
u8
 *
	mtx_∑ckëd©a
;

68 
sk_buff
 *
	mskb
;

69 
•ölock_t
 
	mlock
;

72 
	s¢uŒ_∑ckë
 {

73 
¢uŒ_∑ckë
 *
	m√xt
;

74 
√t_devi˚
 *
	mdev
;

75 
	md©Æí
;

76 
u8
 
	md©a
[
ETH_DATA_LEN
];

77 
	m‰ì
;

80 
¢uŒ_∑ckë
 *
	ggtx_buff
;

81 
	gtx_size
 = 32;

82 
	gcuº_tx
 = 0;

83 
	gtx_‰ì
 = 32;

85 
¢uŒ_∑ckë
 *
	$lo›back_gë_txbuff
()

87 
¢uŒ_∑ckë
 *
pkt
 = 
NULL
;

88 if(
tx_‰ì
)

92 
pkt
 = &
gtx_buff
[
cuº_tx
];

93 
cuº_tx
 %
tx_size
;

94 }!
pkt
->
‰ì
);

95 
tx_‰ì
 --;

96 
pkt
->
‰ì
 = 0;

98  
pkt
;

99 
	}
}

101 
	$lo›back_ªÀa£_tkbuff
(
¢uŒ_∑ckë
 *
pkt
)

103 
tx_‰ì
 ++;

104 
pkt
->
‰ì
 = 1;

105  
tx_‰ì
;

106 
	}
}

112 
	$¢uŒ_hw_tx
(*
buf
, 
Àn
, 
√t_devi˚
 *
dev
)

120 
ùhdr
 *
ih
;

121 
¢uŒ_¥iv
 *
¥iv
;

122 
u32
 *
ßddr
, *
daddr
;

123 
¢uŒ_∑ckë
 *
tx_buf„r
;

126 i‡(
Àn
 < (
ëhhdr
Ë+ (
ùhdr
)) {

127 
	`¥ötk
("snull: Hmm...ÖacketÅoo short (%i octets)\n",

128 
Àn
);

136 
ih
 = (
ùhdr
 *)(
buf
+(
ëhhdr
));

137 
ßddr
 = &
ih
->saddr;

138 
daddr
 = &
ih
->daddr;

140 
ih
->
check
 = 0;

141 
ih
->
check
 = 
	`ù_Á°_csum
((*)ih,ih->
ihl
);

142 
¥iv
 = 
	`√tdev_¥iv
(
dev
);

144 
	`•ö_lock_úq
(&
¥iv
->
lock
);

146 
tx_buf„r
 = 
	`lo›back_gë_txbuff
();

148 
tx_buf„r
->
d©Æí
 = 
Àn
;

149 
	`mem˝y
(
tx_buf„r
->
d©a
, 
buf
, 
Àn
);

153 
¥iv
->
tx_∑ckëÀn
 = 
Àn
;

154 
¥iv
->
tx_∑ckëd©a
 = 
buf
;

155 
¥iv
->
°©s
.
tx_∑ckës
++;

156 
¥iv
->
°©s
.
tx_byãs
 +¥iv->
tx_∑ckëÀn
;

157 
	`dev_k‰ì_skb
(
¥iv
->
skb
);

158 
	`lo›back_ªÀa£_tkbuff
(
tx_buf„r
);

159 
	`•ö_u∆ock_úq
(&
¥iv
->
lock
);

160 
	}
}

163 
	$lo›back_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
)

165 
Àn
;

166 *
d©a
, 
sh‹çkt
[
ETH_ZLEN
];

167 
¢uŒ_¥iv
 *
lb_°©s
 = 
	`√tdev_¥iv
(
dev
);

169 
d©a
 = 
skb
->data;

170 
Àn
 = 
skb
->len;

171 i‡(
Àn
 < 
ETH_ZLEN
) {

172 
	`mem£t
(
sh‹çkt
, 0, 
ETH_ZLEN
);

173 
	`mem˝y
(
sh‹çkt
, 
skb
->
d©a
, skb->
Àn
);

174 
Àn
 = 
ETH_ZLEN
;

175 
d©a
 = 
sh‹çkt
;

177 
dev
->
å™s_°¨t
 = 
jiffõs
;

180 
lb_°©s
->
skb
 = skb;

183 
	`¢uŒ_hw_tx
(
d©a
, 
Àn
, 
dev
);

186 
	}
}

188 
√t_devi˚_°©s
 *
	$lo›back_gë_°©s
(
√t_devi˚
 *
dev
)

190 
¢uŒ_¥iv
 *
lb_°©s
 = 
	`√tdev_¥iv
(
dev
);

191  &
lb_°©s
->
°©s
;

192 
	}
}

194 
u32
 
	$Æways_⁄
(
√t_devi˚
 *
dev
)

197 
	}
}

199 c⁄° 
ëhtoﬁ_›s
 
	glo›back_ëhtoﬁ_›s
 = {

200 .
gë_lök
 = 
Æways_⁄
,

201 .
	g£t_tso
 = 
ëhtoﬁ_›_£t_tso
,

202 .
	ggë_tx_csum
 = 
Æways_⁄
,

203 .
	ggë_sg
 = 
Æways_⁄
,

204 .
	ggë_rx_csum
 = 
Æways_⁄
,

207 
	$lo›back_dev_öô
(
√t_devi˚
 *
dev
)

209 
¢uŒ_¥iv
 *
l°©s
;

211 
l°©s
 = 
	`√tdev_¥iv
(
dev
);

212 i‡(!
l°©s
)

213  -
ENOMEM
;

215 
	`•ö_lock_öô
(&
l°©s
->
lock
);

217 
	}
}

219 
	$lo›back_dev_‰ì
(
√t_devi˚
 *
dev
)

221 
	`‰ì_√tdev
(
dev
);

222 
	}
}

228 
	$lo›back_›í
(
√t_devi˚
 *
dev
)

237 
	`mem˝y
(
dev
->
dev_addr
, "\0SNUL0", 
ETH_ALEN
);

238 
	`√tif_°¨t_queue
(
dev
);

239 
	`¥ötk
(
KERN_INFO
"here in snull open \n");

241 
	}
}

243 c⁄° 
√t_devi˚_›s
 
	glo›back_›s
 = {

244 .
ndo_›í
 = 
lo›back_›í
,

245 .
	gndo_öô
 = 
lo›back_dev_öô
,

246 .
	gndo_°¨t_xmô

lo›back_xmô
,

247 .
	gndo_gë_°©s
 = 
lo›back_gë_°©s
,

254 
	$lo›back_£tup
(
√t_devi˚
 *
dev
)

256 
	`ëhî_£tup
(
dev
);

257 
dev
->
mtu
 = (16 * 1024) + 20 + 20 + 12;

258 
dev
->
h¨d_hódî_Àn
 = 
ETH_HLEN
;

259 
dev
->
addr_Àn
 = 
ETH_ALEN
;

260 
dev
->
Êags
 = 
IFF_NOARP
;

261 
dev
->
„©uªs
 = 
NETIF_F_NO_CSUM
;

262 
dev
->
ëhtoﬁ_›s
 = &
lo›back_ëhtoﬁ_›s
;

263 
dev
->
√tdev_›s
 = &
lo›back_›s
;

264 
dev
->
de°ru˘‹
 = 
lo›back_dev_‰ì
;

265 
	}
}

267 
√t_devi˚
 *
	g¢
;

269 
__öô
 
	$lo›back_√t_öô
()

271 
i
, 
îr
;

273 
îr
 = -
ENOMEM
;

274 
¢
 = 
	`Æloc_√tdev
((
¢uŒ_¥iv
), "¢0", 
lo›back_£tup
);

275 i‡(!
¢
)

276 
out
;

278 
gtx_buff
 = (
¢uŒ_∑ckë
 *)
	`kmÆloc
((¢uŒ_∑ckë)*
tx_size
, 
GFP_KERNEL
);

279 
i
 = 0; i < 
tx_size
; i ++)

280 
gtx_buff
[
i
].
‰ì
 = 1;

281 
îr
 = 
	`ªgi°î_√tdev
(
¢
);

282 i‡(
îr
)

283 
out_‰ì_√tdev
;

288 
out_‰ì_√tdev
:

289 
	`‰ì_√tdev
(
¢
);

290 
out
:

291  
îr
;

292 
	}
}

294 
__exô
 
	$lo›back_√t_exô
()

296 
	`k‰ì
(
gtx_buff
);

297 
	`uƒegi°î_√tdev
(
¢
);

298 
	}
}

300 
moduÀ_öô
(
lo›back_√t_öô
);

301 
moduÀ_exô
(
lo›back_√t_exô
)

	@osvmodul/osvstd.h

1 #i‚de‡
__KERNEL__


3 
	~<°döt.h
>

5 
	tu64
;

6 
	tu32
;

7 
	tu16
;

8 
	tu8
;

19 
	#VMCALL_READ
 0

	)

20 
	#VMCALL_OPEN
 1

	)

21 
	#VMCALL_WRITE
 2

	)

22 
	#VMCALL_CLOSE
 3

	)

23 
	#VMCALL_VMCONS
 4

	)

24 
	#VMCALL_STARTVM
 5

	)

25 
	#VMCALL_SOCKET
 6

	)

26 
	#VMCALL_APIC
 7

	)

27 
	#VMCALL_SNULL_INIT
 8

	)

28 
	#VMCALL_SNULL_TX
 9

	)

29 
	#VMCALL_SNULL_GET
 11

	)

30 
	#VMCALL_SNULL_INTERNAL
 12

	)

31 
	#VMCALL_GETDID
 13

	)

33 
__ölöe
 
	$vmmªad
()

35 
addr
;

36 
ªt
;

38 
addr
 = 0;

39 
__asm
 
	`__vﬁ©ûe
("vmmcall\n\t"

40 :"˜"(
ªt
)

41 :"a"(
VMCALL_READ
), "D"(
addr
)

43  
ªt
;

44 
	}
}

46 
__ölöe
 
	$vmm›í
()

49 
	}
}

51 
__ölöe
 
	$vmmwrôe
()

54 
	}
}

56 
__ölöe
 
	$vmm˛o£
()

59 
	}
}

61 
__ölöe
 
	$vmmc⁄s
(
u64
 
addr
)

63 
u64
 
adr
;

64 
ªt
;

66 
adr
 = 
addr
;

67 
__asm
 
	`__vﬁ©ûe
("vmmcall\n\t"

68 :"˜"(
ªt
)

69 :"a"(
VMCALL_VMCONS
), "D"(
addr
)

71  
ªt
;

72 
	}
}

74 
__ölöe
 
	$°¨t_vm
(
id
)

76 
ªt
;

78 
__asm
 
	`__vﬁ©ûe
("vmmcall\n\t"

79 :"˜"(
ªt
)

80 :"a"(
VMCALL_STARTVM
), "D"(
id
)

82  
ªt
;

83 
	}
}

85 
__ölöe
 
uöt64_t
 
	$vmm_¢uŒ_öô
(
u64
 
addr
, 
id
)

87 
uöt64_t
 
ªt1
, 
ªt
;

88 
__asm
 
	`__vﬁ©ûe
("vmmcall\n\t"

89 :"˜"(
ªt1
),"=b"(
ªt
)

90 :"a"(
VMCALL_SNULL_INIT
), "D"(
addr
), "S"(
id
)

93  
ªt
;

94 
	}
}

96 
__ölöe
 
u64
 
	$vmm_¢uŒ_gë
(
id
)

98 
u64
 
ªt
;

99 
__asm
 
	`__vﬁ©ûe
("vmmcall\n\t"

100 :"=D"(
ªt
)

101 :"a"(
VMCALL_SNULL_GET
), "S"(
id
)

103  
ªt
;

104 
	}
}

106 
__ölöe
 
	$vmm_¢uŒ_öã∫Æ
()

108 
ªt
;

109 
__asm
 
	`__vﬁ©ûe
("vmmcall\n\t"

110 :"˜"(
ªt
)

111 :"a"(
VMCALL_SNULL_INTERNAL
)

113  
ªt
;

114 
	}
}

116 
__ölöe
 
	$vmm_gë_did
()

118 
ªt
;

119 
__asm
 
	`__vﬁ©ûe
("vmmcall\n\t"

120 :"=D"(
ªt
)

121 :"a"(
VMCALL_GETDID
)

123  
ªt
;

124 
	}
}

	@osvmodul/snull.c

18 
	~<löux/moduÀ.h
>

19 
	~<löux/öô.h
>

20 
	~<löux/moduÀ∑øm.h
>

22 
	~<löux/sched.h
>

23 
	~<löux/kî√l.h
>

24 
	~<löux/¶ab.h
>

25 
	~<löux/î∫o.h
>

26 
	~<löux/ty≥s.h
>

27 
	~<löux/öãºu±.h
>

28 
	~<löux/≥r˝u.h
>

29 
	~<asm/io.h
>

31 
	~<löux/ö.h
>

32 
	~<löux/√tdevi˚.h
>

33 
	~<löux/ëhîdevi˚.h
>

34 
	~<löux/ù.h
>

35 
	~<löux/t˝.h
>

36 
	~<löux/skbuff.h
>

38 
	~<löux/ö6.h
>

39 
	~<asm/checksum.h
>

41 
	~"¢uŒ.h
"

42 
	~"osv°d.h
"

44 
	#MAX_DOMAINS
 2

	)

46 
MODULE_AUTHOR
("Alessandro Rubini, Jonathan Corbet");

47 
MODULE_LICENSE
("Dual BSD/GPL");

50 
	gid
 = 0;

55 
	s¢uŒ_∑ckë
 {

56 
¢uŒ_∑ckë
 *
	m√xt
;

57 
√t_devi˚
 *
	mdev
;

58 
u32
 
	md©Æí
;

59 
u8
 
	md©a
[
ETH_DATA_LEN
];

60 
u32
 
	m‰ì
;

61 }
__©åibuã__
((
∑cked
));

64 
¢uŒ_∑ckë
 *
	gtx_¢uŒ_pkt
[
MAX_DOMAINS
];

66 
	gpoﬁ_size
 = 2048;

73 
	s¢uŒ_¥iv
 {

74 
√t_devi˚_°©s
 
	m°©s
;

75 *
	ml°©s
;

76 
	m°©us
;

77 
¢uŒ_∑ckë
 *
	mµoﬁ
;

78 
¢uŒ_∑ckë
 *
	mrx_queue
;

79 
	mrx_öt_íabÀd
;

80 
	mtx_∑ckëÀn
;

81 
u8
 *
	mtx_∑ckëd©a
;

82 
sk_buff
 *
	mskb
;

83 
•ölock_t
 
	mlock
;

84 }
__©åibuã__
((
∑cked
));

86 
	s∑ckë_c⁄åﬁ


88 
u32
 
	mcur_pos
;

89 
u32
 
	m∑cked
[15];

90 
u32
 
	m°¨t
;

91 
	mlock
;

92 
	mªady
;

93 
¢uŒ_∑ckë
 *
	mpkt
, *
	mp_pkt
, *
	mçkt
;

94 
	mÊag
;

95 }
__©åibuã__
((
∑cked
));

97 
	sp˝u_l°©s


99 
	mçackës
;

100 
	mΩackës
;

101 
	mtbyãs
;

102 
	mrbyãs
;

106 
∑ckë_c⁄åﬁ
 *
	g¢
[
MAX_DOMAINS
];

108 
¢uŒ_tx_timeout
(
√t_devi˚
 *
dev
);

110 
	s¢uŒ_éë_¨g


112 
èskÀt_°ru˘
 
	méë
;

113 
√t_devi˚
 *
	mdev
;

115 
¢uŒ_éë_¨g
 *
	g°l
;

117 
	#IRQ_NUM
 9

	)

118 
úqªtu∫_t
 
	$ùi_h™dÀr
(
vec
, *
dev_id
)

120 
	`èskÀt_scheduÀ
(&
°l
->
éë
);

121 
	`ack_APIC_úq
();

123  
IRQ_HANDLED
;

124 
	}
}

126 
	$£nd_d©¨ódy_ùi
(
˝u_phy_id
)

128 if(
˝u_phy_id
 == 0)

129 
˝u_phy_id
 = 0x20;

131 
˝u_phy_id
 = 0x44;

132 
	`«tive_≠ic_mem_wrôe
(0x310, 
˝u_phy_id
<<24);

133 
	`«tive_≠ic_mem_wrôe
(0x300, 0x30 + 
IRQ_NUM
);

135 
	}
}

137 
	$¢uŒ_ã¨down_poﬁ
(
√t_devi˚
 *
dev
)

139 
	`k‰ì
(
¢
[
id
]->
pkt
);

140 
	`k‰ì
(
¢
[
id
]);

141 
	}
}

147 
	$¢uŒ_›í
(
√t_devi˚
 *
dev
)

156 
	`mem˝y
(
dev
->
dev_addr
, "\0SNUL0", 
ETH_ALEN
);

157 
dev
->
dev_addr
[
ETH_ALEN
 - 1] +
id
;

158 
	`√tif_°¨t_queue
(
dev
);

160 
	}
}

162 
	$¢uŒ_dev_‰ì
(
√t_devi˚
 *
dev
)

165 
	}
}

167 
	$¢uŒ_ªÀa£
(
√t_devi˚
 *
dev
)

171 
	`√tif_°›_queue
(
dev
);

173 
	}
}

178 
	$¢uŒ_c⁄fig
(
√t_devi˚
 *
dev
, 
ifm≠
 *
m≠
)

180 i‡(
dev
->
Êags
 & 
IFF_UP
)

181  -
EBUSY
;

184 i‡(
m≠
->
ba£_addr
 !
dev
->base_addr) {

185 
	`¥ötk
(
KERN_WARNING
 "snull: Can't change I/Oáddress\n");

186  -
EOPNOTSUPP
;

190 i‡(
m≠
->
úq
 !
dev
->irq) {

191 
dev
->
úq
 = 
m≠
->irq;

197 
	}
}

210 
	$¢uŒ_rx
(
√t_devi˚
 *
dev
, 
¢uŒ_∑ckë
 *
pkt
)

212 
sk_buff
 *
skb
;

213 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

214 
p˝u_l°©s
 *p˝u_l°©s, *
lb_°©s
;

216 *
buf
;

217 * 
ßddr
;

218 
ùhdr
* 
ih
;

225 
skb
 = 
	`dev_Æloc_skb
(
pkt
->
d©Æí
 + 2);

227 i‡(!
skb
) {

228 i‡(
	`¥ötk_øãlimô
())

229 
	`¥ötk
(
KERN_NOTICE
 "snullÑx:Üow on mem -Öacket dropped\n");

230 
¥iv
->
°©s
.
rx_dr›≥d
++;

231 
out
;

233 
	`skb_ª£rve
(
skb
, 2);

234 
	`mem˝y
(
	`skb_put
(
skb
, 
pkt
->
d©Æí
),Ökt->
d©a
,Ökt->datalen);

237 
skb
->
dev
 = dev;

238 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
dev
);

239 
skb
->
ù_summed
 = 
CHECKSUM_UNNECESSARY
;

241 
buf
 = 
pkt
->
d©a
;

242 
ih
 = (
ùhdr
*)(
buf
 + (
ëhhdr
));

243 
ßddr
 = (*)&
ih
->saddr;

246 
p˝u_l°©s
 = 
¥iv
->
l°©s
;

247 
lb_°©s
 = 
	`≥r_˝u_±r
(
p˝u_l°©s
, 
	`smp_¥o˚ss‹_id
());

248 
lb_°©s
->
rbyãs
 +
pkt
->
d©Æí
;

249 
lb_°©s
->
Ωackës
 ++;

251 if(
¢
[
id
]->
°¨t
 =
poﬁ_size
 - 1)

252 
¢
[
id
]->
°¨t
 = 0;

254 
¢
[
id
]->
°¨t
 ++;

255 
	`√tif_rx
(
skb
);

256 
out
:

258 
	}
}

260 
	g¢uŒ_ªmoved
 = 0;

263 
	$¢uŒ_èskÀt_rx
(
¨g
)

265 
¢uŒ_éë_¨g
 *
°¨g
 = (¢uŒ_éë_¨g *)
¨g
;

266 
√t_devi˚
 *
dev
;

267 
¢uŒ_¥iv
 *
¥iv
;

269 
dev
 = 
°¨g
->dev;

270 
¥iv
 = 
	`√tdev_¥iv
(
dev
);

277 if(
¢uŒ_ªmoved
)

282 
ªdo
:

283 
¢
[
id
]->
cur_pos
 !¢[id]->
°¨t
)

285 
	`¢uŒ_rx
(
dev
, &
tx_¢uŒ_pkt
[
id
][
¢
[id]->
°¨t
]);

288 
¢
[
id
]->
Êag
 = 0;

289 if(
¢
[
id
]->
cur_pos
 !¢[id]->
°¨t
)

290 
ªdo
;

309 
	}
}

311 
	gtx_size
 = 32;

312 
	gcuº_tx
 = 0;

313 
	gtx_‰ì
 = 32;

315 
ölöe
 
¢uŒ_∑ckë
 *
	$¢uŒ_gë_rx_pk
(
∑ckë_c⁄åﬁ
 *
˘l
, 
idx
)

317 
¢uŒ_∑ckë
 *
pkt
;

319 if(((
˘l
->
cur_pos
 + 1Ë% 
poﬁ_size
Ë=˘l->
°¨t
)

322 
pkt
 = &
tx_¢uŒ_pkt
[
idx
][
˘l
->
cur_pos
];

323  
pkt
;

324 
	}
}

326 
	$¢uŒ_ªÆ_tx_›t
(*
§c
, 
idx
, 
Àn
)

328 
¢uŒ_∑ckë
 *
des
;

329 
∑ckë_c⁄åﬁ
 *
˘l
;

331 
˘l
 = 
¢
[
idx
];

333 
des
 = 
	`¢uŒ_gë_rx_pk
(
˘l
, 
idx
);

334 if(!
des
)

339 
	`mem˝y
(
des
->
d©a
, 
§c
, 
Àn
);

340 
des
->
d©Æí
 = 
Àn
;

341 if(
˘l
->
cur_pos
 =
poﬁ_size
 - 1)

342 
˘l
->
cur_pos
 = 0;

344 
˘l
->
cur_pos
 ++;

347 
	}
}

352 
ölöe
 
	$¢uŒ_hw_tx
(*
buf
, 
Àn
, 
√t_devi˚
 *
dev
)

360 
ùhdr
 *
ih
;

361 
¢uŒ_¥iv
 *
¥iv
;

362 
ëhhdr
 *
ëh
;

363 
p˝u_l°©s
 *p˝u_l°©s, *
lb_°©s
;

364 
des
;

365 *
ßddr
, *
daddr
, *
mac
;

366 
mu…i
;

367 
i
;

370 i‡(
	`u∆ikñy
(
Àn
 < (
ëhhdr
Ë+ (
ùhdr
))) {

371 
	`¥ötk
("snull: Hmm...ÖacketÅoo short (%i octets)\n",

372 
Àn
);

378 i‡(0Ë{ 
i
;

379 
	`PDEBUG
("À¿i†%i\n" 
KERN_DEBUG
 "d©a:",
Àn
);

380 
i
=14 ; i<
Àn
; i++)

381 
	`¥ötk
(" %02x",
buf
[
i
]&0xff);

382 
	`¥ötk
("\n");

389 
ëh
 = (
ëhhdr
 *Ë
buf
;

390 
ih
 = (
ùhdr
 *)(
buf
+(
ëhhdr
));

392 
ih
->
check
 = 0;

393 
ih
->
check
 = 
	`ù_Á°_csum
((*)ih,ih->
ihl
);

394 
¥iv
 = 
	`√tdev_¥iv
(
dev
);

396 
ßddr
 = (*)&
ih
->saddr;

397 
daddr
 = (*)&
ih
->daddr;

398 
mac
 = (*)&
ëh
->
h_de°
;

401 
des
 = 
daddr
[3] - 1;

402 
mu…i
 = 
daddr
[0];

403 if(
daddr
[3] =254 || (
mu…i
 >= 224 && multi <= 238))

405 
i
 = 0; i < 
MAX_DOMAINS
; i ++)

408 
des
 = 
i
;

409 if(
	`likñy
(
¢
[
id
]->
ªady
 && sn[
des
]->ready))

411 
	`__øw_•ö_lock
((
øw_•ölock_t
 *Ë&
¢
[
des
]->
lock
);

412 
	`¢uŒ_ªÆ_tx_›t
(
buf
, 
des
, 
Àn
);

413 
	`__øw_•ö_u∆ock
((
øw_•ölock_t
 *Ë&
¢
[
des
]->
lock
);

414 if(
¢
[
des
]->
Êag
 =0 && sn[des]->
ªady
 == 1){

415 
¢
[
des
]->
Êag
 = 1;

418 
	`£nd_d©¨ódy_ùi
(
des
);

421 if(
¢
[
des
]->
ªady
 == 0){

422 
¢
[
des
]->
Êag
 = 0;

423 
¢
[
des
]->
lock
 = 0;

424 
¢
[
des
]->
cur_pos
 = sn[des]->
°¨t
 = 0;

433 if(
des
 < 
MAX_DOMAINS
)

435 if(
	`likñy
(
¢
[
id
]->
ªady
 && sn[
des
]->ready))

437 
	`__øw_•ö_lock
((
øw_•ölock_t
 *Ë&
¢
[
des
]->
lock
);

438 
	`¢uŒ_ªÆ_tx_›t
(
buf
, 
des
, 
Àn
);

439 
	`__øw_•ö_u∆ock
((
øw_•ölock_t
 *Ë&
¢
[
des
]->
lock
);

440 if(
¢
[
des
]->
Êag
 =0 && sn[des]->
ªady
 == 1){

441 
¢
[
des
]->
Êag
 = 1;

444 
	`£nd_d©¨ódy_ùi
(
des
);

447 if(
¢
[
des
]->
ªady
 == 0){

448 
¢
[
des
]->
Êag
 = 0;

449 
¢
[
des
]->
lock
 = 0;

450 
¢
[
des
]->
cur_pos
 = sn[des]->
°¨t
 = 0;

455 
¥iv
->
tx_∑ckëÀn
 = 
Àn
;

456 
¥iv
->
tx_∑ckëd©a
 = 
buf
;

458 
	`dev_k‰ì_skb
(
¥iv
->
skb
);

460 
p˝u_l°©s
 = 
¥iv
->
l°©s
;

461 
lb_°©s
 = 
	`≥r_˝u_±r
(
p˝u_l°©s
, 
	`smp_¥o˚ss‹_id
());

462 
lb_°©s
->
tbyãs
 +
Àn
;

463 
lb_°©s
->
çackës
 ++;

464 
	}
}

469 
	$¢uŒ_tx
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
)

471 
Àn
;

472 *
d©a
;

473 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

477 
d©a
 = 
skb
->data;

478 
Àn
 = 
skb
->len;

487 
dev
->
å™s_°¨t
 = 
jiffõs
;

490 
¥iv
->
skb
 = skb;

493 
	`¢uŒ_hw_tx
(
d©a
, 
Àn
, 
dev
);

496 
	}
}

501 
	$¢uŒ_tx_timeout
 (
√t_devi˚
 *
dev
)

503 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

504 
p˝u_l°©s
 *p˝u_l°©s, *
lb_°©s
;

506 
	`PDEBUG
("TønsmôÅimeouà© %ld,Ü©ícy %ld\n", 
jiffõs
,

507 
jiffõs
 - 
dev
->
å™s_°¨t
);

509 
¥iv
->
°©us
 = 
SNULL_TX_INTR
;

511 
p˝u_l°©s
 = 
¥iv
->
l°©s
;

512 
lb_°©s
 = 
	`≥r_˝u_±r
(
p˝u_l°©s
, 
	`smp_¥o˚ss‹_id
());

513 
lb_°©s
->
tbyãs
 +
¥iv
->
tx_∑ckëÀn
;

514 
lb_°©s
->
çackës
 ++;

516 
	`dev_k‰ì_skb
(
¥iv
->
skb
);

517 
	`√tif_wake_queue
(
dev
);

519 
	}
}

524 
	$¢uŒ_io˘l
(
√t_devi˚
 *
dev
, 
i‰eq
 *
rq
, 
cmd
)

526 
	`PDEBUG
("ioctl\n");

528 
	}
}

533 
√t_devi˚_°©s
 *
	$¢uŒ_°©s
(
√t_devi˚
 *
dev
)

535 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

536 c⁄° 
p˝u_l°©s
 *pcpu_lstats;

537 
√t_devi˚_°©s
 *
°©s
 = &
¥iv
->stats;

538 
i
;

540 
°©s
->
rx_∑ckës
 = 0;

541 
°©s
->
tx_∑ckës
 = 0;

542 
°©s
->
rx_byãs
 = 0;

543 
°©s
->
tx_byãs
 = 0;

546 
p˝u_l°©s
 = 
¥iv
->
l°©s
;

547 
	`f‹_óch_possibÀ_˝u
(
i
)

549 c⁄° 
p˝u_l°©s
 *
lb_°©s
;

550 
lb_°©s
 = 
	`≥r_˝u_±r
(
p˝u_l°©s
, 
i
);

551 
°©s
->
rx_∑ckës
 +
lb_°©s
->
Ωackës
;

552 
°©s
->
tx_∑ckës
 +
lb_°©s
->
çackës
;

553 
°©s
->
rx_byãs
 +
lb_°©s
->
rbyãs
;

554 
°©s
->
tx_byãs
 +
lb_°©s
->
tbyãs
;

557  
°©s
;

558 
	}
}

564 
	$¢uŒ_ªbuûd_hódî
(
sk_buff
 *
skb
)

566 
ëhhdr
 *
ëh
 = (ëhhd∏*Ë
skb
->
d©a
;

567 
√t_devi˚
 *
dev
 = 
skb
->dev;

569 
	`mem˝y
(
ëh
->
h_sour˚
, 
dev
->
dev_addr
, dev->
addr_Àn
);

570 
	`mem˝y
(
ëh
->
h_de°
, 
dev
->
dev_addr
, dev->
addr_Àn
);

571 
ëh
->
h_de°
[
ETH_ALEN
-1] +
id
;

573 
	}
}

575 
	$¢uŒ_hódî
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
,

576 
ty≥
, c⁄° *
daddr
, c⁄° *
ßddr
,

577 
Àn
)

579 
ëhhdr
 *
ëh
 = (ëhhd∏*)
	`skb_push
(
skb
,
ETH_HLEN
);

580 
ùhdr
 *
ih
;

581 
des
;

582 *
dadd
;

585 
ih
 = (
ùhdr
*)(
skb
->
d©a
 + (
ëhhdr
));

586 
des
 = ((*)&
ih
->
daddr
)[3] - 1;

587 
dadd
 = (*)&
ih
->
daddr
;

589 if(
des
 >
MAX_DOMAINS
)

590 
des
 = 0;

592 
ëh
->
h_¥Ÿo
 = 
	`ht⁄s
(
ty≥
);

593 
	`mem˝y
(
ëh
->
h_sour˚
, 
ßddr
 ? sadd∏: 
dev
->
dev_addr
, dev->
addr_Àn
);

594 
	`mem˝y
(
ëh
->
h_de°
, 
daddr
 ? dadd∏: 
dev
->
dev_addr
, dev->
addr_Àn
);

597 
ëh
->
h_de°
[
ETH_ALEN
 - 1] = 0x0;

598 
ëh
->
h_de°
[
ETH_ALEN
 - 1] = 0x30 + 
des
;

601 if(
dadd
[3] == 255)

603 
i
;

604 
i
 =0; i < 
ETH_HLEN
; i ++)

605 
ëh
->
h_de°
[
i
] = 0xFF;

607 if((
dadd
[0] & 0xe0) == 0xe0)

609 
ëh
->
h_de°
[0] = 0x01;

610 
ëh
->
h_de°
[1] = 0x0;

611 
ëh
->
h_de°
[2] = 0x5e;

612 
ëh
->
h_de°
[3] = 0x7‡& 
dadd
[1];

613 
ëh
->
h_de°
[4] = 
dadd
[2];

614 
ëh
->
h_de°
[5] = 
dadd
[3];

617  (
dev
->
h¨d_hódî_Àn
);

618 
	}
}

624 
	$¢uŒ_ch™ge_mtu
(
√t_devi˚
 *
dev
, 
√w_mtu
)

626 
Êags
;

627 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

628 
•ölock_t
 *
lock
 = &
¥iv
->lock;

631 i‡((
√w_mtu
 < 68) || (new_mtu > 1500))

632  -
EINVAL
;

636 
	`•ö_lock_úqßve
(
lock
, 
Êags
);

637 
dev
->
mtu
 = 
√w_mtu
;

638 
	`•ö_u∆ock_úqª°‹e
(
lock
, 
Êags
);

640 
	}
}

646 c⁄° 
hódî_›s
 
	g¢uŒ_hódî_›s
 =

648 .
¸óã
 = 
¢uŒ_hódî
,

649 .
	g∑r£
 = 
NULL
,

651 .
	gˇche
 = 
NULL
,

652 .
	gˇche_upd©e
 = 
NULL
,

655 c⁄° 
√t_devi˚_›s
 
	g¢uŒ_›s
 =

657 .
ndo_›í
 = 
¢uŒ_›í
,

658 .
	gndo_°›
 = 
¢uŒ_ªÀa£
,

659 .
	gndo_£t_c⁄fig
 = 
¢uŒ_c⁄fig
,

660 .
	gndo_°¨t_xmô
 = 
¢uŒ_tx
,

661 .
	gndo_do_io˘l
 = 
¢uŒ_io˘l
,

662 .
	gndo_gë_°©s
 = 
¢uŒ_°©s
,

663 .
	gndo_ch™ge_mtu
 = 
¢uŒ_ch™ge_mtu
,

664 .
	gndo_tx_timeout
 = 
¢uŒ_tx_timeout
,

667 
	$¢uŒ_öô
(
√t_devi˚
 *
dev
)

669 
¢uŒ_¥iv
 *
¥iv
;

670 
p˝u_l°©s
 *
l°©s
;

683 
	`ëhî_£tup
(
dev
);

684 
dev
->
√tdev_›s
 = &
¢uŒ_›s
;

685 
dev
->
hódî_›s
 = &
¢uŒ_hódî_›s
;

686 
dev
->
de°ru˘‹
 = 
¢uŒ_dev_‰ì
;

689 
dev
->
Êags
 |
IFF_NOARP
;

696 
¥iv
 = 
	`√tdev_¥iv
(
dev
);

697 
	`mem£t
(
¥iv
, 0, (
¢uŒ_¥iv
));

698 
l°©s
 = 
	`Æloc_≥r˝u
(
p˝u_l°©s
);

699 
¥iv
->
l°©s
 =Üstats;

700 
	`•ö_lock_öô
(&
¥iv
->
lock
);

702 
	}
}

708 
√t_devi˚
 *
	g¢uŒ_dev
;

713 
	$¢uŒ_˛ónup
()

715 
i
;

716 i‡(
¢uŒ_dev
) {

717 
	`‰ì_úq
(
IRQ_NUM
, 
NULL
);

718 
	`uƒegi°î_√tdev
(
¢uŒ_dev
);

719 
	`‰ì_√tdev
(
¢uŒ_dev
);

720 
	`k‰ì
(
¢
[0]);

721 
i
 = 0; i < 
MAX_DOMAINS
; i ++)

722 
	`k‰ì
(
tx_¢uŒ_pkt
[
i
]);

723 
	`¥ötk
(
KERN_INFO
 "Has unregisterd snull\n");

725 
	`k‰ì
(
°l
);

726 
¢uŒ_ªmoved
 = 1;

727 
	`¥ötk
(
KERN_INFO
 "HasÑemoved snull\n");

729 
	}
}

731 
__öô
 
	$¢uŒ_öô_moduÀ
()

733 
ªsu…
, 
ªt
 = -
ENOMEM
;

734 
∑ges
;

735 
j
;

736 
úqr
;

737 
∑ckë_c⁄åﬁ
 *
˘mp
;

738 
uöt64_t
 
sh¨ed_addr
, 
buf_addr
;

740 
id
 = 
	`vmm_gë_did
();

741 
id
 = 0;

743 
sh¨ed_addr
 = 
	`vmm_¢uŒ_öô
(0, 0);

745 
∑ges
 = ((
¢uŒ_∑ckë
Ë* 
poﬁ_size
)%4096 ? (snull_packet) *Öool_size/4096 : ((snull_packet) *Öool_size/4096 + 1);

747 
˘mp
 = (
∑ckë_c⁄åﬁ
 *)
	`i‹em≠
(
sh¨ed_addr
, 100*1024*1024);

748 if(!
˘mp
){

749 
	`¥ötk
(
KERN_INFO
 "i‹em≠ faûed:%lx\n", 
sh¨ed_addr
);

752 
buf_addr
 = ((
uöt64_t
)
˘mp
) + 4096;

755 
j
 = 0; j < 2; j ++)

756 
¢
[
j
] = &
˘mp
[j];

758 
j
 = 0; j < 2; j ++)

760 
¢
[
j
]->
pkt
 = (
¢uŒ_∑ckë
*)(
buf_addr
 + 
∑ges
*4096*j);

761 
¢
[
j
]->
p_pkt
 = (
¢uŒ_∑ckë
*)(
sh¨ed_addr
+4096+
∑ges
*4096*j);

762 
¢
[
j
]->
ªady
 = 0;

763 
¢
[
j
]->
lock
 = 0;

764 
¢
[
j
]->
cur_pos
 = sn[j]->
°¨t
 = 0;

765 
¢
[
j
]->
Êag
 = 0;

768 
j
 = 0; j < 
MAX_DOMAINS
; j ++)

769 
tx_¢uŒ_pkt
[
j
] = 
¢
[j]->
pkt
;

771 
¢
[
id
]->
cur_pos
 = sn[id]->
°¨t
 = 0;

772 
¢
[
id
]->
lock
 = 0;

773 
¢
[
id
]->
ªady
 = 1;

789 
¢uŒ_dev
 = 
	`Æloc_√tdev
((
¢uŒ_¥iv
), "sn0",

790 
¢uŒ_öô
);

791 i‡(
¢uŒ_dev
 =
NULL
)

792 
out
;

794 
ªt
 = -
ENODEV
;

795 i‡((
ªsu…
 = 
	`ªgi°î_√tdev
(
¢uŒ_dev
)))

796 
	`¥ötk
("snull:Érror %iÑegistering device \"%s\"\n",

797 
ªsu…
, 
¢uŒ_dev
->
«me
);

799 
ªt
 = 0;

800 
úqr
 = 
	`ªque°_úq
(
IRQ_NUM
, 
ùi_h™dÀr
, 
IRQF_DISABLED
, "¢uŒ_úq", 
NULL
);

801 if(
úqr
)

802 
	`¥ötk
(
KERN_INFO
 "ªque°_úq füÀd:%d\n", 
úqr
);

808 
°l
 = (
¢uŒ_éë_¨g
 *)
	`kmÆloc
((¢uŒ_éë_¨g), 
GFP_KERNEL
);

810 
°l
->
dev
 = 
¢uŒ_dev
;

811 
	`èskÀt_öô
(&
°l
->
éë
, 
¢uŒ_èskÀt_rx
, ()stl);

813 
out
:

814 i‡(
ªt
)

815 
	`¢uŒ_˛ónup
();

816  
ªt
;

817 
	}
}

819 
moduÀ_öô
(
¢uŒ_öô_moduÀ
);

820 
moduÀ_exô
(
¢uŒ_˛ónup
);

	@osvmodul/snull.h

21 #unde‡
PDEBUG


22 #ifde‡
SNULL_DEBUG


23 #ifde‡
__KERNEL__


25 
	#PDEBUG
(
fmt
, 
¨gs
...Ë
	`¥ötk
–
KERN_DEBUG
 "¢uŒ: " fmt, ##árgs)

	)

28 
	#PDEBUG
(
fmt
, 
¨gs
...Ë
	`Ârötf
(
°dîr
, fmt, ##árgs)

	)

31 
	#PDEBUG
(
fmt
, 
¨gs
...Ë

	)

34 #unde‡
PDEBUGG


35 
	#PDEBUGG
(
fmt
, 
¨gs
...Ë

	)

39 
	#SNULL_RX_INTR
 0x0001

	)

40 
	#SNULL_TX_INTR
 0x0002

	)

43 
	#SNULL_TIMEOUT
 5

	)

45 
√t_devi˚
 *
¢uŒ_devs
[];

	@osvmodul/snull_osv.c

18 
	~<löux/moduÀ.h
>

19 
	~<löux/öô.h
>

20 
	~<löux/moduÀ∑øm.h
>

22 
	~<löux/sched.h
>

23 
	~<löux/kî√l.h
>

24 
	~<löux/¶ab.h
>

25 
	~<löux/î∫o.h
>

26 
	~<löux/ty≥s.h
>

27 
	~<löux/öãºu±.h
>

29 
	~<löux/ö.h
>

30 
	~<löux/√tdevi˚.h
>

31 
	~<löux/ëhîdevi˚.h
>

32 
	~<löux/ù.h
>

33 
	~<löux/t˝.h
>

34 
	~<löux/skbuff.h
>

36 
	~<löux/ö6.h
>

37 
	~<asm/checksum.h
>

39 
	~"¢uŒ.h
"

40 
	~"osv°d.h
"

42 
MODULE_AUTHOR
("Alessandro Rubini, Jonathan Corbet");

43 
MODULE_LICENSE
("Dual BSD/GPL");

49 
	glockup
 = 0;

50 
moduÀ_∑øm
(
lockup
, , 0);

52 
	gtimeout
 = 
SNULL_TIMEOUT
;

53 
moduÀ_∑øm
(
timeout
, , 0);

58 
	gu£_«pi
 = 0;

59 
moduÀ_∑øm
(
u£_«pi
, , 0);

65 
	s¢uŒ_∑ckë
 {

66 
¢uŒ_∑ckë
 *
	m√xt
;

67 
√t_devi˚
 *
	mdev
;

68 
	md©Æí
;

69 
u8
 
	md©a
[
ETH_DATA_LEN
];

72 
	gpoﬁ_size
 = 8;

73 
moduÀ_∑øm
(
poﬁ_size
, , 0);

80 
	s¢uŒ_¥iv
 {

81 
√t_devi˚_°©s
 
	m°©s
;

82 
	m°©us
;

83 
¢uŒ_∑ckë
 *
	mµoﬁ
;

84 
¢uŒ_∑ckë
 *
	mrx_queue
;

85 
	mrx_öt_íabÀd
;

86 
	mtx_∑ckëÀn
;

87 
u8
 *
	mtx_∑ckëd©a
;

88 
sk_buff
 *
	mskb
;

89 
•ölock_t
 
	mlock
;

92 
¢uŒ_tx_timeout
(
√t_devi˚
 *
dev
);

93 (*
¢uŒ_öãºu±
)(, *, 
±_ªgs
 *);

98 
	$¢uŒ_£tup_poﬁ
(
√t_devi˚
 *
dev
)

100 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

101 
i
;

102 
¢uŒ_∑ckë
 *
pkt
;

104 
¥iv
->
µoﬁ
 = 
NULL
;

105 
i
 = 0; i < 
poﬁ_size
; i++) {

106 
pkt
 = 
	`kmÆloc
 ( (
¢uŒ_∑ckë
), 
GFP_KERNEL
);

107 i‡(
pkt
 =
NULL
) {

108 
	`¥ötk
 (
KERN_NOTICE
 "Ran out of memoryállocatingÖacketÖool\n");

111 
pkt
->
dev
 = dev;

112 
pkt
->
√xt
 = 
¥iv
->
µoﬁ
;

113 
¥iv
->
µoﬁ
 = 
pkt
;

115 
	}
}

117 
	$¢uŒ_ã¨down_poﬁ
(
√t_devi˚
 *
dev
)

119 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

120 
¢uŒ_∑ckë
 *
pkt
;

122 (
pkt
 = 
¥iv
->
µoﬁ
)) {

123 
¥iv
->
µoﬁ
 = 
pkt
->
√xt
;

124 
	`k‰ì
 (
pkt
);

127 
	}
}

132 
¢uŒ_∑ckë
 *
	$¢uŒ_gë_tx_buf„r
(
√t_devi˚
 *
dev
)

134 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

135 
Êags
;

136 
¢uŒ_∑ckë
 *
pkt
;

138 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

139 
pkt
 = 
¥iv
->
µoﬁ
;

140 
¥iv
->
µoﬁ
 = 
pkt
->
√xt
;

141 i‡(
¥iv
->
µoﬁ
 =
NULL
) {

142 
	`¥ötk
 (
KERN_INFO
 "PoolÉmpty\n");

143 
	`√tif_°›_queue
(
dev
);

145 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

146  
pkt
;

147 
	}
}

150 
	$¢uŒ_ªÀa£_buf„r
(
¢uŒ_∑ckë
 *
pkt
)

152 
Êags
;

153 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
pkt
->
dev
);

155 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

156 
pkt
->
√xt
 = 
¥iv
->
µoﬁ
;

157 
¥iv
->
µoﬁ
 = 
pkt
;

158 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

159 i‡(
	`√tif_queue_°›≥d
(
pkt
->
dev
Ë&&Ökt->
√xt
 =
NULL
)

160 
	`√tif_wake_queue
(
pkt
->
dev
);

161 
	}
}

163 
	$¢uŒ_íqueue_buf
(
√t_devi˚
 *
dev
, 
¢uŒ_∑ckë
 *
pkt
)

165 
Êags
;

166 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

168 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

169 
pkt
->
√xt
 = 
¥iv
->
rx_queue
;

170 
¥iv
->
rx_queue
 = 
pkt
;

171 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

172 
	}
}

174 
¢uŒ_∑ckë
 *
	$¢uŒ_dequeue_buf
(
√t_devi˚
 *
dev
)

176 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

177 
¢uŒ_∑ckë
 *
pkt
;

178 
Êags
;

180 
	`•ö_lock_úqßve
(&
¥iv
->
lock
, 
Êags
);

181 
pkt
 = 
¥iv
->
rx_queue
;

182 i‡(
pkt
 !
NULL
)

183 
¥iv
->
rx_queue
 = 
pkt
->
√xt
;

184 
	`•ö_u∆ock_úqª°‹e
(&
¥iv
->
lock
, 
Êags
);

185  
pkt
;

186 
	}
}

191 
	$¢uŒ_rx_öts
(
√t_devi˚
 *
dev
, 
íabÀ
)

193 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

194 
¥iv
->
rx_öt_íabÀd
 = 
íabÀ
;

195 
	}
}

202 
	$¢uŒ_›í
(
√t_devi˚
 *
dev
)

211 
	`mem˝y
(
dev
->
dev_addr
, "\0SNUL0", 
ETH_ALEN
);

212 i‡(
dev
 =
¢uŒ_devs
[1])

213 
dev
->
dev_addr
[
ETH_ALEN
-1]++;

214 
	`√tif_°¨t_queue
(
dev
);

216 
	}
}

218 
	$¢uŒ_ªÀa£
(
√t_devi˚
 *
dev
)

222 
	`√tif_°›_queue
(
dev
);

224 
	}
}

229 
	$¢uŒ_c⁄fig
(
√t_devi˚
 *
dev
, 
ifm≠
 *
m≠
)

231 i‡(
dev
->
Êags
 & 
IFF_UP
)

232  -
EBUSY
;

235 i‡(
m≠
->
ba£_addr
 !
dev
->base_addr) {

236 
	`¥ötk
(
KERN_WARNING
 "snull: Can't change I/Oáddress\n");

237  -
EOPNOTSUPP
;

241 i‡(
m≠
->
úq
 !
dev
->irq) {

242 
dev
->
úq
 = 
m≠
->irq;

248 
	}
}

253 
	$¢uŒ_rx
(
√t_devi˚
 *
dev
, 
¢uŒ_∑ckë
 *
pkt
)

255 
sk_buff
 *
skb
;

256 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

262 
skb
 = 
	`dev_Æloc_skb
(
pkt
->
d©Æí
 + 2);

263 i‡(!
skb
) {

264 i‡(
	`¥ötk_øãlimô
())

265 
	`¥ötk
(
KERN_NOTICE
 "snullÑx:Üow on mem -Öacket dropped\n");

266 
¥iv
->
°©s
.
rx_dr›≥d
++;

267 
out
;

269 
	`skb_ª£rve
(
skb
, 2);

270 
	`mem˝y
(
	`skb_put
(
skb
, 
pkt
->
d©Æí
),Ökt->
d©a
,Ökt->datalen);

273 
skb
->
dev
 = dev;

274 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
dev
);

275 
skb
->
ù_summed
 = 
CHECKSUM_UNNECESSARY
;

276 
¥iv
->
°©s
.
rx_∑ckës
++;

277 
¥iv
->
°©s
.
rx_byãs
 +
pkt
->
d©Æí
;

278 
	`√tif_rx
(
skb
);

279 
out
:

281 
	}
}

288 
	$¢uŒ_ªguœr_öãºu±
(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

290 
°©usw‹d
;

291 
¢uŒ_¥iv
 *
¥iv
;

292 
¢uŒ_∑ckë
 *
pkt
 = 
NULL
;

298 
√t_devi˚
 *
dev
 = (√t_devi˚ *)
dev_id
;

302 i‡(!
dev
)

306 
¥iv
 = 
	`√tdev_¥iv
(
dev
);

307 
	`•ö_lock
(&
¥iv
->
lock
);

310 
°©usw‹d
 = 
¥iv
->
°©us
;

311 
¥iv
->
°©us
 = 0;

312 i‡(
°©usw‹d
 & 
SNULL_RX_INTR
) {

314 
pkt
 = 
¥iv
->
rx_queue
;

315 i‡(
pkt
) {

316 
¥iv
->
rx_queue
 = 
pkt
->
√xt
;

317 
	`¢uŒ_rx
(
dev
, 
pkt
);

320 i‡(
°©usw‹d
 & 
SNULL_TX_INTR
) {

322 
¥iv
->
°©s
.
tx_∑ckës
++;

323 
¥iv
->
°©s
.
tx_byãs
 +¥iv->
tx_∑ckëÀn
;

324 
	`dev_k‰ì_skb
(
¥iv
->
skb
);

328 
	`•ö_u∆ock
(&
¥iv
->
lock
);

329 i‡(
pkt
Ë
	`¢uŒ_ªÀa£_buf„r
(pkt);

331 
	}
}

336 
	$¢uŒ_hw_tx
(*
buf
, 
Àn
, 
√t_devi˚
 *
dev
)

344 
ùhdr
 *
ih
;

345 
√t_devi˚
 *
de°
;

346 
¢uŒ_¥iv
 *
¥iv
;

347 
u32
 *
ßddr
, *
daddr
;

348 
¢uŒ_∑ckë
 *
tx_buf„r
;

351 i‡(
Àn
 < (
ëhhdr
Ë+ (
ùhdr
)) {

352 
	`¥ötk
("snull: Hmm...ÖacketÅoo short (%i octets)\n",

353 
Àn
);

358 
i
;

359 
	`PDEBUG
("À¿i†%i\n" 
KERN_DEBUG
 "d©a:",
Àn
);

360 
i
=14 ; i<
Àn
; i++)

361 
	`¥ötk
(" %02x",
buf
[
i
]&0xff);

362 
	`¥ötk
("\n");

368 
ih
 = (
ùhdr
 *)(
buf
+(
ëhhdr
));

369 
ßddr
 = &
ih
->saddr;

370 
daddr
 = &
ih
->daddr;

372 ((
u8
 *)
ßddr
)[2] ^= 1;

373 ((
u8
 *)
daddr
)[2] ^= 1;

375 
ih
->
check
 = 0;

376 
ih
->
check
 = 
	`ù_Á°_csum
((*)ih,ih->
ihl
);

378 i‡(
dev
 =
¢uŒ_devs
[0])

379 
	`PDEBUGG
("%08x:%05i --> %08x:%05i\n",

380 
	`¡ohl
(
ih
->
ßddr
),
	`¡ohs
(((
t˝hdr
 *)(ih+1))->
sour˚
),

381 
	`¡ohl
(
ih
->
daddr
),
	`¡ohs
(((
t˝hdr
 *)(ih+1))->
de°
));

383 
	`PDEBUGG
("%08x:%05i <-- %08x:%05i\n",

384 
	`¡ohl
(
ih
->
daddr
),
	`¡ohs
(((
t˝hdr
 *)(ih+1))->
de°
),

385 
	`¡ohl
(
ih
->
ßddr
),
	`¡ohs
(((
t˝hdr
 *)(ih+1))->
sour˚
));

392 
de°
 = 
¢uŒ_devs
[
dev
 == snull_devs[0] ? 1 : 0];

393 
¥iv
 = 
	`√tdev_¥iv
(
de°
);

394 
tx_buf„r
 = 
	`¢uŒ_gë_tx_buf„r
(
dev
);

395 
tx_buf„r
->
d©Æí
 = 
Àn
;

396 
	`mem˝y
(
tx_buf„r
->
d©a
, 
buf
, 
Àn
);

397 
	`¢uŒ_íqueue_buf
(
de°
, 
tx_buf„r
);

398 i‡(
¥iv
->
rx_öt_íabÀd
) {

399 
¥iv
->
°©us
 |
SNULL_RX_INTR
;

400 
	`¢uŒ_öãºu±
(0, 
de°
, 
NULL
);

403 
¥iv
 = 
	`√tdev_¥iv
(
dev
);

404 
¥iv
->
tx_∑ckëÀn
 = 
Àn
;

405 
¥iv
->
tx_∑ckëd©a
 = 
buf
;

406 
¥iv
->
°©us
 |
SNULL_TX_INTR
;

407 i‡(
lockup
 && ((
¥iv
->
°©s
.
tx_∑ckës
 + 1) %Üockup) == 0) {

409 
	`√tif_°›_queue
(
dev
);

410 
	`PDEBUG
("SimuœãÜocku∞© %ld,Åx∞%ld\n", 
jiffõs
,

411 (Ë
¥iv
->
°©s
.
tx_∑ckës
);

414 
	`¢uŒ_öãºu±
(0, 
dev
, 
NULL
);

415 
	}
}

420 
	$¢uŒ_tx
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
)

422 
Àn
;

423 *
d©a
, 
sh‹çkt
[
ETH_ZLEN
];

424 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

426 
d©a
 = 
skb
->data;

427 
Àn
 = 
skb
->len;

428 i‡(
Àn
 < 
ETH_ZLEN
) {

429 
	`mem£t
(
sh‹çkt
, 0, 
ETH_ZLEN
);

430 
	`mem˝y
(
sh‹çkt
, 
skb
->
d©a
, skb->
Àn
);

431 
Àn
 = 
ETH_ZLEN
;

432 
d©a
 = 
sh‹çkt
;

434 
dev
->
å™s_°¨t
 = 
jiffõs
;

437 
¥iv
->
skb
 = skb;

440 
	`¢uŒ_hw_tx
(
d©a
, 
Àn
, 
dev
);

443 
	}
}

448 
	$¢uŒ_tx_timeout
 (
√t_devi˚
 *
dev
)

450 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

452 
	`PDEBUG
("TønsmôÅimeouà© %ld,Ü©ícy %ld\n", 
jiffõs
,

453 
jiffõs
 - 
dev
->
å™s_°¨t
);

455 
¥iv
->
°©us
 = 
SNULL_TX_INTR
;

456 
	`¢uŒ_öãºu±
(0, 
dev
, 
NULL
);

457 
¥iv
->
°©s
.
tx_îr‹s
++;

458 
	`√tif_wake_queue
(
dev
);

460 
	}
}

467 
	$¢uŒ_io˘l
(
√t_devi˚
 *
dev
, 
i‰eq
 *
rq
, 
cmd
)

469 
	`PDEBUG
("ioctl\n");

471 
	}
}

476 
√t_devi˚_°©s
 *
	$¢uŒ_°©s
(
√t_devi˚
 *
dev
)

478 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

479  &
¥iv
->
°©s
;

480 
	}
}

486 
	$¢uŒ_ªbuûd_hódî
(
sk_buff
 *
skb
)

488 
ëhhdr
 *
ëh
 = (ëhhd∏*Ë
skb
->
d©a
;

489 
√t_devi˚
 *
dev
 = 
skb
->dev;

491 
	`mem˝y
(
ëh
->
h_sour˚
, 
dev
->
dev_addr
, dev->
addr_Àn
);

492 
	`mem˝y
(
ëh
->
h_de°
, 
dev
->
dev_addr
, dev->
addr_Àn
);

493 
ëh
->
h_de°
[
ETH_ALEN
-1] ^= 0x01;

495 
	}
}

498 
	$¢uŒ_hódî
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
,

499 
ty≥
, c⁄° *
daddr
, c⁄° *
ßddr
,

500 
Àn
)

502 
ëhhdr
 *
ëh
 = (ëhhd∏*)
	`skb_push
(
skb
,
ETH_HLEN
);

504 
ëh
->
h_¥Ÿo
 = 
	`ht⁄s
(
ty≥
);

505 
	`mem˝y
(
ëh
->
h_sour˚
, 
ßddr
 ? sadd∏: 
dev
->
dev_addr
, dev->
addr_Àn
);

506 
	`mem˝y
(
ëh
->
h_de°
, 
daddr
 ? dadd∏: 
dev
->
dev_addr
, dev->
addr_Àn
);

507 
ëh
->
h_de°
[
ETH_ALEN
-1] ^= 0x01;

508  (
dev
->
h¨d_hódî_Àn
);

509 
	}
}

519 
	$¢uŒ_ch™ge_mtu
(
√t_devi˚
 *
dev
, 
√w_mtu
)

521 
Êags
;

522 
¢uŒ_¥iv
 *
¥iv
 = 
	`√tdev_¥iv
(
dev
);

523 
•ölock_t
 *
lock
 = &
¥iv
->lock;

526 i‡((
√w_mtu
 < 68) || (new_mtu > 1500))

527  -
EINVAL
;

531 
	`•ö_lock_úqßve
(
lock
, 
Êags
);

532 
dev
->
mtu
 = 
√w_mtu
;

533 
	`•ö_u∆ock_úqª°‹e
(
lock
, 
Êags
);

535 
	}
}

541 c⁄° 
hódî_›s
 
	g¢uŒ_hódî_›s
 =

543 .
¸óã
 = 
¢uŒ_hódî
,

544 .
	g∑r£
 = 
NULL
,

545 .
	gªbuûd
 = 
¢uŒ_ªbuûd_hódî
,

546 .
	gˇche
 = 
NULL
,

547 .
	gˇche_upd©e
 = 
NULL
,

550 c⁄° 
√t_devi˚_›s
 
	g¢uŒ_›s
 =

552 .
ndo_›í
 = 
¢uŒ_›í
,

553 .
	gndo_°›
 = 
¢uŒ_ªÀa£
,

554 .
	gndo_£t_c⁄fig
 = 
¢uŒ_c⁄fig
,

555 .
	gndo_°¨t_xmô
 = 
¢uŒ_tx
,

556 .
	gndo_do_io˘l
 = 
¢uŒ_io˘l
,

557 .
	gndo_gë_°©s
 = 
¢uŒ_°©s
,

558 .
	gndo_ch™ge_mtu
 = 
¢uŒ_ch™ge_mtu
,

559 .
	gndo_tx_timeout
 = 
¢uŒ_tx_timeout
,

562 
	$¢uŒ_öô
(
√t_devi˚
 *
dev
)

564 
¢uŒ_¥iv
 *
¥iv
;

577 
	`ëhî_£tup
(
dev
);

590 
dev
->
√tdev_›s
 = &
¢uŒ_›s
;

591 
dev
->
hódî_›s
 = &
¢uŒ_hódî_›s
;

599 
dev
->
Êags
 |
IFF_NOARP
;

600 
dev
->
„©uªs
 |
NETIF_F_NO_CSUM
;

606 
¥iv
 = 
	`√tdev_¥iv
(
dev
);

607 
	`mem£t
(
¥iv
, 0, (
¢uŒ_¥iv
));

608 
	`•ö_lock_öô
(&
¥iv
->
lock
);

609 
	`¢uŒ_rx_öts
(
dev
, 1);

610 
	`¢uŒ_£tup_poﬁ
(
dev
);

611 
	}
}

617 
√t_devi˚
 *
	g¢uŒ_devs
[2];

619 
	s¢uŒ_éë_¨g


621 
√t_devi˚
 *
	mdev
;

622 
èskÀt_°ru˘
 
	méë
;

629 
	$¢uŒ_èskÀt_rx
(
¨g
)

631 
¢uŒ_éë_¨g
 *
°¨g
 = (¢uŒ_éë_¨g *)
¨g
;

633 
¢uŒ_¥iv
 *
¥iv
;

634 
¢uŒ_∑ckë
 *
pkt
 = 
NULL
;

635 
√t_devi˚
 *
dev
;

637 
dev
 = 
°¨g
->dev;

639 
¥iv
 = 
	`√tdev_¥iv
(
dev
);

640 
	`•ö_lock
(&
¥iv
->
lock
);

641 
¥iv
->
°©us
 = 0;

642 
pkt
 = 
¥iv
->
rx_queue
;

643 if(
pkt
)

645 
¥iv
->
rx_queue
 = 
pkt
->
√xt
;

646 
	`¢uŒ_rx
(
dev
, 
pkt
);

648 
	`•ö_u∆ock
(&
¥iv
->
lock
);

649 if(
pkt
)

650 
	`¢uŒ_ªÀa£_buf„r
(
pkt
);

651 if(
LIVE
)

652 
	`èskÀt_scheduÀ
(&
°¨g
->
éë
);

653 
	}
}

655 
	$¢uŒ_˛ónup
()

657 
i
;

659 
i
 = 0; i < 2; i++) {

660 i‡(
¢uŒ_devs
[
i
]) {

661 
	`uƒegi°î_√tdev
(
¢uŒ_devs
[
i
]);

662 
	`¢uŒ_ã¨down_poﬁ
(
¢uŒ_devs
[
i
]);

663 
	`‰ì_√tdev
(
¢uŒ_devs
[
i
]);

667 
	}
}

670 
	$¢uŒ_öô_moduÀ
()

672 
ªsu…
, 
i
, 
ªt
 = -
ENOMEM
;

675 
¢uŒ_öãºu±
 = 
¢uŒ_ªguœr_öãºu±
;

678 
¢uŒ_devs
[0] = 
	`Æloc_√tdev
((
¢uŒ_¥iv
), "sn%d",

679 
¢uŒ_öô
);

680 
¢uŒ_devs
[1] = 
	`Æloc_√tdev
((
¢uŒ_¥iv
), "sn%d",

681 
¢uŒ_öô
);

682 i‡(
¢uŒ_devs
[0] =
NULL
 || snull_devs[1] == NULL)

683 
out
;

685 
ªt
 = -
ENODEV
;

686 
i
 = 0; i < 2; i++)

687 i‡((
ªsu…
 = 
	`ªgi°î_√tdev
(
¢uŒ_devs
[
i
])))

688 
	`¥ötk
("snull:Érror %iÑegistering device \"%s\"\n",

689 
ªsu…
, 
¢uŒ_devs
[
i
]->
«me
);

691 
ªt
 = 0;

692 
out
:

693 i‡(
ªt
)

694 
	`¢uŒ_˛ónup
();

695  
ªt
;

696 
	}
}

699 
moduÀ_öô
(
¢uŒ_öô_moduÀ
);

700 
moduÀ_exô
(
¢uŒ_˛ónup
);

	@osvmodul/socket.c

1 
	~<löux/kî√l.h
>

2 
	~<löux/moduÀ.h
>

4 
MODULE_LICENSE
("GPL");

7 
	$sockë
()

9 *
buff
 = 
	`kmÆloc
(4096*2, 
GFP_KERNEL
);

10 
id
;

12 
id
 = 
	`vmmsock
();

15 
	}
}

17 
	$£nd
()

20 
	}
}

22 
	$ªcõve
()

25 
	}
}

27 
	$ac˚±
()

30 
	}
}

32 
	$böd
()

35 
	}
}

37 
	$li°í
()

40 
	}
}

	@osvmodul/tasklet.c

6 
	~<löux/moduÀ.h
>

7 
	~<löux/kî√l.h
>

8 
	~<löux/öãºu±.h
>

10 
	st_s


12 
èskÀt_°ru˘
 
	méë
;

13 *
	m°r
;

14 
	mi
;

18 
	$èskÀt_ã°
(
¨g
)

20 
t_s
 *
ts
 = (t_†*)
¨g
;

22 
	`¥ötk
(
KERN_INFO
"%s\n", 
ts
->
°r
);

23 if(--
ts
->
i
)

24 
	`èskÀt_scheduÀ
(&
ts
->
éë
);

27 
	`¥ötk
(
KERN_INFO
"taskletÜoop over\n");

28 
	`k‰ì
(
ts
->
°r
);

29 
	`k‰ì
(
ts
);

31 
	}
}

33 
__öô
 
	$öô_èskÀt
()

35 
t_s
 *
ts
;

37 
ts
 = (
t_s
*)
	`kmÆloc
(—s), 
GFP_KERNEL
);

38 
ts
->
°r
 = (*)
	`kmÆloc
(256, 
GFP_KERNEL
);

39 
	`•rötf
(
ts
->
°r
, "this isáÅaskletÅest");

40 
ts
->
i
 = 1000;

41 
	`èskÀt_öô
(&
ts
->
éë
, 
èskÀt_ã°
, ()ts);

42 
	`èskÀt_scheduÀ
(&
ts
->
éë
);

44 
	}
}

46 
__exô
 
	$èskÀt_exô
()

48 
	`¥ötk
(
KERN_INFO
"removed\n");

49 
	}
}

51 
moduÀ_öô
(
öô_èskÀt
);

52 
moduÀ_exô
(
èskÀt_exô
);

	@osvmodul/vmmsg.c

1 
	~<löux/kî√l.h
>

2 
	~<löux/moduÀ.h
>

3 
	~<löux/¥oc_fs.h
>

4 
	~<löux/smp.h
>

5 
	~<löux/•ölock.h
>

7 
	~<asm/uac˚ss.h
>

8 
	~<asm/io.h
>

10 
	~"osv°d.h
"

13 
MODULE_LICENSE
("GPL");

16 
¥oc_dú_íåy
 *
	gvmm_c⁄s
;

20 
	#VMMMSG_BASE
 0xB8000

	)

22 
	#MSG_BUFF_SIZE
 0x1000

	)

26 
u64
 
	mmsg_öô
;

27 
u64
 
	m¥ev
;

28 
u64
 
	m°¨t
;

29 
u64
 
	mcur_pos
;

30 
u64
 
	mcur_À¡h
;

31 
u64
 
	mcur_°¨t
;

32 
u64
 
	movî_Êow
;

33 
u64
 
	mmax_À¡h
;

34 
	mlock
;

35 
u8
 *
	mmsg_buf„r
;

36 
u8
 *
	mmsg_buf„r_vút
;

37 }
	tbuff_öfo
;

40 
buff_öfo
 *
	göfo
;

42 
	$vmm_msg_öô
()

45 
öfo
 =(
buff_öfo
 *Ë
	`kmÆloc
((buff_öfo), 
GFP_KERNEL
);

49 
öfo
->
msg_buf„r_vút
 = 
	`kmÆloc
(
MSG_BUFF_SIZE
, 
GFP_KERNEL
);

50 if(!
öfo
->
msg_buf„r_vút
)

53 
öfo
->
msg_buf„r
 = (
u8
 *)
	`vút_to_phys
((*)öfo->
msg_buf„r_vút
);

54 
öfo
->
msg_öô
 = 1;

55 
öfo
->
cur_pos
 = 0;

56 
öfo
->
°¨t
 = 0;

57 
öfo
->
¥ev
 = 0;

58 
öfo
->
cur_À¡h
 = 0;

59 
öfo
->
ovî_Êow
 = 0;

60 
öfo
->
lock
 = 1;

61 
öfo
->
max_À¡h
 = 
MSG_BUFF_SIZE
;

64 
	`vmmc⁄s
(
	`vút_to_phys
((*)
öfo
));

67 
	}
}

70 
size_t
 
	$gë_vmm_msg
(*
buf„r
, 
size_t
 
size
, *
sig
)

73 
	}
}

75 
	$vmmc⁄s_ªad
(*
buf„r
, **
°¨t
, 
off_t
 
off
,

76 
cou¡
, *
eof
, *
d©a
)

78 
size
;

79 
i
;

81 
	`__øw_•ö_lock
((
øw_•ölock_t
 *Ë&
öfo
->
lock
);

83 *
eof
 = 1;

84 
size
 = 
öfo
->
cur_pos
 >öfo->
°¨t
? (info->cur_pos - info->start)

85 :(
öfo
->
cur_pos
 + info->
max_À¡h
 - info->
°¨t
);

87 
i
 = 0; i < 
size
; i ++)

88 
buf„r
[
i
] = 
öfo
->
msg_buf„r_vút
[(öfo->
°¨t
 + iË% info->
max_À¡h
];

90 
	`¥ötk
(
KERN_INFO
"thêvmmc⁄†sizêi†%d\n", 
size
);

92 
	`__øw_•ö_u∆ock
((
øw_•ölock_t
 *Ë&
öfo
->
lock
);

95  
size
;

96 
	}
}

98 
__öô
 
	$vmm_msg_mod_öô
()

100 if(
	`vmm_msg_öô
())

103 
vmm_c⁄s
 = 
	`¸óã_¥oc_ªad_íåy
("vmmc⁄s", 0644, 
NULL
,

104 
vmmc⁄s_ªad
, 
NULL
);

107 
	}
}

110 
__exô
 
	$vmm_msg_mod_exô
()

113 
	`ªmove_¥oc_íåy
("vmmc⁄s", 
NULL
);

115 
	`vmmc⁄s
(0);

117 
öfo
->
msg_öô
 = 0;

118 
öfo
->
cur_pos
 = 0;

119 
öfo
->
ovî_Êow
 = 0;

121 
	`k‰ì
(
öfo
->
msg_buf„r_vút
);

122 
	`k‰ì
(
öfo
);

125 
	}
}

127 
	$£ndmsg
(*
msg
, 
size_t
 
size
)

130 
	}
}

132 
moduÀ_öô
(
vmm_msg_mod_öô
);

133 
moduÀ_exô
(
vmm_msg_mod_exô
);

	@reset_domu.c

1 
	~<°dio.h
>

3 
	$maö
(
¨gc
, **
¨gv
)

5 
__asm
 
	`__vﬁ©ûe
("vmmcall\n\t"

9 
	`¥ötf
("DomUÑeset\n");

10 
	}
}

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/ethtool.h

13 #i‚de‡
_LINUX_ETHTOOL_H


14 
	#_LINUX_ETHTOOL_H


	)

16 
	~<löux/ty≥s.h
>

19 
	sëhtoﬁ_cmd
 {

20 
__u32
 
	mcmd
;

21 
__u32
 
	msuµ‹ãd
;

22 
__u32
 
	madvîtisög
;

23 
__u16
 
	m•ìd
;

24 
__u8
 
	mdu∂ex
;

25 
__u8
 
	mp‹t
;

26 
__u8
 
	mphy_addªss
;

27 
__u8
 
	må™s˚ivî
;

28 
__u8
 
	maut⁄eg
;

29 
__u8
 
	mmdio_suµ‹t
;

30 
__u32
 
	mmaxtxpkt
;

31 
__u32
 
	mmaxrxpkt
;

32 
__u16
 
	m•ìd_hi
;

33 
__u8
 
	mëh_ç_mdix
;

34 
__u8
 
	mª£rved2
;

35 
__u32
 
	mÕ_advîtisög
;

36 
__u32
 
	mª£rved
[2];

39 
__ölöe__
 
	$ëhtoﬁ_cmd_•ìd_£t
(
ëhtoﬁ_cmd
 *
ï
,

40 
__u32
 
•ìd
)

43 
ï
->
•ìd
 = (
__u16
)speed;

44 
ï
->
•ìd_hi
 = (
__u16
)(
•ìd
 >> 16);

45 
	}
}

47 
__ölöe__
 
__u32
 
	$ëhtoﬁ_cmd_•ìd
(
ëhtoﬁ_cmd
 *
ï
)

49  (
ï
->
•ìd_hi
 << 16Ë|Ép->
•ìd
;

50 
	}
}

52 
	#ETHTOOL_FWVERS_LEN
 32

	)

53 
	#ETHTOOL_BUSINFO_LEN
 32

	)

55 
	sëhtoﬁ_drvöfo
 {

56 
__u32
 
	mcmd
;

57 
	mdrivî
[32];

58 
	mvîsi⁄
[32];

59 
	mfw_vîsi⁄
[
ETHTOOL_FWVERS_LEN
];

60 
	mbus_öfo
[
ETHTOOL_BUSINFO_LEN
];

62 
	mª£rved1
[32];

63 
	mª£rved2
[12];

64 
__u32
 
	mn_¥iv_Êags
;

65 
__u32
 
	mn_°©s
;

66 
__u32
 
	mã°öfo_Àn
;

67 
__u32
 
	mìdump_Àn
;

68 
__u32
 
	mªgdump_Àn
;

71 
	#SOPASS_MAX
 6

	)

73 
	sëhtoﬁ_wﬁöfo
 {

74 
__u32
 
	mcmd
;

75 
__u32
 
	msuµ‹ãd
;

76 
__u32
 
	mwﬁ›ts
;

77 
__u8
 
	ms›ass
[
SOPASS_MAX
];

81 
	sëhtoﬁ_vÆue
 {

82 
__u32
 
	mcmd
;

83 
__u32
 
	md©a
;

87 
	sëhtoﬁ_ªgs
 {

88 
__u32
 
	mcmd
;

89 
__u32
 
	mvîsi⁄
;

90 
__u32
 
	mÀn
;

91 
__u8
 
	md©a
[0];

95 
	sëhtoﬁ_ì¥om
 {

96 
__u32
 
	mcmd
;

97 
__u32
 
	mmagic
;

98 
__u32
 
	moff£t
;

99 
__u32
 
	mÀn
;

100 
__u8
 
	md©a
[0];

104 
	sëhtoﬁ_cﬂÀs˚
 {

105 
__u32
 
	mcmd
;

111 
__u32
 
	mrx_cﬂÀs˚_u£cs
;

119 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames
;

126 
__u32
 
	mrx_cﬂÀs˚_u£cs_úq
;

127 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_úq
;

133 
__u32
 
	mtx_cﬂÀs˚_u£cs
;

141 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames
;

148 
__u32
 
	mtx_cﬂÀs˚_u£cs_úq
;

149 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_úq
;

156 
__u32
 
	m°©s_block_cﬂÀs˚_u£cs
;

165 
__u32
 
	mu£_ad≠tive_rx_cﬂÀs˚
;

166 
__u32
 
	mu£_ad≠tive_tx_cﬂÀs˚
;

172 
__u32
 
	mpkt_øã_low
;

173 
__u32
 
	mrx_cﬂÀs˚_u£cs_low
;

174 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_low
;

175 
__u32
 
	mtx_cﬂÀs˚_u£cs_low
;

176 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_low
;

187 
__u32
 
	mpkt_øã_high
;

188 
__u32
 
	mrx_cﬂÀs˚_u£cs_high
;

189 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_high
;

190 
__u32
 
	mtx_cﬂÀs˚_u£cs_high
;

191 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_high
;

196 
__u32
 
	møã_ßm∂e_öãrvÆ
;

200 
	sëhtoﬁ_rög∑øm
 {

201 
__u32
 
	mcmd
;

207 
__u32
 
	mrx_max_≥ndög
;

208 
__u32
 
	mrx_möi_max_≥ndög
;

209 
__u32
 
	mrx_jumbo_max_≥ndög
;

210 
__u32
 
	mtx_max_≥ndög
;

215 
__u32
 
	mrx_≥ndög
;

216 
__u32
 
	mrx_möi_≥ndög
;

217 
__u32
 
	mrx_jumbo_≥ndög
;

218 
__u32
 
	mtx_≥ndög
;

222 
	sëhtoﬁ_∑u£∑øm
 {

223 
__u32
 
	mcmd
;

235 
__u32
 
	maut⁄eg
;

236 
__u32
 
	mrx_∑u£
;

237 
__u32
 
	mtx_∑u£
;

240 
	#ETH_GSTRING_LEN
 32

	)

241 
	eëhtoﬁ_°rög£t
 {

242 
	mETH_SS_TEST
 = 0,

243 
	mETH_SS_STATS
,

244 
	mETH_SS_PRIV_FLAGS
,

248 
	sëhtoﬁ_g°rögs
 {

249 
__u32
 
	mcmd
;

250 
__u32
 
	m°rög_£t
;

251 
__u32
 
	mÀn
;

252 
__u8
 
	md©a
[0];

255 
	eëhtoﬁ_ã°_Êags
 {

256 
	mETH_TEST_FL_OFFLINE
 = (1 << 0),

257 
	mETH_TEST_FL_FAILED
 = (1 << 1),

261 
	sëhtoﬁ_ã°
 {

262 
__u32
 
	mcmd
;

263 
__u32
 
	mÊags
;

264 
__u32
 
	mª£rved
;

265 
__u32
 
	mÀn
;

266 
__u64
 
	md©a
[0];

270 
	sëhtoﬁ_°©s
 {

271 
__u32
 
	mcmd
;

272 
__u32
 
	mn_°©s
;

273 
__u64
 
	md©a
[0];

276 
	sëhtoﬁ_≥rm_addr
 {

277 
__u32
 
	mcmd
;

278 
__u32
 
	msize
;

279 
__u8
 
	md©a
[0];

291 
	eëhtoﬁ_Êags
 {

292 
	mETH_FLAG_LRO
 = (1 << 15),

293 
	mETH_FLAG_NTUPLE
 = (1 << 27),

294 
	mETH_FLAG_RXHASH
 = (1 << 28),

302 
	sëhtoﬁ_t˝ù4_•ec
 {

303 
__be32
 
	mù4§c
;

304 
__be32
 
	mù4d°
;

305 
__be16
 
	mp§c
;

306 
__be16
 
	mpd°
;

307 
__u8
 
	mtos
;

310 
	sëhtoﬁ_ah_e•ù4_•ec
 {

311 
__be32
 
	mù4§c
;

312 
__be32
 
	mù4d°
;

313 
__be32
 
	m•i
;

314 
__u8
 
	mtos
;

317 
	sëhtoﬁ_øwù4_•ec
 {

318 
__be32
 
	mù4§c
;

319 
__be32
 
	mù4d°
;

320 
__u8
 
	mhd©a
[64];

323 
	sëhtoﬁ_ëhî_•ec
 {

324 
__be16
 
	mëhî_ty≥
;

325 
__u8
 
	m‰ame_size
;

326 
__u8
 
	me‰ame
[16];

329 
	#ETH_RX_NFC_IP4
 1

	)

330 
	#ETH_RX_NFC_IP6
 2

	)

332 
	sëhtoﬁ_u§ù4_•ec
 {

333 
__be32
 
	mù4§c
;

334 
__be32
 
	mù4d°
;

335 
__be32
 
	ml4_4_byãs
;

336 
__u8
 
	mtos
;

337 
__u8
 
	mù_vî
;

338 
__u8
 
	m¥Ÿo
;

341 
	sëhtoﬁ_rx_Êow_•ec
 {

342 
__u32
 
	mÊow_ty≥
;

344 
ëhtoﬁ_t˝ù4_•ec
 
	mt˝_ù4_•ec
;

345 
ëhtoﬁ_t˝ù4_•ec
 
	mudp_ù4_•ec
;

346 
ëhtoﬁ_t˝ù4_•ec
 
	ms˘p_ù4_•ec
;

347 
ëhtoﬁ_ah_e•ù4_•ec
 
	mah_ù4_•ec
;

348 
ëhtoﬁ_ah_e•ù4_•ec
 
	me•_ù4_•ec
;

349 
ëhtoﬁ_øwù4_•ec
 
	møw_ù4_•ec
;

350 
ëhtoﬁ_ëhî_•ec
 
	mëhî_•ec
;

351 
ëhtoﬁ_u§ù4_•ec
 
	mu§_ù4_•ec
;

352 
__u8
 
	mhd©a
[64];

353 } 
	mh_u
, 
	mm_u
;

354 
__u64
 
	mrög_cookõ
;

355 
__u32
 
	mloˇti⁄
;

358 
	sëhtoﬁ_rxnfc
 {

359 
__u32
 
	mcmd
;

360 
__u32
 
	mÊow_ty≥
;

362 
__u64
 
	md©a
;

363 
ëhtoﬁ_rx_Êow_•ec
 
	mfs
;

364 
__u32
 
	mruÀ_˙t
;

365 
__u32
 
	mruÀ_locs
[0];

368 
	#ETHTOOL_FLASH_MAX_FILENAME
 128

	)

369 
	eëhtoﬁ_Êash_›_ty≥
 {

370 
	mETHTOOL_FLASH_ALL_REGIONS
 = 0,

374 
	sëhtoﬁ_Êash
 {

375 
__u32
 
	mcmd
;

376 
__u32
 
	mªgi⁄
;

377 
	md©a
[
ETHTOOL_FLASH_MAX_FILENAME
];

382 
	#ETHTOOL_GSET
 0x00000001

	)

383 
	#ETHTOOL_SSET
 0x00000002

	)

384 
	#ETHTOOL_GDRVINFO
 0x00000003

	)

385 
	#ETHTOOL_GREGS
 0x00000004

	)

386 
	#ETHTOOL_GWOL
 0x00000005

	)

387 
	#ETHTOOL_SWOL
 0x00000006

	)

388 
	#ETHTOOL_GMSGLVL
 0x00000007

	)

389 
	#ETHTOOL_SMSGLVL
 0x00000008

	)

390 
	#ETHTOOL_NWAY_RST
 0x00000009

	)

391 
	#ETHTOOL_GLINK
 0x0000000®

	)

392 
	#ETHTOOL_GEEPROM
 0x0000000b

	)

393 
	#ETHTOOL_SEEPROM
 0x0000000¯

	)

394 
	#ETHTOOL_GCOALESCE
 0x0000000ê

	)

395 
	#ETHTOOL_SCOALESCE
 0x0000000‡

	)

396 
	#ETHTOOL_GRINGPARAM
 0x00000010

	)

397 
	#ETHTOOL_SRINGPARAM
 0x00000011

	)

398 
	#ETHTOOL_GPAUSEPARAM
 0x00000012

	)

399 
	#ETHTOOL_SPAUSEPARAM
 0x00000013

	)

400 
	#ETHTOOL_GRXCSUM
 0x00000014

	)

401 
	#ETHTOOL_SRXCSUM
 0x00000015

	)

402 
	#ETHTOOL_GTXCSUM
 0x00000016

	)

403 
	#ETHTOOL_STXCSUM
 0x00000017

	)

404 
	#ETHTOOL_GSG
 0x00000018

	)

406 
	#ETHTOOL_SSG
 0x00000019

	)

408 
	#ETHTOOL_TEST
 0x0000001®

	)

409 
	#ETHTOOL_GSTRINGS
 0x0000001b

	)

410 
	#ETHTOOL_PHYS_ID
 0x0000001¯

	)

411 
	#ETHTOOL_GSTATS
 0x0000001d

	)

412 
	#ETHTOOL_GTSO
 0x0000001ê

	)

413 
	#ETHTOOL_STSO
 0x0000001‡

	)

414 
	#ETHTOOL_GPERMADDR
 0x00000020

	)

415 
	#ETHTOOL_GUFO
 0x00000021

	)

416 
	#ETHTOOL_SUFO
 0x00000022

	)

417 
	#ETHTOOL_GGSO
 0x00000023

	)

418 
	#ETHTOOL_SGSO
 0x00000024

	)

419 
	#ETHTOOL_GFLAGS
 0x00000025

	)

420 
	#ETHTOOL_SFLAGS
 0x00000026

	)

421 
	#ETHTOOL_GPFLAGS
 0x00000027

	)

422 
	#ETHTOOL_SPFLAGS
 0x00000028

	)

424 
	#ETHTOOL_GRXFH
 0x00000029

	)

425 
	#ETHTOOL_SRXFH
 0x0000002®

	)

426 
	#ETHTOOL_GGRO
 0x0000002b

	)

427 
	#ETHTOOL_SGRO
 0x0000002¯

	)

428 
	#ETHTOOL_GRXRINGS
 0x0000002d

	)

429 
	#ETHTOOL_GRXCLSRLCNT
 0x0000002ê

	)

430 
	#ETHTOOL_GRXCLSRULE
 0x0000002‡

	)

431 
	#ETHTOOL_GRXCLSRLALL
 0x00000030

	)

432 
	#ETHTOOL_SRXCLSRLDEL
 0x00000031

	)

433 
	#ETHTOOL_SRXCLSRLINS
 0x00000032

	)

434 
	#ETHTOOL_FLASHDEV
 0x00000033

	)

437 
	#SPARC_ETH_GSET
 
ETHTOOL_GSET


	)

438 
	#SPARC_ETH_SSET
 
ETHTOOL_SSET


	)

441 
	#SUPPORTED_10ba£T_HÆf
 (1 << 0)

	)

442 
	#SUPPORTED_10ba£T_FuŒ
 (1 << 1)

	)

443 
	#SUPPORTED_100ba£T_HÆf
 (1 << 2)

	)

444 
	#SUPPORTED_100ba£T_FuŒ
 (1 << 3)

	)

445 
	#SUPPORTED_1000ba£T_HÆf
 (1 << 4)

	)

446 
	#SUPPORTED_1000ba£T_FuŒ
 (1 << 5)

	)

447 
	#SUPPORTED_Aut⁄eg
 (1 << 6)

	)

448 
	#SUPPORTED_TP
 (1 << 7)

	)

449 
	#SUPPORTED_AUI
 (1 << 8)

	)

450 
	#SUPPORTED_MII
 (1 << 9)

	)

451 
	#SUPPORTED_FIBRE
 (1 << 10)

	)

452 
	#SUPPORTED_BNC
 (1 << 11)

	)

453 
	#SUPPORTED_10000ba£T_FuŒ
 (1 << 12)

	)

454 
	#SUPPORTED_Pau£
 (1 << 13)

	)

455 
	#SUPPORTED_Asym_Pau£
 (1 << 14)

	)

456 
	#SUPPORTED_2500ba£X_FuŒ
 (1 << 15)

	)

457 
	#SUPPORTED_Back∂™e
 (1 << 16)

	)

458 
	#SUPPORTED_1000ba£KX_FuŒ
 (1 << 17)

	)

459 
	#SUPPORTED_10000ba£KX4_FuŒ
 (1 << 18)

	)

460 
	#SUPPORTED_10000ba£KR_FuŒ
 (1 << 19)

	)

461 
	#SUPPORTED_10000ba£R_FEC
 (1 << 20)

	)

462 
	#SUPPORTED_20000ba£MLD2_FuŒ
 (1 << 21)

	)

463 
	#SUPPORTED_20000ba£KR2_FuŒ
 (1 << 22)

	)

466 
	#ADVERTISED_10ba£T_HÆf
 (1 << 0)

	)

467 
	#ADVERTISED_10ba£T_FuŒ
 (1 << 1)

	)

468 
	#ADVERTISED_100ba£T_HÆf
 (1 << 2)

	)

469 
	#ADVERTISED_100ba£T_FuŒ
 (1 << 3)

	)

470 
	#ADVERTISED_1000ba£T_HÆf
 (1 << 4)

	)

471 
	#ADVERTISED_1000ba£T_FuŒ
 (1 << 5)

	)

472 
	#ADVERTISED_Aut⁄eg
 (1 << 6)

	)

473 
	#ADVERTISED_TP
 (1 << 7)

	)

474 
	#ADVERTISED_AUI
 (1 << 8)

	)

475 
	#ADVERTISED_MII
 (1 << 9)

	)

476 
	#ADVERTISED_FIBRE
 (1 << 10)

	)

477 
	#ADVERTISED_BNC
 (1 << 11)

	)

478 
	#ADVERTISED_10000ba£T_FuŒ
 (1 << 12)

	)

479 
	#ADVERTISED_Pau£
 (1 << 13)

	)

480 
	#ADVERTISED_Asym_Pau£
 (1 << 14)

	)

481 
	#ADVERTISED_2500ba£X_FuŒ
 (1 << 15)

	)

482 
	#ADVERTISED_Back∂™e
 (1 << 16)

	)

483 
	#ADVERTISED_1000ba£KX_FuŒ
 (1 << 17)

	)

484 
	#ADVERTISED_10000ba£KX4_FuŒ
 (1 << 18)

	)

485 
	#ADVERTISED_10000ba£KR_FuŒ
 (1 << 19)

	)

486 
	#ADVERTISED_10000ba£R_FEC
 (1 << 20)

	)

487 
	#ADVERTISED_20000ba£MLD2_FuŒ
 (1 << 21)

	)

488 
	#ADVERTISED_20000ba£KR2_FuŒ
 (1 << 22)

	)

497 
	#SPEED_10
 10

	)

498 
	#SPEED_100
 100

	)

499 
	#SPEED_1000
 1000

	)

500 
	#SPEED_2500
 2500

	)

501 
	#SPEED_10000
 10000

	)

504 
	#DUPLEX_HALF
 0x00

	)

505 
	#DUPLEX_FULL
 0x01

	)

508 
	#PORT_TP
 0x00

	)

509 
	#PORT_AUI
 0x01

	)

510 
	#PORT_MII
 0x02

	)

511 
	#PORT_FIBRE
 0x03

	)

512 
	#PORT_BNC
 0x04

	)

513 
	#PORT_DA
 0x05

	)

514 
	#PORT_NONE
 0xef

	)

515 
	#PORT_OTHER
 0xff

	)

518 
	#XCVR_INTERNAL
 0x00

	)

519 
	#XCVR_EXTERNAL
 0x01

	)

520 
	#XCVR_DUMMY1
 0x02

	)

521 
	#XCVR_DUMMY2
 0x03

	)

522 
	#XCVR_DUMMY3
 0x04

	)

527 
	#AUTONEG_DISABLE
 0x00

	)

528 
	#AUTONEG_ENABLE
 0x01

	)

531 
	#ETH_TP_MDI_INVALID
 0x00

	)

532 
	#ETH_TP_MDI
 0x01

	)

533 
	#ETH_TP_MDI_X
 0x02

	)

536 
	#WAKE_PHY
 (1 << 0)

	)

537 
	#WAKE_UCAST
 (1 << 1)

	)

538 
	#WAKE_MCAST
 (1 << 2)

	)

539 
	#WAKE_BCAST
 (1 << 3)

	)

540 
	#WAKE_ARP
 (1 << 4)

	)

541 
	#WAKE_MAGIC
 (1 << 5)

	)

542 
	#WAKE_MAGICSECURE
 (1 << 6Ë

	)

545 
	#TCP_V4_FLOW
 0x01

	)

546 
	#UDP_V4_FLOW
 0x02

	)

547 
	#SCTP_V4_FLOW
 0x03

	)

548 
	#AH_ESP_V4_FLOW
 0x04

	)

549 
	#TCP_V6_FLOW
 0x05

	)

550 
	#UDP_V6_FLOW
 0x06

	)

551 
	#SCTP_V6_FLOW
 0x07

	)

552 
	#AH_ESP_V6_FLOW
 0x08

	)

553 
	#AH_V4_FLOW
 0x09

	)

554 
	#ESP_V4_FLOW
 0x0a

	)

555 
	#AH_V6_FLOW
 0x0b

	)

556 
	#ESP_V6_FLOW
 0x0c

	)

557 
	#IP_USER_FLOW
 0x0d

	)

560 
	#RXH_L2DA
 (1 << 1)

	)

561 
	#RXH_VLAN
 (1 << 2)

	)

562 
	#RXH_L3_PROTO
 (1 << 3)

	)

563 
	#RXH_IP_SRC
 (1 << 4)

	)

564 
	#RXH_IP_DST
 (1 << 5)

	)

565 
	#RXH_L4_B_0_1
 (1 << 6Ë

	)

566 
	#RXH_L4_B_2_3
 (1 << 7Ë

	)

567 
	#RXH_DISCARD
 (1 << 31)

	)

569 
	#RX_CLS_FLOW_DISC
 0xffffffffffffffffULL

	)

571 
	eëhtoﬁ_ª£t_Êags
 {

577 
	mETH_RESET_MGMT
 = 1 << 0,

578 
	mETH_RESET_IRQ
 = 1 << 1,

579 
	mETH_RESET_DMA
 = 1 << 2,

580 
	mETH_RESET_FILTER
 = 1 << 3,

581 
	mETH_RESET_OFFLOAD
 = 1 << 4,

582 
	mETH_RESET_MAC
 = 1 << 5,

583 
	mETH_RESET_PHY
 = 1 << 6,

584 
	mETH_RESET_RAM
 = 1 << 7,

587 
	mETH_RESET_DEDICATED
 = 0x0000ffff,

589 
	mETH_RESET_ALL
 = 0xffffffff,

592 
	#ETH_RESET_SHARED_SHIFT
 16

	)

	@/usr/include/linux/fcntl.h

1 #i‚de‡
_LINUX_FCNTL_H


2 
	#_LINUX_FCNTL_H


	)

4 
	~<asm/f˙é.h
>

6 
	#F_SETLEASE
 (
F_LINUX_SPECIFIC_BASE
 + 0)

	)

7 
	#F_GETLEASE
 (
F_LINUX_SPECIFIC_BASE
 + 1)

	)

13 
	#F_CANCELLK
 (
F_LINUX_SPECIFIC_BASE
 + 5)

	)

16 
	#F_DUPFD_CLOEXEC
 (
F_LINUX_SPECIFIC_BASE
 + 6)

	)

22 
	#F_NOTIFY
 (
F_LINUX_SPECIFIC_BASE
+2)

	)

27 
	#DN_ACCESS
 0x00000001

	)

28 
	#DN_MODIFY
 0x00000002

	)

29 
	#DN_CREATE
 0x00000004

	)

30 
	#DN_DELETE
 0x00000008

	)

31 
	#DN_RENAME
 0x00000010

	)

32 
	#DN_ATTRIB
 0x00000020

	)

33 
	#DN_MULTISHOT
 0x80000000

	)

35 
	#AT_FDCWD
 -100

	)

38 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

39 
	#AT_REMOVEDIR
 0x200

	)

41 
	#AT_SYMLINK_FOLLOW
 0x400

	)

42 
	#AT_NO_AUTOMOUNT
 0x800

	)

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

11 
	~<löux/blk_ty≥s.h
>

12 
	~<löux/ty≥s.h
>

25 #unde‡
NR_OPEN


26 
	#INR_OPEN
 1024

	)

28 
	#BLOCK_SIZE_BITS
 10

	)

29 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

31 
	#SEEK_SET
 0

	)

32 
	#SEEK_CUR
 1

	)

33 
	#SEEK_END
 2

	)

34 
	#SEEK_MAX
 
SEEK_END


	)

36 
	sf°rim_ønge
 {

37 
__u64
 
	m°¨t
;

38 
__u64
 
	mÀn
;

39 
__u64
 
	mmöÀn
;

43 
	sfûes_°©_°ru˘
 {

44 
	mƒ_fûes
;

45 
	mƒ_‰ì_fûes
;

46 
	mmax_fûes
;

49 
	söodes_°©_t
 {

50 
	mƒ_öodes
;

51 
	mƒ_unu£d
;

52 
	mdummy
[5];

56 
	#NR_FILE
 8192

	)

58 
	#MAY_EXEC
 1

	)

59 
	#MAY_WRITE
 2

	)

60 
	#MAY_READ
 4

	)

61 
	#MAY_APPEND
 8

	)

62 
	#MAY_ACCESS
 16

	)

63 
	#MAY_OPEN
 32

	)

71 
	#FMODE_READ
 ((
fmode_t
)1)

	)

73 
	#FMODE_WRITE
 ((
fmode_t
)2)

	)

75 
	#FMODE_LSEEK
 ((
fmode_t
)4)

	)

77 
	#FMODE_PREAD
 ((
fmode_t
)8)

	)

79 
	#FMODE_PWRITE
 ((
fmode_t
)16)

	)

81 
	#FMODE_EXEC
 ((
fmode_t
)32)

	)

83 
	#FMODE_NDELAY
 ((
fmode_t
)64)

	)

85 
	#FMODE_EXCL
 ((
fmode_t
)128)

	)

88 
	#FMODE_WRITE_IOCTL
 ((
fmode_t
)256)

	)

96 
	#FMODE_NOCMTIME
 ((
fmode_t
)2048)

	)

99 
	#FMODE_RANDOM
 ((
fmode_t
)4096)

	)

157 
	#RW_MASK
 
REQ_WRITE


	)

158 
	#RWA_MASK
 (1 << 
BIO_RW_AHEAD
)

	)

160 
	#READ
 0

	)

161 
	#WRITE
 1

	)

162 
	#READA
 
RWA_MASK


	)

163 
	#SWRITE
 (
WRITE
 | 
READA
)

	)

165 
	#READ_SYNC
 (
READ
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_UNPLUG
))

	)

166 
	#READ_META
 (
READ
 | (1 << 
BIO_RW_META
))

	)

167 
	#WRITE_SYNC_PLUG
 (
WRITE
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_NOIDLE
))

	)

168 
	#WRITE_SYNC
 (
WRITE_SYNC_PLUG
 | (1 << 
BIO_RW_UNPLUG
))

	)

169 
	#WRITE_ODIRECT_PLUG
 (
WRITE
 | (1 << 
BIO_RW_SYNCIO
))

	)

170 
	#WRITE_META
 (
WRITE
 | (1 << 
BIO_RW_META
))

	)

171 
	#SWRITE_SYNC_PLUG
 \

172 (
SWRITE
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_NOIDLE
))

	)

173 
	#SWRITE_SYNC
 (
SWRITE_SYNC_PLUG
 | (1 << 
BIO_RW_UNPLUG
))

	)

174 
	#WRITE_BARRIER
 (
WRITE_SYNC
 | (1 << 
BIO_RW_BARRIER
))

	)

176 
	#WRITE_FLUSH
 (
WRITE_SYNC
 | (1 << 
BIO_RW_FLUSH
))

	)

177 
	#WRITE_FUA
 (
WRITE_SYNC
 | (1 << 
BIO_RW_FUA
))

	)

178 
	#WRITE_FLUSH_FUA
 (
WRITE_FLUSH
 | 
WRITE_FUA
)

	)

185 
	#DISCARD_NOBARRIER
 (
WRITE
 | (1 << 
BIO_RW_DISCARD
))

	)

186 
	#DISCARD_BARRIER
 (
DISCARD_NOBARRIER
 | (1 << 
BIO_RW_BARRIER
))

	)

188 
	#SEL_IN
 1

	)

189 
	#SEL_OUT
 2

	)

190 
	#SEL_EX
 4

	)

193 
	#FS_REQUIRES_DEV
 1

	)

194 
	#FS_BINARY_MOUNTDATA
 2

	)

195 
	#FS_HAS_SUBTYPE
 4

	)

196 
	#FS_REVAL_DOT
 16384

	)

197 
	#FS_RENAME_DOES_D_MOVE
 32768

	)

204 
	#MS_RDONLY
 1

	)

205 
	#MS_NOSUID
 2

	)

206 
	#MS_NODEV
 4

	)

207 
	#MS_NOEXEC
 8

	)

208 
	#MS_SYNCHRONOUS
 16

	)

209 
	#MS_REMOUNT
 32

	)

210 
	#MS_MANDLOCK
 64

	)

211 
	#MS_DIRSYNC
 128

	)

212 
	#MS_NOATIME
 1024

	)

213 
	#MS_NODIRATIME
 2048

	)

214 
	#MS_BIND
 4096

	)

215 
	#MS_MOVE
 8192

	)

216 
	#MS_REC
 16384

	)

217 
	#MS_VERBOSE
 32768

	)

219 
	#MS_SILENT
 32768

	)

220 
	#MS_POSIXACL
 (1<<16Ë

	)

221 
	#MS_UNBINDABLE
 (1<<17Ë

	)

222 
	#MS_PRIVATE
 (1<<18Ë

	)

223 
	#MS_SLAVE
 (1<<19Ë

	)

224 
	#MS_SHARED
 (1<<20Ë

	)

225 
	#MS_RELATIME
 (1<<21Ë

	)

226 
	#MS_KERNMOUNT
 (1<<22Ë

	)

227 
	#MS_I_VERSION
 (1<<23Ë

	)

228 
	#MS_STRICTATIME
 (1<<24Ë

	)

229 
	#MS_ACTIVE
 (1<<30)

	)

230 
	#MS_NOUSER
 (1<<31)

	)

235 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

240 
	#MS_MGC_VAL
 0xC0ED0000

	)

241 
	#MS_MGC_MSK
 0xffff0000

	)

245 
	#S_SYNC
 1

	)

246 
	#S_NOATIME
 2

	)

247 
	#S_APPEND
 4

	)

248 
	#S_IMMUTABLE
 8

	)

249 
	#S_DEAD
 16

	)

250 
	#S_NOQUOTA
 32

	)

251 
	#S_DIRSYNC
 64

	)

252 
	#S_NOCMTIME
 128

	)

253 
	#S_SWAPFILE
 256

	)

254 
	#S_PRIVATE
 512

	)

255 
	#S_AUTOMOUNT
 2048

	)

256 
	#S_AOP_EXT
 16384

	)

271 
	#__IS_FLG
(
öode
,
Êg
Ë((öode)->
i_sb
->
s_Êags
 & (Êg))

	)

273 
	#IS_RDONLY
(
öode
Ë((öode)->
i_sb
->
s_Êags
 & 
MS_RDONLY
)

	)

274 
	#IS_SYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
) || \

275 ((
öode
)->
i_Êags
 & 
S_SYNC
))

	)

276 
	#IS_DIRSYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
|
MS_DIRSYNC
) || \

277 ((
öode
)->
i_Êags
 & (
S_SYNC
|
S_DIRSYNC
)))

	)

278 
	#IS_MANDLOCK
(
öode
Ë
	`__IS_FLG
(öode, 
MS_MANDLOCK
)

	)

279 
	#IS_NOATIME
(
öode
Ë
	`__IS_FLG
(öode, 
MS_RDONLY
|
MS_NOATIME
)

	)

280 
	#IS_I_VERSION
(
öode
Ë
	`__IS_FLG
(öode, 
MS_I_VERSION
)

	)

282 
	#IS_NOQUOTA
(
öode
Ë((öode)->
i_Êags
 & 
S_NOQUOTA
)

	)

283 
	#IS_APPEND
(
öode
Ë((öode)->
i_Êags
 & 
S_APPEND
)

	)

284 
	#IS_IMMUTABLE
(
öode
Ë((öode)->
i_Êags
 & 
S_IMMUTABLE
)

	)

285 
	#IS_POSIXACL
(
öode
Ë
	`__IS_FLG
(öode, 
MS_POSIXACL
)

	)

287 
	#IS_DEADDIR
(
öode
Ë((öode)->
i_Êags
 & 
S_DEAD
)

	)

288 
	#IS_NOCMTIME
(
öode
Ë((öode)->
i_Êags
 & 
S_NOCMTIME
)

	)

289 
	#IS_SWAPFILE
(
öode
Ë((öode)->
i_Êags
 & 
S_SWAPFILE
)

	)

290 
	#IS_PRIVATE
(
öode
Ë((öode)->
i_Êags
 & 
S_PRIVATE
)

	)

291 
	#IS_AUTOMOUNT
(
öode
Ë((öode)->
i_Êags
 & 
S_AUTOMOUNT
)

	)

292 
	#IS_AOP_EXT
(
öode
Ë((öode)->
i_Êags
 & 
S_AOP_EXT
)

	)

297 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

298 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

299 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

300 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

301 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

302 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

303 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

304 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

305 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

306 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

307 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

308 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

310 
	#BLKPG
 
	`_IO
(0x12,105)

	)

314 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

315 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

320 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

321 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

322 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

323 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

324 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

325 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

326 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

327 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

328 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

329 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

330 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

331 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

332 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

334 
	#BMAP_IOCTL
 1

	)

335 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

336 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

337 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

338 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

339 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

341 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

342 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

343 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

344 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

345 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

346 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

347 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

348 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

349 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

354 
	#FS_SECRM_FL
 0x00000001

	)

355 
	#FS_UNRM_FL
 0x00000002

	)

356 
	#FS_COMPR_FL
 0x00000004

	)

357 
	#FS_SYNC_FL
 0x00000008

	)

358 
	#FS_IMMUTABLE_FL
 0x00000010

	)

359 
	#FS_APPEND_FL
 0x00000020

	)

360 
	#FS_NODUMP_FL
 0x00000040

	)

361 
	#FS_NOATIME_FL
 0x00000080

	)

363 
	#FS_DIRTY_FL
 0x00000100

	)

364 
	#FS_COMPRBLK_FL
 0x00000200

	)

365 
	#FS_NOCOMP_FL
 0x00000400

	)

366 
	#FS_ECOMPR_FL
 0x00000800

	)

368 
	#FS_BTREE_FL
 0x00001000

	)

369 
	#FS_INDEX_FL
 0x00001000

	)

370 
	#FS_IMAGIC_FL
 0x00002000

	)

371 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

372 
	#FS_NOTAIL_FL
 0x00008000

	)

373 
	#FS_DIRSYNC_FL
 0x00010000

	)

374 
	#FS_TOPDIR_FL
 0x00020000

	)

375 
	#FS_EXTENT_FL
 0x00080000

	)

376 
	#FS_DIRECTIO_FL
 0x00100000

	)

377 
	#FS_RESERVED_FL
 0x80000000

	)

379 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

380 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

383 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

384 
	#SYNC_FILE_RANGE_WRITE
 2

	)

385 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/linux/if_arp.h

23 #i‚de‡
_LINUX_IF_ARP_H


24 
	#_LINUX_IF_ARP_H


	)

26 
	~<löux/√tdevi˚.h
>

29 
	#ARPHRD_NETROM
 0

	)

30 
	#ARPHRD_ETHER
 1

	)

31 
	#ARPHRD_EETHER
 2

	)

32 
	#ARPHRD_AX25
 3

	)

33 
	#ARPHRD_PRONET
 4

	)

34 
	#ARPHRD_CHAOS
 5

	)

35 
	#ARPHRD_IEEE802
 6

	)

36 
	#ARPHRD_ARCNET
 7

	)

37 
	#ARPHRD_APPLETLK
 8

	)

38 
	#ARPHRD_DLCI
 15

	)

39 
	#ARPHRD_ATM
 19

	)

40 
	#ARPHRD_METRICOM
 23

	)

41 
	#ARPHRD_IEEE1394
 24

	)

42 
	#ARPHRD_EUI64
 27

	)

43 
	#ARPHRD_INFINIBAND
 32

	)

46 
	#ARPHRD_SLIP
 256

	)

47 
	#ARPHRD_CSLIP
 257

	)

48 
	#ARPHRD_SLIP6
 258

	)

49 
	#ARPHRD_CSLIP6
 259

	)

50 
	#ARPHRD_RSRVD
 260

	)

51 
	#ARPHRD_ADAPT
 264

	)

52 
	#ARPHRD_ROSE
 270

	)

53 
	#ARPHRD_X25
 271

	)

54 
	#ARPHRD_HWX25
 272

	)

55 
	#ARPHRD_CAN
 280

	)

56 
	#ARPHRD_PPP
 512

	)

57 
	#ARPHRD_CISCO
 513

	)

58 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

59 
	#ARPHRD_LAPB
 516

	)

60 
	#ARPHRD_DDCMP
 517

	)

61 
	#ARPHRD_RAWHDLC
 518

	)

63 
	#ARPHRD_TUNNEL
 768

	)

64 
	#ARPHRD_TUNNEL6
 769

	)

65 
	#ARPHRD_FRAD
 770

	)

66 
	#ARPHRD_SKIP
 771

	)

67 
	#ARPHRD_LOOPBACK
 772

	)

68 
	#ARPHRD_LOCALTLK
 773

	)

69 
	#ARPHRD_FDDI
 774

	)

70 
	#ARPHRD_BIF
 775

	)

71 
	#ARPHRD_SIT
 776

	)

72 
	#ARPHRD_IPDDP
 777

	)

73 
	#ARPHRD_IPGRE
 778

	)

74 
	#ARPHRD_PIMREG
 779

	)

75 
	#ARPHRD_HIPPI
 780

	)

76 
	#ARPHRD_ASH
 781

	)

77 
	#ARPHRD_ECONET
 782

	)

78 
	#ARPHRD_IRDA
 783

	)

80 
	#ARPHRD_FCPP
 784

	)

81 
	#ARPHRD_FCAL
 785

	)

82 
	#ARPHRD_FCPL
 786

	)

83 
	#ARPHRD_FCFABRIC
 787

	)

85 
	#ARPHRD_IEEE802_TR
 800

	)

86 
	#ARPHRD_IEEE80211
 801

	)

87 
	#ARPHRD_IEEE80211_PRISM
 802

	)

88 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

89 
	#ARPHRD_IEEE802154
 804

	)

91 
	#ARPHRD_PHONET
 820

	)

92 
	#ARPHRD_PHONET_PIPE
 821

	)

94 
	#ARPHRD_VOID
 0xFFFF

	)

95 
	#ARPHRD_NONE
 0xFFFE

	)

98 
	#ARPOP_REQUEST
 1

	)

99 
	#ARPOP_REPLY
 2

	)

100 
	#ARPOP_RREQUEST
 3

	)

101 
	#ARPOP_RREPLY
 4

	)

102 
	#ARPOP_InREQUEST
 8

	)

103 
	#ARPOP_InREPLY
 9

	)

104 
	#ARPOP_NAK
 10

	)

108 
	s¨¥eq
 {

109 
sockaddr
 
	m¨p_∑
;

110 
sockaddr
 
	m¨p_ha
;

111 
	m¨p_Êags
;

112 
sockaddr
 
	m¨p_√tmask
;

113 
	m¨p_dev
[16];

116 
	s¨¥eq_ﬁd
 {

117 
sockaddr
 
	m¨p_∑
;

118 
sockaddr
 
	m¨p_ha
;

119 
	m¨p_Êags
;

120 
sockaddr
 
	m¨p_√tmask
;

124 
	#ATF_COM
 0x02

	)

125 
	#ATF_PERM
 0x04

	)

126 
	#ATF_PUBL
 0x08

	)

127 
	#ATF_USETRAILERS
 0x10

	)

128 
	#ATF_NETMASK
 0x20

	)

130 
	#ATF_DONTPUB
 0x40

	)

136 
	s¨phdr


138 
__be16
 
	m¨_hrd
;

139 
__be16
 
	m¨_¥o
;

140 
	m¨_h 
;

141 
	m¨_∂n
;

142 
__be16
 
	m¨_›
;

148 
	m¨_sha
[
ETH_ALEN
];

149 
	m¨_sù
[4];

150 
	m¨_tha
[
ETH_ALEN
];

151 
	m¨_tù
[4];

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_IP
 0x0800

	)

46 
	#ETH_P_X25
 0x0805

	)

47 
	#ETH_P_ARP
 0x0806

	)

48 
	#ETH_P_BPQ
 0x08FF

	)

49 
	#ETH_P_IEEEPUP
 0x0a00

	)

50 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

51 
	#ETH_P_DEC
 0x6000

	)

52 
	#ETH_P_DNA_DL
 0x6001

	)

53 
	#ETH_P_DNA_RC
 0x6002

	)

54 
	#ETH_P_DNA_RT
 0x6003

	)

55 
	#ETH_P_LAT
 0x6004

	)

56 
	#ETH_P_DIAG
 0x6005

	)

57 
	#ETH_P_CUST
 0x6006

	)

58 
	#ETH_P_SCA
 0x6007

	)

59 
	#ETH_P_TEB
 0x6558

	)

60 
	#ETH_P_RARP
 0x8035

	)

61 
	#ETH_P_ATALK
 0x809B

	)

62 
	#ETH_P_AARP
 0x80F3

	)

63 
	#ETH_P_8021Q
 0x8100

	)

64 
	#ETH_P_IPX
 0x8137

	)

65 
	#ETH_P_IPV6
 0x86DD

	)

66 
	#ETH_P_PAUSE
 0x8808

	)

67 
	#ETH_P_SLOW
 0x8809

	)

68 
	#ETH_P_WCCP
 0x883E

	)

70 
	#ETH_P_PPP_DISC
 0x8863

	)

71 
	#ETH_P_PPP_SES
 0x8864

	)

72 
	#ETH_P_MPLS_UC
 0x8847

	)

73 
	#ETH_P_MPLS_MC
 0x8848

	)

74 
	#ETH_P_ATMMPOA
 0x884¯

	)

75 
	#ETH_P_ATMFATE
 0x8884

	)

78 
	#ETH_P_PAE
 0x888E

	)

79 
	#ETH_P_AOE
 0x88A2

	)

80 
	#ETH_P_TIPC
 0x88CA

	)

81 
	#ETH_P_1588
 0x88F7

	)

82 
	#ETH_P_FCOE
 0x8906

	)

83 
	#ETH_P_FIP
 0x8914

	)

84 
	#ETH_P_EDSA
 0xDADA

	)

85 
	#ETH_P_AF_IUCV
 0xFBFB

	)

91 
	#ETH_P_802_3
 0x0001

	)

92 
	#ETH_P_AX25
 0x0002

	)

93 
	#ETH_P_ALL
 0x0003

	)

94 
	#ETH_P_802_2
 0x0004

	)

95 
	#ETH_P_SNAP
 0x0005

	)

96 
	#ETH_P_DDCMP
 0x0006

	)

97 
	#ETH_P_WAN_PPP
 0x0007

	)

98 
	#ETH_P_PPP_MP
 0x0008

	)

99 
	#ETH_P_LOCALTALK
 0x0009

	)

100 
	#ETH_P_CAN
 0x000C

	)

101 
	#ETH_P_PPPTALK
 0x0010

	)

102 
	#ETH_P_TR_802_2
 0x0011

	)

103 
	#ETH_P_MOBITEX
 0x0015

	)

104 
	#ETH_P_CONTROL
 0x0016

	)

105 
	#ETH_P_IRDA
 0x0017

	)

106 
	#ETH_P_ECONET
 0x0018

	)

107 
	#ETH_P_HDLC
 0x0019

	)

108 
	#ETH_P_ARCNET
 0x001A

	)

109 
	#ETH_P_DSA
 0x001B

	)

110 
	#ETH_P_TRAILER
 0x001C

	)

111 
	#ETH_P_PHONET
 0x00F5

	)

112 
	#ETH_P_IEEE802154
 0x00F6

	)

118 
	sëhhdr
 {

119 
	mh_de°
[
ETH_ALEN
];

120 
	mh_sour˚
[
ETH_ALEN
];

121 
__be16
 
	mh_¥Ÿo
;

122 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/in.h

18 #i‚de‡
_LINUX_IN_H


19 
	#_LINUX_IN_H


	)

21 
	~<löux/ty≥s.h
>

22 
	~<löux/sockë.h
>

26 
	mIPPROTO_IP
 = 0,

27 
	mIPPROTO_ICMP
 = 1,

28 
	mIPPROTO_IGMP
 = 2,

29 
	mIPPROTO_IPIP
 = 4,

30 
	mIPPROTO_TCP
 = 6,

31 
	mIPPROTO_EGP
 = 8,

32 
	mIPPROTO_PUP
 = 12,

33 
	mIPPROTO_UDP
 = 17,

34 
	mIPPROTO_IDP
 = 22,

35 
	mIPPROTO_DCCP
 = 33,

36 
	mIPPROTO_RSVP
 = 46,

37 
	mIPPROTO_GRE
 = 47,

39 
	mIPPROTO_IPV6
 = 41,

41 
	mIPPROTO_ESP
 = 50,

42 
	mIPPROTO_AH
 = 51,

43 
	mIPPROTO_BEETPH
 = 94,

44 
	mIPPROTO_PIM
 = 103,

46 
	mIPPROTO_COMP
 = 108,

47 
	mIPPROTO_SCTP
 = 132,

48 
	mIPPROTO_UDPLITE
 = 136,

50 
	mIPPROTO_RAW
 = 255,

51 
	mIPPROTO_MAX


56 
	sö_addr
 {

57 
__be32
 
	ms_addr
;

60 
	#IP_TOS
 1

	)

61 
	#IP_TTL
 2

	)

62 
	#IP_HDRINCL
 3

	)

63 
	#IP_OPTIONS
 4

	)

64 
	#IP_ROUTER_ALERT
 5

	)

65 
	#IP_RECVOPTS
 6

	)

66 
	#IP_RETOPTS
 7

	)

67 
	#IP_PKTINFO
 8

	)

68 
	#IP_PKTOPTIONS
 9

	)

69 
	#IP_MTU_DISCOVER
 10

	)

70 
	#IP_RECVERR
 11

	)

71 
	#IP_RECVTTL
 12

	)

72 
	#IP_RECVTOS
 13

	)

73 
	#IP_MTU
 14

	)

74 
	#IP_FREEBIND
 15

	)

75 
	#IP_IPSEC_POLICY
 16

	)

76 
	#IP_XFRM_POLICY
 17

	)

77 
	#IP_PASSSEC
 18

	)

78 
	#IP_TRANSPARENT
 19

	)

81 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

84 
	#IP_ORIGDSTADDR
 20

	)

85 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

88 
	#IP_PMTUDISC_DONT
 0

	)

89 
	#IP_PMTUDISC_WANT
 1

	)

90 
	#IP_PMTUDISC_DO
 2

	)

91 
	#IP_PMTUDISC_PROBE
 3

	)

93 
	#IP_MULTICAST_IF
 32

	)

94 
	#IP_MULTICAST_TTL
 33

	)

95 
	#IP_MULTICAST_LOOP
 34

	)

96 
	#IP_ADD_MEMBERSHIP
 35

	)

97 
	#IP_DROP_MEMBERSHIP
 36

	)

98 
	#IP_UNBLOCK_SOURCE
 37

	)

99 
	#IP_BLOCK_SOURCE
 38

	)

100 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

101 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

102 
	#IP_MSFILTER
 41

	)

103 
	#MCAST_JOIN_GROUP
 42

	)

104 
	#MCAST_BLOCK_SOURCE
 43

	)

105 
	#MCAST_UNBLOCK_SOURCE
 44

	)

106 
	#MCAST_LEAVE_GROUP
 45

	)

107 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

108 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

109 
	#MCAST_MSFILTER
 48

	)

110 
	#IP_MULTICAST_ALL
 49

	)

112 
	#MCAST_EXCLUDE
 0

	)

113 
	#MCAST_INCLUDE
 1

	)

116 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

117 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

121 
	sù_mªq


123 
ö_addr
 
	mimr_mu…üddr
;

124 
ö_addr
 
	mimr_öãrÁ˚
;

127 
	sù_mªqn


129 
ö_addr
 
	mimr_mu…üddr
;

130 
ö_addr
 
	mimr_addªss
;

131 
	mimr_ifödex
;

134 
	sù_mªq_sour˚
 {

135 
__be32
 
	mimr_mu…üddr
;

136 
__be32
 
	mimr_öãrÁ˚
;

137 
__be32
 
	mimr_sour˚addr
;

140 
	sù_msfûãr
 {

141 
__be32
 
	mimsf_mu…üddr
;

142 
__be32
 
	mimsf_öãrÁ˚
;

143 
__u32
 
	mimsf_fmode
;

144 
__u32
 
	mimsf_num§c
;

145 
__be32
 
	mimsf_¶i°
[1];

148 
	#IP_MSFILTER_SIZE
(
num§c
) \

149 ((
ù_msfûãr
Ë- (
__u32
) \

150 + (
num§c
Ë* (
__u32
))

	)

152 
	sgroup_ªq


154 
__u32
 
	mgr_öãrÁ˚
;

155 
__kî√l_sockaddr_°‹age
 
	mgr_group
;

158 
	sgroup_sour˚_ªq


160 
__u32
 
	mg§_öãrÁ˚
;

161 
__kî√l_sockaddr_°‹age
 
	mg§_group
;

162 
__kî√l_sockaddr_°‹age
 
	mg§_sour˚
;

165 
	sgroup_fûãr


167 
__u32
 
	mgf_öãrÁ˚
;

168 
__kî√l_sockaddr_°‹age
 
	mgf_group
;

169 
__u32
 
	mgf_fmode
;

170 
__u32
 
	mgf_num§c
;

171 
__kî√l_sockaddr_°‹age
 
	mgf_¶i°
[1];

174 
	#GROUP_FILTER_SIZE
(
num§c
) \

175 ((
group_fûãr
Ë- (
__kî√l_sockaddr_°‹age
) \

176 + (
num§c
Ë* (
__kî√l_sockaddr_°‹age
))

	)

178 
	sö_pktöfo


180 
	mùi_ifödex
;

181 
ö_addr
 
	mùi_•ec_d°
;

182 
ö_addr
 
	mùi_addr
;

186 
	#__SOCK_SIZE__
 16

	)

187 
	ssockaddr_ö
 {

188 
ß_Ámûy_t
 
	msö_Ámûy
;

189 
__be16
 
	msö_p‹t
;

190 
ö_addr
 
	msö_addr
;

193 
	m__∑d
[
__SOCK_SIZE__
 - () -

194 (Ë- (
ö_addr
)];

196 
	#sö_zîo
 
__∑d


	)

204 
	#IN_CLASSA
(
a
Ë((((Ë◊)Ë& 0x80000000Ë=0)

	)

205 
	#IN_CLASSA_NET
 0xff000000

	)

206 
	#IN_CLASSA_NSHIFT
 24

	)

207 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

208 
	#IN_CLASSA_MAX
 128

	)

210 
	#IN_CLASSB
(
a
Ë((((Ë◊)Ë& 0xc0000000Ë=0x80000000)

	)

211 
	#IN_CLASSB_NET
 0xffff0000

	)

212 
	#IN_CLASSB_NSHIFT
 16

	)

213 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

214 
	#IN_CLASSB_MAX
 65536

	)

216 
	#IN_CLASSC
(
a
Ë((((Ë◊)Ë& 0xe0000000Ë=0xc0000000)

	)

217 
	#IN_CLASSC_NET
 0xffffff00

	)

218 
	#IN_CLASSC_NSHIFT
 8

	)

219 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

221 
	#IN_CLASSD
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xe0000000)

	)

222 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

223 
	#IN_MULTICAST_NET
 0xF0000000

	)

225 
	#IN_EXPERIMENTAL
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xf0000000)

	)

226 
	#IN_BADCLASS
(
a
Ë
	`IN_EXPERIMENTAL
(◊))

	)

229 
	#INADDR_ANY
 ((Ë0x00000000)

	)

232 
	#INADDR_BROADCAST
 ((Ë0xffffffff)

	)

235 
	#INADDR_NONE
 ((Ë0xffffffff)

	)

238 
	#IN_LOOPBACKNET
 127

	)

241 
	#INADDR_LOOPBACK
 0x7f000001

	)

242 
	#IN_LOOPBACK
(
a
Ë((((Ë◊)Ë& 0xff000000Ë=0x7f000000)

	)

245 
	#INADDR_UNSPEC_GROUP
 0xe0000000U

	)

246 
	#INADDR_ALLHOSTS_GROUP
 0xe0000001U

	)

247 
	#INADDR_ALLRTRS_GROUP
 0xe0000002U

	)

248 
	#INADDR_MAX_LOCAL_GROUP
 0xe00000ffU

	)

252 
	~<asm/byã‹dî.h
>

	@/usr/include/linux/in6.h

21 #i‚de‡
_LINUX_IN6_H


22 
	#_LINUX_IN6_H


	)

24 
	~<löux/ty≥s.h
>

30 
	sö6_addr


34 
__u8
 
	mu6_addr8
[16];

35 
__be16
 
	mu6_addr16
[8];

36 
__be32
 
	mu6_addr32
[4];

37 } 
	mö6_u
;

38 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

39 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

40 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

48 
	ssockaddr_ö6
 {

49 
	msö6_Ámûy
;

50 
__be16
 
	msö6_p‹t
;

51 
__be32
 
	msö6_Êowöfo
;

52 
ö6_addr
 
	msö6_addr
;

53 
__u32
 
	msö6_sc›e_id
;

56 
	sùv6_mªq
 {

58 
ö6_addr
 
	mùv6mr_mu…üddr
;

61 
	mùv6mr_ifödex
;

64 
	#ùv6mr_aˇddr
 
ùv6mr_mu…üddr


	)

66 
	sö6_Êowœbñ_ªq


68 
ö6_addr
 
	mÊr_d°
;

69 
__be32
 
	mÊr_œbñ
;

70 
__u8
 
	mÊr_a˘i⁄
;

71 
__u8
 
	mÊr_sh¨e
;

72 
__u16
 
	mÊr_Êags
;

73 
__u16
 
	mÊr_expúes
;

74 
__u16
 
	mÊr_lögî
;

75 
__u32
 
	m__Êr_∑d
;

79 
	#IPV6_FL_A_GET
 0

	)

80 
	#IPV6_FL_A_PUT
 1

	)

81 
	#IPV6_FL_A_RENEW
 2

	)

83 
	#IPV6_FL_F_CREATE
 1

	)

84 
	#IPV6_FL_F_EXCL
 2

	)

86 
	#IPV6_FL_S_NONE
 0

	)

87 
	#IPV6_FL_S_EXCL
 1

	)

88 
	#IPV6_FL_S_PROCESS
 2

	)

89 
	#IPV6_FL_S_USER
 3

	)

90 
	#IPV6_FL_S_ANY
 255

	)

101 
	#IPV6_FLOWINFO_FLOWLABEL
 0x000fffff

	)

102 
	#IPV6_FLOWINFO_PRIORITY
 0x0ff00000

	)

105 
	#IPV6_PRIORITY_UNCHARACTERIZED
 0x0000

	)

106 
	#IPV6_PRIORITY_FILLER
 0x0100

	)

107 
	#IPV6_PRIORITY_UNATTENDED
 0x0200

	)

108 
	#IPV6_PRIORITY_RESERVED1
 0x0300

	)

109 
	#IPV6_PRIORITY_BULK
 0x0400

	)

110 
	#IPV6_PRIORITY_RESERVED2
 0x0500

	)

111 
	#IPV6_PRIORITY_INTERACTIVE
 0x0600

	)

112 
	#IPV6_PRIORITY_CONTROL
 0x0700

	)

113 
	#IPV6_PRIORITY_8
 0x0800

	)

114 
	#IPV6_PRIORITY_9
 0x0900

	)

115 
	#IPV6_PRIORITY_10
 0x0a00

	)

116 
	#IPV6_PRIORITY_11
 0x0b00

	)

117 
	#IPV6_PRIORITY_12
 0x0c00

	)

118 
	#IPV6_PRIORITY_13
 0x0d00

	)

119 
	#IPV6_PRIORITY_14
 0x0e00

	)

120 
	#IPV6_PRIORITY_15
 0x0f00

	)

125 
	#IPPROTO_HOPOPTS
 0

	)

126 
	#IPPROTO_ROUTING
 43

	)

127 
	#IPPROTO_FRAGMENT
 44

	)

128 
	#IPPROTO_ICMPV6
 58

	)

129 
	#IPPROTO_NONE
 59

	)

130 
	#IPPROTO_DSTOPTS
 60

	)

131 
	#IPPROTO_MH
 135

	)

136 
	#IPV6_TLV_PAD0
 0

	)

137 
	#IPV6_TLV_PADN
 1

	)

138 
	#IPV6_TLV_ROUTERALERT
 5

	)

139 
	#IPV6_TLV_JUMBO
 194

	)

140 
	#IPV6_TLV_HAO
 201

	)

146 
	#IPV6_ADDRFORM
 1

	)

147 
	#IPV6_2292PKTINFO
 2

	)

148 
	#IPV6_2292HOPOPTS
 3

	)

149 
	#IPV6_2292DSTOPTS
 4

	)

150 
	#IPV6_2292RTHDR
 5

	)

151 
	#IPV6_2292PKTOPTIONS
 6

	)

152 
	#IPV6_CHECKSUM
 7

	)

153 
	#IPV6_2292HOPLIMIT
 8

	)

154 
	#IPV6_NEXTHOP
 9

	)

155 
	#IPV6_AUTHHDR
 10

	)

156 
	#IPV6_FLOWINFO
 11

	)

158 
	#IPV6_UNICAST_HOPS
 16

	)

159 
	#IPV6_MULTICAST_IF
 17

	)

160 
	#IPV6_MULTICAST_HOPS
 18

	)

161 
	#IPV6_MULTICAST_LOOP
 19

	)

162 
	#IPV6_ADD_MEMBERSHIP
 20

	)

163 
	#IPV6_DROP_MEMBERSHIP
 21

	)

164 
	#IPV6_ROUTER_ALERT
 22

	)

165 
	#IPV6_MTU_DISCOVER
 23

	)

166 
	#IPV6_MTU
 24

	)

167 
	#IPV6_RECVERR
 25

	)

168 
	#IPV6_V6ONLY
 26

	)

169 
	#IPV6_JOIN_ANYCAST
 27

	)

170 
	#IPV6_LEAVE_ANYCAST
 28

	)

173 
	#IPV6_PMTUDISC_DONT
 0

	)

174 
	#IPV6_PMTUDISC_WANT
 1

	)

175 
	#IPV6_PMTUDISC_DO
 2

	)

176 
	#IPV6_PMTUDISC_PROBE
 3

	)

179 
	#IPV6_FLOWLABEL_MGR
 32

	)

180 
	#IPV6_FLOWINFO_SEND
 33

	)

182 
	#IPV6_IPSEC_POLICY
 34

	)

183 
	#IPV6_XFRM_POLICY
 35

	)

204 
	#IPV6_RECVPKTINFO
 49

	)

205 
	#IPV6_PKTINFO
 50

	)

206 
	#IPV6_RECVHOPLIMIT
 51

	)

207 
	#IPV6_HOPLIMIT
 52

	)

208 
	#IPV6_RECVHOPOPTS
 53

	)

209 
	#IPV6_HOPOPTS
 54

	)

210 
	#IPV6_RTHDRDSTOPTS
 55

	)

211 
	#IPV6_RECVRTHDR
 56

	)

212 
	#IPV6_RTHDR
 57

	)

213 
	#IPV6_RECVDSTOPTS
 58

	)

214 
	#IPV6_DSTOPTS
 59

	)

216 
	#IPV6_RECVPATHMTU
 60

	)

217 
	#IPV6_PATHMTU
 61

	)

218 
	#IPV6_DONTFRAG
 62

	)

219 
	#IPV6_USE_MIN_MTU
 63

	)

235 
	#IPV6_RECVTCLASS
 66

	)

236 
	#IPV6_TCLASS
 67

	)

249 
	#IPV6_ADDR_PREFERENCES
 72

	)

251 
	#IPV6_PREFER_SRC_TMP
 0x0001

	)

252 
	#IPV6_PREFER_SRC_PUBLIC
 0x0002

	)

253 
	#IPV6_PREFER_SRC_PUBTMP_DEFAULT
 0x0100

	)

254 
	#IPV6_PREFER_SRC_COA
 0x0004

	)

255 
	#IPV6_PREFER_SRC_HOME
 0x0400

	)

256 
	#IPV6_PREFER_SRC_CGA
 0x0008

	)

257 
	#IPV6_PREFER_SRC_NONCGA
 0x0800

	)

259 
	#IPV6_ORIGDSTADDR
 74

	)

260 
	#IPV6_RECVORIGDSTADDR
 
IPV6_ORIGDSTADDR


	)

261 
	#IPV6_TRANSPARENT
 75

	)

	@/usr/include/linux/ip.h

17 #i‚de‡
_LINUX_IP_H


18 
	#_LINUX_IP_H


	)

19 
	~<löux/ty≥s.h
>

20 
	~<asm/byã‹dî.h
>

22 
	#IPTOS_TOS_MASK
 0x1E

	)

23 
	#IPTOS_TOS
(
tos
Ë(—os)&
IPTOS_TOS_MASK
)

	)

24 
	#IPTOS_LOWDELAY
 0x10

	)

25 
	#IPTOS_THROUGHPUT
 0x08

	)

26 
	#IPTOS_RELIABILITY
 0x04

	)

27 
	#IPTOS_MINCOST
 0x02

	)

29 
	#IPTOS_PREC_MASK
 0xE0

	)

30 
	#IPTOS_PREC
(
tos
Ë(—os)&
IPTOS_PREC_MASK
)

	)

31 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

32 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

33 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

34 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

35 
	#IPTOS_PREC_FLASH
 0x60

	)

36 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

37 
	#IPTOS_PREC_PRIORITY
 0x20

	)

38 
	#IPTOS_PREC_ROUTINE
 0x00

	)

42 
	#IPOPT_COPY
 0x80

	)

43 
	#IPOPT_CLASS_MASK
 0x60

	)

44 
	#IPOPT_NUMBER_MASK
 0x1f

	)

46 
	#IPOPT_COPIED
(
o
Ë((o)&
IPOPT_COPY
)

	)

47 
	#IPOPT_CLASS
(
o
Ë((o)&
IPOPT_CLASS_MASK
)

	)

48 
	#IPOPT_NUMBER
(
o
Ë((o)&
IPOPT_NUMBER_MASK
)

	)

50 
	#IPOPT_CONTROL
 0x00

	)

51 
	#IPOPT_RESERVED1
 0x20

	)

52 
	#IPOPT_MEASUREMENT
 0x40

	)

53 
	#IPOPT_RESERVED2
 0x60

	)

55 
	#IPOPT_END
 (0 |
IPOPT_CONTROL
)

	)

56 
	#IPOPT_NOOP
 (1 |
IPOPT_CONTROL
)

	)

57 
	#IPOPT_SEC
 (2 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

58 
	#IPOPT_LSRR
 (3 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

59 
	#IPOPT_TIMESTAMP
 (4 |
IPOPT_MEASUREMENT
)

	)

60 
	#IPOPT_CIPSO
 (6 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

61 
	#IPOPT_RR
 (7 |
IPOPT_CONTROL
)

	)

62 
	#IPOPT_SID
 (8 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

63 
	#IPOPT_SSRR
 (9 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

64 
	#IPOPT_RA
 (20|
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

66 
	#IPVERSION
 4

	)

67 
	#MAXTTL
 255

	)

68 
	#IPDEFTTL
 64

	)

70 
	#IPOPT_OPTVAL
 0

	)

71 
	#IPOPT_OLEN
 1

	)

72 
	#IPOPT_OFFSET
 2

	)

73 
	#IPOPT_MINOFF
 4

	)

74 
	#MAX_IPOPTLEN
 40

	)

75 
	#IPOPT_NOP
 
IPOPT_NOOP


	)

76 
	#IPOPT_EOL
 
IPOPT_END


	)

77 
	#IPOPT_TS
 
IPOPT_TIMESTAMP


	)

79 
	#IPOPT_TS_TSONLY
 0

	)

80 
	#IPOPT_TS_TSANDADDR
 1

	)

81 
	#IPOPT_TS_PRESPEC
 3

	)

83 
	#IPV4_BEET_PHMAXLEN
 8

	)

85 
	sùhdr
 {

86 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

87 
__u8
 
	mihl
:4,

88 
	mvîsi⁄
:4;

89 #ñi‡
deföed
 (
__BIG_ENDIAN_BITFIELD
)

90 
__u8
 
	mvîsi⁄
:4,

91 
	mihl
:4;

95 
__u8
 
	mtos
;

96 
__be16
 
	mtŸ_Àn
;

97 
__be16
 
	mid
;

98 
__be16
 
	m‰ag_off
;

99 
__u8
 
	mâl
;

100 
__u8
 
	m¥Ÿocﬁ
;

101 
__sum16
 
	mcheck
;

102 
__be32
 
	mßddr
;

103 
__be32
 
	mdaddr
;

108 
	sù_auth_hdr
 {

109 
__u8
 
	m√xthdr
;

110 
__u8
 
	mhdæí
;

111 
__be16
 
	mª£rved
;

112 
__be32
 
	m•i
;

113 
__be32
 
	m£q_no
;

114 
__u8
 
	mauth_d©a
[0];

117 
	sù_e•_hdr
 {

118 
__be32
 
	m•i
;

119 
__be32
 
	m£q_no
;

120 
__u8
 
	míc_d©a
[0];

123 
	sù_comp_hdr
 {

124 
__u8
 
	m√xthdr
;

125 
__u8
 
	mÊags
;

126 
__be16
 
	m˝i
;

129 
	sù_bìt_phdr
 {

130 
__u8
 
	m√xthdr
;

131 
__u8
 
	mhdæí
;

132 
__u8
 
	m∑dÀn
;

133 
__u8
 
	mª£rved
;

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

10 
	#SI_LOAD_SHIFT
 16

	)

11 
	ssysöfo
 {

12 
	mu±ime
;

13 
	mlﬂds
[3];

14 
	mtŸÆøm
;

15 
	m‰ìøm
;

16 
	msh¨edøm
;

17 
	mbuf„ºam
;

18 
	mtŸÆsw≠
;

19 
	m‰ìsw≠
;

20 
	m¥ocs
;

21 
	m∑d
;

22 
	mtŸÆhigh
;

23 
	m‰ìhigh
;

24 
	mmem_unô
;

25 
	m_f
[20-2*()-()];

29 
	#BUILD_BUG_ON
(
c⁄dôi⁄
Ë(()
	`BUILD_BUG_ON_ZERO
(c⁄dôi⁄))

	)

32 
	#MAYBE_BUILD_BUG_ON
(
c⁄d
Ë(()([1 - 2 * !!(c⁄d)]))

	)

35 
	#BUILD_BUG_ON_NOT_POWER_OF_2
(
n
) \

36 
	`BUILD_BUG_ON
((
n
Ë=0 || ((“Ë& (“Ë- 1)Ë!0))

	)

42 
	#BUILD_BUG_ON_ZERO
(
e
Ë((°ru˘ { :-!!”); }))

	)

43 
	#BUILD_BUG_ON_NULL
(
e
Ë((*)(°ru˘ { :-!!”); }))

	)

46 
	#__FUNCTION__
 (
__func__
)

	)

49 #ifde‡
CONFIG_NUMA


50 
	#NUMA_BUILD
 1

	)

52 
	#NUMA_BUILD
 0

	)

56 #ifde‡
CONFIG_FTRACE_MCOUNT_RECORD


57 
	#REBUILD_DUE_TO_FTRACE_MCOUNT_RECORD


	)

60 
	gmoduÀ
;

62 
m¨k_h¨dw¨e_unsuµ‹ãd
(c⁄° *
msg
);

63 
m¨k_ãch_¥evõw
(c⁄° *
msg
, 
moduÀ
 *
mod
);

	@/usr/include/linux/netdevice.h

25 #i‚de‡
_LINUX_NETDEVICE_H


26 
	#_LINUX_NETDEVICE_H


	)

28 
	~<löux/if.h
>

29 
	~<löux/if_ëhî.h
>

30 
	~<löux/if_∑ckë.h
>

31 
	~<löux/if_lök.h
>

34 
	#MAX_ADDR_LEN
 32

	)

42 
	s√t_devi˚_°©s


44 
	mrx_∑ckës
;

45 
	mtx_∑ckës
;

46 
	mrx_byãs
;

47 
	mtx_byãs
;

48 
	mrx_îr‹s
;

49 
	mtx_îr‹s
;

50 
	mrx_dr›≥d
;

51 
	mtx_dr›≥d
;

52 
	mmu…iˇ°
;

53 
	mcﬁlisi⁄s
;

56 
	mrx_Àngth_îr‹s
;

57 
	mrx_ovî_îr‹s
;

58 
	mrx_¸c_îr‹s
;

59 
	mrx_‰ame_îr‹s
;

60 
	mrx_fifo_îr‹s
;

61 
	mrx_mis£d_îr‹s
;

64 
	mtx_ab‹ãd_îr‹s
;

65 
	mtx_ˇºõr_îr‹s
;

66 
	mtx_fifo_îr‹s
;

67 
	mtx_hóπbót_îr‹s
;

68 
	mtx_wödow_îr‹s
;

71 
	mrx_com¥es£d
;

72 
	mtx_com¥es£d
;

78 
	mIF_PORT_UNKNOWN
 = 0,

79 
	mIF_PORT_10BASE2
,

80 
	mIF_PORT_10BASET
,

81 
	mIF_PORT_AUI
,

82 
	mIF_PORT_100BASET
,

83 
	mIF_PORT_100BASETX
,

84 
	mIF_PORT_100BASEFX


	@/usr/include/linux/sched.h

1 #i‚de‡
_LINUX_SCHED_H


2 
	#_LINUX_SCHED_H


	)

7 
	#CSIGNAL
 0x000000f‡

	)

8 
	#CLONE_VM
 0x00000100

	)

9 
	#CLONE_FS
 0x00000200

	)

10 
	#CLONE_FILES
 0x00000400

	)

11 
	#CLONE_SIGHAND
 0x00000800

	)

12 
	#CLONE_PTRACE
 0x00002000

	)

13 
	#CLONE_VFORK
 0x00004000

	)

14 
	#CLONE_PARENT
 0x00008000

	)

15 
	#CLONE_THREAD
 0x00010000

	)

16 
	#CLONE_NEWNS
 0x00020000

	)

17 
	#CLONE_SYSVSEM
 0x00040000

	)

18 
	#CLONE_SETTLS
 0x00080000

	)

19 
	#CLONE_PARENT_SETTID
 0x00100000

	)

20 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

21 
	#CLONE_DETACHED
 0x00400000

	)

22 
	#CLONE_UNTRACED
 0x00800000

	)

23 
	#CLONE_CHILD_SETTID
 0x01000000

	)

24 
	#CLONE_STOPPED
 0x02000000

	)

25 
	#CLONE_NEWUTS
 0x04000000

	)

26 
	#CLONE_NEWIPC
 0x08000000

	)

27 
	#CLONE_NEWUSER
 0x10000000

	)

28 
	#CLONE_NEWPID
 0x20000000

	)

29 
	#CLONE_NEWNET
 0x40000000

	)

30 
	#CLONE_IO
 0x80000000

	)

35 
	#SCHED_NORMAL
 0

	)

36 
	#SCHED_FIFO
 1

	)

37 
	#SCHED_RR
 2

	)

38 
	#SCHED_BATCH
 3

	)

40 
	#SCHED_IDLE
 5

	)

42 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	s__kî√l_sockaddr_°‹age
 {

12 
	mss_Ámûy
;

14 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

17 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/linux/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

6 
	~<°rög.h
>

	@/usr/include/linux/tcp.h

17 #i‚de‡
_LINUX_TCP_H


18 
	#_LINUX_TCP_H


	)

20 
	~<löux/ty≥s.h
>

21 
	~<asm/byã‹dî.h
>

22 
	~<löux/sockë.h
>

24 
	st˝hdr
 {

25 
__be16
 
	msour˚
;

26 
__be16
 
	mde°
;

27 
__be32
 
	m£q
;

28 
__be32
 
	mack_£q
;

29 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

30 
__u16
 
	mªs1
:4,

31 
	mdoff
:4,

32 
	mfö
:1,

33 
	msyn
:1,

34 
	mr°
:1,

35 
	mpsh
:1,

36 
	mack
:1,

37 
	murg
:1,

38 
	me˚
:1,

39 
	mcwr
:1;

40 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

41 
__u16
 
	mdoff
:4,

42 
	mªs1
:4,

43 
	mcwr
:1,

44 
	me˚
:1,

45 
	murg
:1,

46 
	mack
:1,

47 
	mpsh
:1,

48 
	mr°
:1,

49 
	msyn
:1,

50 
	mfö
:1;

54 
__be16
 
	mwödow
;

55 
__sum16
 
	mcheck
;

56 
__be16
 
	murg_±r
;

64 
	ut˝_w‹d_hdr
 {

65 
t˝hdr
 
	mhdr
;

66 
__be32
 
	mw‹ds
[5];

69 
	#t˝_Êag_w‹d
(
ç
Ë–((
t˝_w‹d_hdr
 *)—p))->
w‹ds
 [3])

	)

72 
	mTCP_FLAG_CWR
 = 
__˝u_to_be32
(0x00800000),

73 
	mTCP_FLAG_ECE
 = 
__˝u_to_be32
(0x00400000),

74 
	mTCP_FLAG_URG
 = 
__˝u_to_be32
(0x00200000),

75 
	mTCP_FLAG_ACK
 = 
__˝u_to_be32
(0x00100000),

76 
	mTCP_FLAG_PSH
 = 
__˝u_to_be32
(0x00080000),

77 
	mTCP_FLAG_RST
 = 
__˝u_to_be32
(0x00040000),

78 
	mTCP_FLAG_SYN
 = 
__˝u_to_be32
(0x00020000),

79 
	mTCP_FLAG_FIN
 = 
__˝u_to_be32
(0x00010000),

80 
	mTCP_RESERVED_BITS
 = 
__˝u_to_be32
(0x0F000000),

81 
	mTCP_DATA_OFFSET
 = 
__˝u_to_be32
(0xF0000000)

85 
	#TCP_NODELAY
 1

	)

86 
	#TCP_MAXSEG
 2

	)

87 
	#TCP_CORK
 3

	)

88 
	#TCP_KEEPIDLE
 4

	)

89 
	#TCP_KEEPINTVL
 5

	)

90 
	#TCP_KEEPCNT
 6

	)

91 
	#TCP_SYNCNT
 7

	)

92 
	#TCP_LINGER2
 8

	)

93 
	#TCP_DEFER_ACCEPT
 9

	)

94 
	#TCP_WINDOW_CLAMP
 10

	)

95 
	#TCP_INFO
 11

	)

96 
	#TCP_QUICKACK
 12

	)

97 
	#TCP_CONGESTION
 13

	)

98 
	#TCP_MD5SIG
 14

	)

99 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

100 
	#TCP_THIN_DUPACK
 17

	)

102 
	#TCPI_OPT_TIMESTAMPS
 1

	)

103 
	#TCPI_OPT_SACK
 2

	)

104 
	#TCPI_OPT_WSCALE
 4

	)

105 
	#TCPI_OPT_ECN
 8

	)

107 
	et˝_ˇ_°©e


109 
	mTCP_CA_O≥n
 = 0,

110 
	#TCPF_CA_O≥n
 (1<<
TCP_CA_O≥n
)

	)

111 
	mTCP_CA_Dis‹dî
 = 1,

112 
	#TCPF_CA_Dis‹dî
 (1<<
TCP_CA_Dis‹dî
)

	)

113 
	mTCP_CA_CWR
 = 2,

114 
	#TCPF_CA_CWR
 (1<<
TCP_CA_CWR
)

	)

115 
	mTCP_CA_Recovîy
 = 3,

116 
	#TCPF_CA_Recovîy
 (1<<
TCP_CA_Recovîy
)

	)

117 
	mTCP_CA_Loss
 = 4

118 
	#TCPF_CA_Loss
 (1<<
TCP_CA_Loss
)

	)

121 
	st˝_öfo


123 
__u8
 
	mt˝i_°©e
;

124 
__u8
 
	mt˝i_ˇ_°©e
;

125 
__u8
 
	mt˝i_ªå™smôs
;

126 
__u8
 
	mt˝i_¥obes
;

127 
__u8
 
	mt˝i_backoff
;

128 
__u8
 
	mt˝i_›ti⁄s
;

129 
__u8
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

131 
__u32
 
	mt˝i_πo
;

132 
__u32
 
	mt˝i_©o
;

133 
__u32
 
	mt˝i_¢d_mss
;

134 
__u32
 
	mt˝i_rcv_mss
;

136 
__u32
 
	mt˝i_u«cked
;

137 
__u32
 
	mt˝i_ßcked
;

138 
__u32
 
	mt˝i_lo°
;

139 
__u32
 
	mt˝i_ªå™s
;

140 
__u32
 
	mt˝i_Áckës
;

143 
__u32
 
	mt˝i_œ°_d©a_£¡
;

144 
__u32
 
	mt˝i_œ°_ack_£¡
;

145 
__u32
 
	mt˝i_œ°_d©a_ªcv
;

146 
__u32
 
	mt˝i_œ°_ack_ªcv
;

149 
__u32
 
	mt˝i_pmtu
;

150 
__u32
 
	mt˝i_rcv_s°hªsh
;

151 
__u32
 
	mt˝i_πt
;

152 
__u32
 
	mt˝i_πtv¨
;

153 
__u32
 
	mt˝i_¢d_s°hªsh
;

154 
__u32
 
	mt˝i_¢d_cwnd
;

155 
__u32
 
	mt˝i_advmss
;

156 
__u32
 
	mt˝i_ª‹dîög
;

158 
__u32
 
	mt˝i_rcv_πt
;

159 
__u32
 
	mt˝i_rcv_•a˚
;

161 
__u32
 
	mt˝i_tŸÆ_ªå™s
;

165 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

167 
	st˝_md5sig
 {

168 
__kî√l_sockaddr_°‹age
 
	mt˝m_addr
;

169 
__u16
 
	m__t˝m_∑d1
;

170 
__u16
 
	mt˝m_keyÀn
;

171 
__u32
 
	m__t˝m_∑d2
;

172 
__u8
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

168 #ifde‡
__STDC__


170 
	#°dö
 
°dö


	)

171 
	#°dout
 
°dout


	)

172 
	#°dîr
 
°dîr


	)

175 
__BEGIN_NAMESPACE_STD


177 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

179 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

180 
__END_NAMESPACE_STD


182 #ifde‡
__USE_ATFILE


184 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

185 
__c⁄°
 *
__√w
Ë
__THROW
;

188 
__BEGIN_NAMESPACE_STD


193 #i‚de‡
__USE_FILE_OFFSET64


194 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

196 #ifde‡
__REDIRECT


197 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

199 
	#tmpfûe
 
tmpfûe64


	)

203 #ifde‡
__USE_LARGEFILE64


204 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

208 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

209 
__END_NAMESPACE_STD


211 #ifde‡
__USE_MISC


214 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

218 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


226 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

227 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

231 
__BEGIN_NAMESPACE_STD


236 
	`f˛o£
 (
FILE
 *
__°ªam
);

241 
	`fÊush
 (
FILE
 *
__°ªam
);

242 
__END_NAMESPACE_STD


244 #ifde‡
__USE_MISC


251 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

254 #ifde‡
__USE_GNU


261 
	`f˛o£Æl
 ();

265 
__BEGIN_NAMESPACE_STD


266 #i‚de‡
__USE_FILE_OFFSET64


271 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

272 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

277 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

278 
__c⁄°
 *
__ª°ri˘
 
__modes
,

279 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifde‡
__REDIRECT


282 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

283 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

284 
__wur
;

285 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

286 
__c⁄°
 *
__ª°ri˘
 
__modes
,

287 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

288 
__wur
;

290 
	#f›í
 
f›í64


	)

291 
	#‰e›í
 
‰e›í64


	)

294 
__END_NAMESPACE_STD


295 #ifde‡
__USE_LARGEFILE64


296 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

298 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
,

300 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

303 #ifdef 
__USE_POSIX


305 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

308 #ifdef 
__USE_GNU


311 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

312 
__c⁄°
 *
__ª°ri˘
 
__modes
,

313 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

316 #ifde‡
__USE_XOPEN2K8


318 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

319 
__THROW
 
__wur
;

324 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

328 
__BEGIN_NAMESPACE_STD


331 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

335 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

336 
__modes
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifdef 
__USE_BSD


342 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

343 
size_t
 
__size
Ë
__THROW
;

346 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
__BEGIN_NAMESPACE_STD


355 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

356 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	$•rötf
 (*
__ª°ri˘
 
__s
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

370 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

371 
_G_va_li°
 
__¨g
);

376 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

378 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

379 
_G_va_li°
 
__¨g
Ë
__THROW
;

380 
__END_NAMESPACE_STD


382 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


383 
__BEGIN_NAMESPACE_C99


385 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

386 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

387 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

389 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

390 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

391 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

392 
__END_NAMESPACE_C99


395 #ifde‡
__USE_GNU


398 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

399 
_G_va_li°
 
__¨g
)

400 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

401 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

402 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

403 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

404 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

405 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

406 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

409 #ifde‡
__USE_XOPEN2K8


416 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

417 
_G_va_li°
 
__¨g
)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

419 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

424 
__BEGIN_NAMESPACE_STD


429 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

430 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

440 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

441 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

442 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

443 #ifde‡
__REDIRECT


447 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

448 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_fsˇnf
Ë
__wur
;

450 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_sˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

453 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

454 
__isoc99_ssˇnf
Ë
__THROW
;

456 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

457 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

458 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

459 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

460 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

461 
	#fsˇnf
 
__isoc99_fsˇnf


	)

462 
	#sˇnf
 
__isoc99_sˇnf


	)

463 
	#ssˇnf
 
__isoc99_ssˇnf


	)

467 
__END_NAMESPACE_STD


469 #ifdef 
__USE_ISOC99


470 
__BEGIN_NAMESPACE_C99


475 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

476 
_G_va_li°
 
__¨g
)

477 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

483 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

484 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

488 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

489 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

491 #i‡!
deföed
 
__USE_GNU
 \

492 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

493 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

494 #ifde‡
__REDIRECT


498 
	`__REDIRECT
 (
vfsˇnf
,

499 (
FILE
 *
__ª°ri˘
 
__s
,

500 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

501 
__isoc99_vfsˇnf
)

502 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

503 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

504 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

505 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

506 
	`__REDIRECT
 (
vssˇnf
,

507 (
__c⁄°
 *
__ª°ri˘
 
__s
,

508 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

509 
__isoc99_vssˇnf
)

510 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

512 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

513 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

518 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

519 
_G_va_li°
 
__¨g
Ë
__THROW
;

520 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

521 
	#vsˇnf
 
__isoc99_vsˇnf


	)

522 
	#vssˇnf
 
__isoc99_vssˇnf


	)

526 
__END_NAMESPACE_C99


530 
__BEGIN_NAMESPACE_STD


535 
	`fgëc
 (
FILE
 *
__°ªam
);

536 
	`gëc
 (
FILE
 *
__°ªam
);

542 
	`gëch¨
 ();

543 
__END_NAMESPACE_STD


547 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

549 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


554 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

555 
	`gëch¨_u∆ocked
 ();

558 #ifde‡
__USE_MISC


565 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

569 
__BEGIN_NAMESPACE_STD


577 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

578 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

584 
	`putch¨
 (
__c
);

585 
__END_NAMESPACE_STD


589 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

591 #ifde‡
__USE_MISC


598 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

601 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


606 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

607 
	`putch¨_u∆ocked
 (
__c
);

611 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

612 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

614 
	`gëw
 (
FILE
 *
__°ªam
);

617 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

621 
__BEGIN_NAMESPACE_STD


626 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

627 
__wur
;

634 *
	$gës
 (*
__s
Ë
__wur
;

635 
__END_NAMESPACE_STD


637 #ifde‡
__USE_GNU


644 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

645 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

649 #ifdef 
__USE_XOPEN2K8


660 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

661 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

662 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

663 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

664 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

665 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

673 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

674 
size_t
 *
__ª°ri˘
 
__n
,

675 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

679 
__BEGIN_NAMESPACE_STD


684 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

690 
	`puts
 (
__c⁄°
 *
__s
);

697 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

704 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

710 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

712 
__END_NAMESPACE_STD


714 #ifde‡
__USE_GNU


721 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

722 
FILE
 *
__ª°ri˘
 
__°ªam
);

725 #ifde‡
__USE_MISC


732 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

734 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
__BEGIN_NAMESPACE_STD


744 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

749 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

754 
	`ªwöd
 (
FILE
 *
__°ªam
);

755 
__END_NAMESPACE_STD


762 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


763 #i‚de‡
__USE_FILE_OFFSET64


768 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

773 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

775 #ifde‡
__REDIRECT


776 
	`__REDIRECT
 (
f£eko
,

777 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

778 
f£eko64
);

779 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

781 
	#f£eko
 
f£eko64


	)

782 
	#·ñlo
 
·ñlo64


	)

787 
__BEGIN_NAMESPACE_STD


788 #i‚de‡
__USE_FILE_OFFSET64


793 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

798 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

800 #ifde‡
__REDIRECT


801 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

802 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

803 
	`__REDIRECT
 (
f£ços
,

804 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

806 
	#fgëpos
 
fgëpos64


	)

807 
	#f£ços
 
f£ços64


	)

810 
__END_NAMESPACE_STD


812 #ifde‡
__USE_LARGEFILE64


813 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

814 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

815 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

816 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

819 
__BEGIN_NAMESPACE_STD


821 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

823 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

825 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

826 
__END_NAMESPACE_STD


828 #ifde‡
__USE_MISC


830 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

831 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

836 
__BEGIN_NAMESPACE_STD


841 
	`≥º‹
 (
__c⁄°
 *
__s
);

842 
__END_NAMESPACE_STD


848 
	~<bôs/sys_îæi°.h
>

851 #ifdef 
__USE_POSIX


853 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

856 #ifde‡
__USE_MISC


858 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

862 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

863 
deföed
 
__USE_MISC
)

868 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

874 
	`p˛o£
 (
FILE
 *
__°ªam
);

878 #ifdef 
__USE_POSIX


880 *
	$˘îmid
 (*
__s
Ë
__THROW
;

884 #ifde‡
__USE_XOPEN


886 *
	`cu£rid
 (*
__s
);

890 #ifdef 
__USE_GNU


891 
ob°ack
;

894 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

895 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

896 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

897 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

898 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

899 
_G_va_li°
 
__¨gs
)

900 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

904 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


908 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

912 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

915 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


922 
	#__√ed_gë›t


	)

923 
	~<gë›t.h
>

928 #ifde‡
__USE_EXTERN_INLINES


929 
	~<bôs/°dio.h
>

931 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


932 
	~<bôs/°dio2.h
>

934 #ifde‡
__LDBL_COMPAT


935 
	~<bôs/°dio-ldbl.h
>

938 
__END_DECLS


	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

96 #unde‡
__USE_ISOC99


97 #unde‡
__USE_ISOC95


98 #unde‡
__USE_POSIX


99 #unde‡
__USE_POSIX2


100 #unde‡
__USE_POSIX199309


101 #unde‡
__USE_POSIX199506


102 #unde‡
__USE_XOPEN


103 #unde‡
__USE_XOPEN_EXTENDED


104 #unde‡
__USE_UNIX98


105 #unde‡
__USE_XOPEN2K


106 #unde‡
__USE_XOPEN2KXSI


107 #unde‡
__USE_XOPEN2K8


108 #unde‡
__USE_XOPEN2K8XSI


109 #unde‡
__USE_LARGEFILE


110 #unde‡
__USE_LARGEFILE64


111 #unde‡
__USE_FILE_OFFSET64


112 #unde‡
__USE_BSD


113 #unde‡
__USE_SVID


114 #unde‡
__USE_MISC


115 #unde‡
__USE_ATFILE


116 #unde‡
__USE_GNU


117 #unde‡
__USE_REENTRANT


118 #unde‡
__USE_FORTIFY_LEVEL


119 #unde‡
__FAVOR_BSD


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

129 
	#__USE_ANSI
 1

	)

138 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


139 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

140 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

142 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

147 #i‡
deföed
 
_BSD_SOURCE
 && \

148 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

149 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

150 
	#__FAVOR_BSD
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_POSIX_SOURCE


160 
	#_POSIX_SOURCE
 1

	)

161 #unde‡
_POSIX_C_SOURCE


162 
	#_POSIX_C_SOURCE
 200809L

	)

163 #unde‡
_XOPEN_SOURCE


164 
	#_XOPEN_SOURCE
 700

	)

165 #unde‡
_XOPEN_SOURCE_EXTENDED


166 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

167 #unde‡
_LARGEFILE64_SOURCE


168 
	#_LARGEFILE64_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

180 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

181 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

182 
	#_BSD_SOURCE
 1

	)

183 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

192 
	#__USE_ISOC99
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

198 
	#__USE_ISOC95
 1

	)

203 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

204 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

205 
	#_POSIX_SOURCE
 1

	)

206 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

207 
	#_POSIX_C_SOURCE
 2

	)

208 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

209 
	#_POSIX_C_SOURCE
 199506L

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

211 
	#_POSIX_C_SOURCE
 200112L

	)

213 
	#_POSIX_C_SOURCE
 200809L

	)

215 
	#__USE_POSIX_IMPLICITLY
 1

	)

218 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


219 
	#__USE_POSIX
 1

	)

222 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


223 
	#__USE_POSIX2
 1

	)

226 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

227 
	#__USE_POSIX199309
 1

	)

230 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

231 
	#__USE_POSIX199506
 1

	)

234 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

235 
	#__USE_XOPEN2K
 1

	)

236 #unde‡
__USE_ISOC95


237 
	#__USE_ISOC95
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

243 
	#__USE_XOPEN2K8
 1

	)

244 #unde‡
_ATFILE_SOURCE


245 
	#_ATFILE_SOURCE
 1

	)

248 #ifdef 
_XOPEN_SOURCE


249 
	#__USE_XOPEN
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

251 
	#__USE_XOPEN_EXTENDED
 1

	)

252 
	#__USE_UNIX98
 1

	)

253 #unde‡
_LARGEFILE_SOURCE


254 
	#_LARGEFILE_SOURCE
 1

	)

255 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

257 
	#__USE_XOPEN2K8
 1

	)

258 
	#__USE_XOPEN2K8XSI
 1

	)

260 
	#__USE_XOPEN2K
 1

	)

261 
	#__USE_XOPEN2KXSI
 1

	)

262 #unde‡
__USE_ISOC95


263 
	#__USE_ISOC95
 1

	)

264 #unde‡
__USE_ISOC99


265 
	#__USE_ISOC99
 1

	)

268 #ifde‡
_XOPEN_SOURCE_EXTENDED


269 
	#__USE_XOPEN_EXTENDED
 1

	)

274 #ifde‡
_LARGEFILE_SOURCE


275 
	#__USE_LARGEFILE
 1

	)

278 #ifde‡
_LARGEFILE64_SOURCE


279 
	#__USE_LARGEFILE64
 1

	)

282 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

283 
	#__USE_FILE_OFFSET64
 1

	)

286 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


287 
	#__USE_MISC
 1

	)

290 #ifdef 
_BSD_SOURCE


291 
	#__USE_BSD
 1

	)

294 #ifdef 
_SVID_SOURCE


295 
	#__USE_SVID
 1

	)

298 #ifdef 
_ATFILE_SOURCE


299 
	#__USE_ATFILE
 1

	)

302 #ifdef 
_GNU_SOURCE


303 
	#__USE_GNU
 1

	)

306 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


307 
	#__USE_REENTRANT
 1

	)

310 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

311 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0

312 #i‡!
__GNUC_PREREQ
 (4, 1)

313 #ifde‡
__GNUC_RH_RELEASE__


314 #w¨nög 
_FORTIFY_SOURCE
 
suµ‹ãd
 
⁄ly
 
wôh
 
GCC
 4.1 
™d
 
œãr


316 
	#__USE_FORTIFY_LEVEL
 0

	)

317 #ñi‡
_FORTIFY_SOURCE
 > 1

318 
	#__USE_FORTIFY_LEVEL
 2

	)

320 
	#__USE_FORTIFY_LEVEL
 1

	)

323 
	#__USE_FORTIFY_LEVEL
 0

	)

327 
	#__STDC_IEC_559__
 1

	)

328 
	#__STDC_IEC_559_COMPLEX__
 1

	)

331 
	#__STDC_ISO_10646__
 200009L

	)

339 #unde‡
__GNU_LIBRARY__


340 
	#__GNU_LIBRARY__
 6

	)

344 
	#__GLIBC__
 2

	)

345 
	#__GLIBC_MINOR__
 12

	)

347 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

348 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

351 #i‡
deföed
 
__GNUC__
 \

352 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

353 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

354 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

355 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

359 #i‚de‡
__ASSEMBLER__


360 #i‚de‡
_SYS_CDEFS_H


361 
	~<sys/cdefs.h
>

366 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


367 
	#__USE_LARGEFILE
 1

	)

368 
	#__USE_LARGEFILE64
 1

	)

374 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

375 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

376 && 
deföed
 
	g__exã∫_ölöe


377 
	#__USE_EXTERN_INLINES
 1

	)

385 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/sockë.h
>

26 
	#IFNAMSIZ
 16

	)

27 
	#IFALIASZ
 256

	)

28 
	~<löux/hdlc/io˘l.h
>

31 
	#IFF_UP
 0x1

	)

32 
	#IFF_BROADCAST
 0x2

	)

33 
	#IFF_DEBUG
 0x4

	)

34 
	#IFF_LOOPBACK
 0x8

	)

35 
	#IFF_POINTOPOINT
 0x10

	)

36 
	#IFF_NOTRAILERS
 0x20

	)

37 
	#IFF_RUNNING
 0x40

	)

38 
	#IFF_NOARP
 0x80

	)

39 
	#IFF_PROMISC
 0x100

	)

40 
	#IFF_ALLMULTI
 0x200

	)

42 
	#IFF_MASTER
 0x400

	)

43 
	#IFF_SLAVE
 0x800

	)

45 
	#IFF_MULTICAST
 0x1000

	)

47 
	#IFF_PORTSEL
 0x2000

	)

48 
	#IFF_AUTOMEDIA
 0x4000

	)

49 
	#IFF_DYNAMIC
 0x8000

	)

51 
	#IFF_LOWER_UP
 0x10000

	)

52 
	#IFF_DORMANT
 0x20000

	)

54 
	#IFF_ECHO
 0x40000

	)

56 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

57 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

60 
	#IFF_802_1Q_VLAN
 0x1

	)

61 
	#IFF_EBRIDGE
 0x2

	)

62 
	#IFF_SLAVE_INACTIVE
 0x4

	)

63 
	#IFF_MASTER_8023AD
 0x8

	)

64 
	#IFF_MASTER_ALB
 0x10

	)

65 
	#IFF_BONDING
 0x20

	)

66 
	#IFF_SLAVE_NEEDARP
 0x40

	)

67 
	#IFF_ISATAP
 0x80

	)

68 
	#IFF_MASTER_ARPMON
 0x100

	)

69 
	#IFF_WAN_HDLC
 0x200

	)

70 
	#IFF_XMIT_DST_RELEASE
 0x400

	)

73 
	#IFF_IN_NETPOLL
 0x800

	)

74 
	#IFF_DISABLE_NETPOLL
 0x1000

	)

75 
	#IFF_BRIDGE_PORT
 0x2000

	)

76 
	#IFF_MACVLAN_PORT
 0x4000

	)

77 
	#IFF_OVS_DATAPATH
 0x8000

	)

81 
	#IFF_TX_SKB_SHARING
 0x10000

	)

84 
	#IF_GET_IFACE
 0x0001

	)

85 
	#IF_GET_PROTO
 0x0002

	)

88 
	#IF_IFACE_V35
 0x1000

	)

89 
	#IF_IFACE_V24
 0x1001

	)

90 
	#IF_IFACE_X21
 0x1002

	)

91 
	#IF_IFACE_T1
 0x1003

	)

92 
	#IF_IFACE_E1
 0x1004

	)

93 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

94 
	#IF_IFACE_X21D
 0x1006

	)

97 
	#IF_PROTO_HDLC
 0x2000

	)

98 
	#IF_PROTO_PPP
 0x2001

	)

99 
	#IF_PROTO_CISCO
 0x2002

	)

100 
	#IF_PROTO_FR
 0x2003

	)

101 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

102 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

103 
	#IF_PROTO_X25
 0x2006

	)

104 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

105 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

106 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

107 
	#IF_PROTO_FR_PVC
 0x200A

	)

108 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

109 
	#IF_PROTO_RAW
 0x200C

	)

113 
	mIF_OPER_UNKNOWN
,

114 
	mIF_OPER_NOTPRESENT
,

115 
	mIF_OPER_DOWN
,

116 
	mIF_OPER_LOWERLAYERDOWN
,

117 
	mIF_OPER_TESTING
,

118 
	mIF_OPER_DORMANT
,

119 
	mIF_OPER_UP
,

124 
	mIF_LINK_MODE_DEFAULT
,

125 
	mIF_LINK_MODE_DORMANT
,

138 
	sifm≠


140 
	mmem_°¨t
;

141 
	mmem_íd
;

142 
	mba£_addr
;

143 
	múq
;

144 
	mdma
;

145 
	mp‹t
;

149 
	sif_£âögs


151 
	mty≥
;

152 
	msize
;

155 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

156 
cisco_¥Ÿo
 *
	mcisco
;

157 
‰_¥Ÿo
 *
	m‰
;

158 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

159 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

162 
sync_£rül_£âögs
 *
	msync
;

163 
ã1_£âögs
 *
	mã1
;

164 } 
	mifs_ifsu
;

174 
	si‰eq


176 
	#IFHWADDRLEN
 6

	)

179 
	mi‰n_«me
[
IFNAMSIZ
];

180 } 
	mi‰_i‰n
;

183 
sockaddr
 
	mi‰u_addr
;

184 
sockaddr
 
	mi‰u_d°addr
;

185 
sockaddr
 
	mi‰u_brﬂdaddr
;

186 
sockaddr
 
	mi‰u_√tmask
;

187 
sockaddr
 
	mi‰u_hwaddr
;

188 
	mi‰u_Êags
;

189 
	mi‰u_ivÆue
;

190 
	mi‰u_mtu
;

191 
ifm≠
 
	mi‰u_m≠
;

192 
	mi‰u_¶ave
[
IFNAMSIZ
];

193 
	mi‰u_√w«me
[
IFNAMSIZ
];

194 * 
	mi‰u_d©a
;

195 
if_£âögs
 
	mi‰u_£âögs
;

196 } 
	mi‰_i‰u
;

199 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

200 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

201 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

202 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

203 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

204 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

205 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

206 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

207 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

208 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

209 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

210 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

211 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

212 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

213 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

214 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

215 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

224 
	sifc⁄f


226 
	mifc_Àn
;

229 *
	mifcu_buf
;

230 
i‰eq
 *
	mifcu_ªq
;

231 } 
	mifc_ifcu
;

233 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

234 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s


10 
__u32
 
	mrx_∑ckës
;

11 
__u32
 
	mtx_∑ckës
;

12 
__u32
 
	mrx_byãs
;

13 
__u32
 
	mtx_byãs
;

14 
__u32
 
	mrx_îr‹s
;

15 
__u32
 
	mtx_îr‹s
;

16 
__u32
 
	mrx_dr›≥d
;

17 
__u32
 
	mtx_dr›≥d
;

18 
__u32
 
	mmu…iˇ°
;

19 
__u32
 
	mcﬁlisi⁄s
;

22 
__u32
 
	mrx_Àngth_îr‹s
;

23 
__u32
 
	mrx_ovî_îr‹s
;

24 
__u32
 
	mrx_¸c_îr‹s
;

25 
__u32
 
	mrx_‰ame_îr‹s
;

26 
__u32
 
	mrx_fifo_îr‹s
;

27 
__u32
 
	mrx_mis£d_îr‹s
;

30 
__u32
 
	mtx_ab‹ãd_îr‹s
;

31 
__u32
 
	mtx_ˇºõr_îr‹s
;

32 
__u32
 
	mtx_fifo_îr‹s
;

33 
__u32
 
	mtx_hóπbót_îr‹s
;

34 
__u32
 
	mtx_wödow_îr‹s
;

37 
__u32
 
	mrx_com¥es£d
;

38 
__u32
 
	mtx_com¥es£d
;

41 
	sπ∆_lök_°©s64
 {

42 
__u64
 
	mrx_∑ckës
;

43 
__u64
 
	mtx_∑ckës
;

44 
__u64
 
	mrx_byãs
;

45 
__u64
 
	mtx_byãs
;

46 
__u64
 
	mrx_îr‹s
;

47 
__u64
 
	mtx_îr‹s
;

48 
__u64
 
	mrx_dr›≥d
;

49 
__u64
 
	mtx_dr›≥d
;

50 
__u64
 
	mmu…iˇ°
;

51 
__u64
 
	mcﬁlisi⁄s
;

54 
__u64
 
	mrx_Àngth_îr‹s
;

55 
__u64
 
	mrx_ovî_îr‹s
;

56 
__u64
 
	mrx_¸c_îr‹s
;

57 
__u64
 
	mrx_‰ame_îr‹s
;

58 
__u64
 
	mrx_fifo_îr‹s
;

59 
__u64
 
	mrx_mis£d_îr‹s
;

62 
__u64
 
	mtx_ab‹ãd_îr‹s
;

63 
__u64
 
	mtx_ˇºõr_îr‹s
;

64 
__u64
 
	mtx_fifo_îr‹s
;

65 
__u64
 
	mtx_hóπbót_îr‹s
;

66 
__u64
 
	mtx_wödow_îr‹s
;

69 
__u64
 
	mrx_com¥es£d
;

70 
__u64
 
	mtx_com¥es£d
;

74 
	sπ∆_lök_ifm≠


76 
__u64
 
	mmem_°¨t
;

77 
__u64
 
	mmem_íd
;

78 
__u64
 
	mba£_addr
;

79 
__u16
 
	múq
;

80 
__u8
 
	mdma
;

81 
__u8
 
	mp‹t
;

86 
	mIFLA_UNSPEC
,

87 
	mIFLA_ADDRESS
,

88 
	mIFLA_BROADCAST
,

89 
	mIFLA_IFNAME
,

90 
	mIFLA_MTU
,

91 
	mIFLA_LINK
,

92 
	mIFLA_QDISC
,

93 
	mIFLA_STATS
,

94 
	mIFLA_COST
,

95 
	#IFLA_COST
 
IFLA_COST


	)

96 
	mIFLA_PRIORITY
,

97 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

98 
	mIFLA_MASTER
,

99 
	#IFLA_MASTER
 
IFLA_MASTER


	)

100 
	mIFLA_WIRELESS
,

101 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

102 
	mIFLA_PROTINFO
,

103 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

104 
	mIFLA_TXQLEN
,

105 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

106 
	mIFLA_MAP
,

107 
	#IFLA_MAP
 
IFLA_MAP


	)

108 
	mIFLA_WEIGHT
,

109 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

110 
	mIFLA_OPERSTATE
,

111 
	mIFLA_LINKMODE
,

112 
	mIFLA_LINKINFO
,

113 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

114 
	mIFLA_NET_NS_PID
,

115 
	mIFLA_IFALIAS
,

116 
	mIFLA_NUM_VF
,

117 
	mIFLA_VFINFO_LIST
,

118 
	mIFLA_STATS64
,

119 
	mIFLA_VF_PORTS
,

120 
	mIFLA_PORT_SELF
,

121 
	m__IFLA_MAX


125 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

128 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

129 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

163 
	mIFLA_INET6_UNSPEC
,

164 
	mIFLA_INET6_FLAGS
,

165 
	mIFLA_INET6_CONF
,

166 
	mIFLA_INET6_STATS
,

167 
	mIFLA_INET6_MCAST
,

168 
	mIFLA_INET6_CACHEINFO
,

169 
	mIFLA_INET6_ICMP6STATS
,

170 
	m__IFLA_INET6_MAX


173 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

175 
	siÊa_ˇcheöfo


177 
__u32
 
	mmax_ªasm_Àn
;

178 
__u32
 
	mt°amp
;

179 
__u32
 
	mªachabÀ_time
;

180 
__u32
 
	mªå™s_time
;

185 
	mIFLA_INFO_UNSPEC
,

186 
	mIFLA_INFO_KIND
,

187 
	mIFLA_INFO_DATA
,

188 
	mIFLA_INFO_XSTATS
,

189 
	m__IFLA_INFO_MAX
,

192 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

198 
	mIFLA_VLAN_UNSPEC
,

199 
	mIFLA_VLAN_ID
,

200 
	mIFLA_VLAN_FLAGS
,

201 
	mIFLA_VLAN_EGRESS_QOS
,

202 
	mIFLA_VLAN_INGRESS_QOS
,

203 
	m__IFLA_VLAN_MAX
,

206 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

208 
	siÊa_vœn_Êags
 {

209 
__u32
 
	mÊags
;

210 
__u32
 
	mmask
;

215 
	mIFLA_VLAN_QOS_UNSPEC
,

216 
	mIFLA_VLAN_QOS_MAPPING
,

217 
	m__IFLA_VLAN_QOS_MAX


220 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

222 
	siÊa_vœn_qos_m≠pög


224 
__u32
 
	m‰om
;

225 
__u32
 
	mto
;

230 
	mIFLA_MACVLAN_UNSPEC
,

231 
	mIFLA_MACVLAN_MODE
,

232 
	m__IFLA_MACVLAN_MAX
,

235 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

237 
	emacvœn_mode
 {

238 
	mMACVLAN_MODE_PRIVATE
 = 1,

239 
	mMACVLAN_MODE_VEPA
 = 2,

240 
	mMACVLAN_MODE_BRIDGE
 = 4,

241 
	mMACVLAN_MODE_PASSTHRU
 = 8,

247 
	mIFLA_VF_INFO_UNSPEC
,

248 
	mIFLA_VF_INFO
,

249 
	m__IFLA_VF_INFO_MAX
,

252 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

255 
	mIFLA_VF_UNSPEC
,

256 
	mIFLA_VF_MAC
,

257 
	mIFLA_VF_VLAN
,

258 
	mIFLA_VF_TX_RATE
,

259 
	m__IFLA_VF_MAX
,

262 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

264 
	siÊa_vf_mac
 {

265 
__u32
 
	mvf
;

266 
__u8
 
	mmac
[32];

269 
	siÊa_vf_vœn
 {

270 
__u32
 
	mvf
;

271 
__u32
 
	mvœn
;

272 
__u32
 
	mqos
;

275 
	siÊa_vf_tx_øã
 {

276 
__u32
 
	mvf
;

277 
__u32
 
	møã
;

280 
	siÊa_vf_öfo
 {

281 
__u32
 
	mvf
;

282 
__u8
 
	mmac
[32];

283 
__u32
 
	mvœn
;

284 
__u32
 
	mqos
;

285 
__u32
 
	mtx_øã
;

304 
	mIFLA_VF_PORT_UNSPEC
,

305 
	mIFLA_VF_PORT
,

306 
	m__IFLA_VF_PORT_MAX
,

309 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

312 
	mIFLA_PORT_UNSPEC
,

313 
	mIFLA_PORT_VF
,

314 
	mIFLA_PORT_PROFILE
,

315 
	mIFLA_PORT_VSI_TYPE
,

316 
	mIFLA_PORT_INSTANCE_UUID
,

317 
	mIFLA_PORT_HOST_UUID
,

318 
	mIFLA_PORT_REQUEST
,

319 
	mIFLA_PORT_RESPONSE
,

320 
	m__IFLA_PORT_MAX
,

323 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

325 
	#PORT_PROFILE_MAX
 40

	)

326 
	#PORT_UUID_MAX
 16

	)

327 
	#PORT_SELF_VF
 -1

	)

330 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

331 
	mPORT_REQUEST_PREASSOCIATE_RR
,

332 
	mPORT_REQUEST_ASSOCIATE
,

333 
	mPORT_REQUEST_DISASSOCIATE
,

337 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

338 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

339 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

340 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

341 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

342 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

343 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

345 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

346 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

347 
	mPORT_PROFILE_RESPONSE_INVALID
,

348 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

349 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

350 
	mPORT_PROFILE_RESPONSE_ERROR
,

353 
	siÊa_p‹t_vsi
 {

354 
__u8
 
	mvsi_mgr_id
;

355 
__u8
 
	mvsi_ty≥_id
[3];

356 
__u8
 
	mvsi_ty≥_vîsi⁄
;

357 
__u8
 
	m∑d
[3];

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	~<löux/ty≥s.h
>

6 
	ssockaddr_pkt


8 
	m•kt_Ámûy
;

9 
	m•kt_devi˚
[14];

10 
__be16
 
	m•kt_¥Ÿocﬁ
;

13 
	ssockaddr_Œ


15 
	m¶l_Ámûy
;

16 
__be16
 
	m¶l_¥Ÿocﬁ
;

17 
	m¶l_ifödex
;

18 
	m¶l_h©y≥
;

19 
	m¶l_pkây≥
;

20 
	m¶l_hÆí
;

21 
	m¶l_addr
[8];

26 
	#PACKET_HOST
 0

	)

27 
	#PACKET_BROADCAST
 1

	)

28 
	#PACKET_MULTICAST
 2

	)

29 
	#PACKET_OTHERHOST
 3

	)

30 
	#PACKET_OUTGOING
 4

	)

32 
	#PACKET_LOOPBACK
 5

	)

33 
	#PACKET_FASTROUTE
 6

	)

37 
	#PACKET_ADD_MEMBERSHIP
 1

	)

38 
	#PACKET_DROP_MEMBERSHIP
 2

	)

39 
	#PACKET_RECV_OUTPUT
 3

	)

41 
	#PACKET_RX_RING
 5

	)

42 
	#PACKET_STATISTICS
 6

	)

43 
	#PACKET_COPY_THRESH
 7

	)

44 
	#PACKET_AUXDATA
 8

	)

45 
	#PACKET_ORIGDEV
 9

	)

46 
	#PACKET_VERSION
 10

	)

47 
	#PACKET_HDRLEN
 11

	)

48 
	#PACKET_RESERVE
 12

	)

49 
	#PACKET_TX_RING
 13

	)

50 
	#PACKET_LOSS
 14

	)

51 
	#PACKET_TIMESTAMP
 17

	)

53 
	sçackë_°©s


55 
	mç_∑ckës
;

56 
	mç_dr›s
;

59 
	sçackë_auxd©a


61 
__u32
 
	mç_°©us
;

62 
__u32
 
	mç_Àn
;

63 
__u32
 
	mç_¢≠Àn
;

64 
__u16
 
	mç_mac
;

65 
__u16
 
	mç_√t
;

66 
__u16
 
	mç_vœn_tci
;

67 
__u16
 
	mç_∑ddög
;

71 
	#TP_STATUS_KERNEL
 0x0

	)

72 
	#TP_STATUS_USER
 0x1

	)

73 
	#TP_STATUS_COPY
 0x2

	)

74 
	#TP_STATUS_LOSING
 0x4

	)

75 
	#TP_STATUS_CSUMNOTREADY
 0x8

	)

78 
	#TP_STATUS_AVAILABLE
 0x0

	)

79 
	#TP_STATUS_SEND_REQUEST
 0x1

	)

80 
	#TP_STATUS_SENDING
 0x2

	)

81 
	#TP_STATUS_WRONG_FORMAT
 0x4

	)

83 
	sçackë_hdr


85 
	mç_°©us
;

86 
	mç_Àn
;

87 
	mç_¢≠Àn
;

88 
	mç_mac
;

89 
	mç_√t
;

90 
	mç_£c
;

91 
	mç_u£c
;

94 
	#TPACKET_ALIGNMENT
 16

	)

95 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

96 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

98 
	sçackë2_hdr


100 
__u32
 
	mç_°©us
;

101 
__u32
 
	mç_Àn
;

102 
__u32
 
	mç_¢≠Àn
;

103 
__u16
 
	mç_mac
;

104 
__u16
 
	mç_√t
;

105 
__u32
 
	mç_£c
;

106 
__u32
 
	mç_n£c
;

107 
__u16
 
	mç_vœn_tci
;

108 
__u16
 
	mç_∑ddög
;

111 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

113 
	eçackë_vîsi⁄s


115 
	mTPACKET_V1
,

116 
	mTPACKET_V2
,

132 
	sçackë_ªq


134 
	mç_block_size
;

135 
	mç_block_ƒ
;

136 
	mç_‰ame_size
;

137 
	mç_‰ame_ƒ
;

140 
	s∑ckë_mªq


142 
	mmr_ifödex
;

143 
	mmr_ty≥
;

144 
	mmr_Æí
;

145 
	mmr_addªss
[8];

148 
	#PACKET_MR_MULTICAST
 0

	)

149 
	#PACKET_MR_PROMISC
 1

	)

150 
	#PACKET_MR_ALLMULTI
 2

	)

151 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/linux/hdlc/ioctl.h

1 #i‚de‡
__HDLC_IOCTL_H__


2 
	#__HDLC_IOCTL_H__


	)

5 
	#GENERIC_HDLC_VERSION
 4

	)

7 
	#CLOCK_DEFAULT
 0

	)

8 
	#CLOCK_EXT
 1

	)

9 
	#CLOCK_INT
 2

	)

10 
	#CLOCK_TXINT
 3

	)

11 
	#CLOCK_TXFROMRX
 4

	)

14 
	#ENCODING_DEFAULT
 0

	)

15 
	#ENCODING_NRZ
 1

	)

16 
	#ENCODING_NRZI
 2

	)

17 
	#ENCODING_FM_MARK
 3

	)

18 
	#ENCODING_FM_SPACE
 4

	)

19 
	#ENCODING_MANCHESTER
 5

	)

22 
	#PARITY_DEFAULT
 0

	)

23 
	#PARITY_NONE
 1

	)

24 
	#PARITY_CRC16_PR0
 2

	)

25 
	#PARITY_CRC16_PR1
 3

	)

26 
	#PARITY_CRC16_PR0_CCITT
 4

	)

27 
	#PARITY_CRC16_PR1_CCITT
 5

	)

28 
	#PARITY_CRC32_PR0_CCITT
 6

	)

29 
	#PARITY_CRC32_PR1_CCITT
 7

	)

31 
	#LMI_DEFAULT
 0

	)

32 
	#LMI_NONE
 1

	)

33 
	#LMI_ANSI
 2

	)

34 
	#LMI_CCITT
 3

	)

35 
	#LMI_CISCO
 4

	)

38 
	m˛ock_øã
;

39 
	m˛ock_ty≥
;

40 
	mlo›back
;

41 } 
	tsync_£rül_£âögs
;

44 
	m˛ock_øã
;

45 
	m˛ock_ty≥
;

46 
	mlo›back
;

47 
	m¶Ÿ_m≠
;

48 } 
	tã1_£âögs
;

51 
	mícodög
;

52 
	m∑rôy
;

53 } 
	tøw_hdlc_¥Ÿo
;

56 
	mt391
;

57 
	mt392
;

58 
	mn391
;

59 
	mn392
;

60 
	mn393
;

61 
	mlmi
;

62 
	md˚
;

63 } 
	t‰_¥Ÿo
;

66 
	mdlci
;

67 } 
	t‰_¥Ÿo_pvc
;

70 
	mdlci
;

71 
	mma°î
[
IFNAMSIZ
];

72 }
	t‰_¥Ÿo_pvc_öfo
;

75 
	möãrvÆ
;

76 
	mtimeout
;

77 } 
	tcisco_¥Ÿo
;

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/sockë.h
>

5 
	~<löux/ty≥s.h
>

7 
	#NETLINK_ROUTE
 0

	)

8 
	#NETLINK_UNUSED
 1

	)

9 
	#NETLINK_USERSOCK
 2

	)

10 
	#NETLINK_FIREWALL
 3

	)

11 
	#NETLINK_INET_DIAG
 4

	)

12 
	#NETLINK_NFLOG
 5

	)

13 
	#NETLINK_XFRM
 6

	)

14 
	#NETLINK_SELINUX
 7

	)

15 
	#NETLINK_ISCSI
 8

	)

16 
	#NETLINK_AUDIT
 9

	)

17 
	#NETLINK_FIB_LOOKUP
 10

	)

18 
	#NETLINK_CONNECTOR
 11

	)

19 
	#NETLINK_NETFILTER
 12

	)

20 
	#NETLINK_IP6_FW
 13

	)

21 
	#NETLINK_DNRTMSG
 14

	)

22 
	#NETLINK_KOBJECT_UEVENT
 15

	)

23 
	#NETLINK_GENERIC
 16

	)

25 
	#NETLINK_SCSITRANSPORT
 18

	)

26 
	#NETLINK_ECRYPTFS
 19

	)

27 
	#NETLINK_RDMA
 20

	)

29 
	#MAX_LINKS
 32

	)

31 
	g√t
;

33 
	ssockaddr_∆


35 
ß_Ámûy_t
 
	m∆_Ámûy
;

36 
	m∆_∑d
;

37 
__u32
 
	m∆_pid
;

38 
__u32
 
	m∆_groups
;

41 
	s∆msghdr


43 
__u32
 
	m∆msg_Àn
;

44 
__u16
 
	m∆msg_ty≥
;

45 
__u16
 
	m∆msg_Êags
;

46 
__u32
 
	m∆msg_£q
;

47 
__u32
 
	m∆msg_pid
;

52 
	#NLM_F_REQUEST
 1

	)

53 
	#NLM_F_MULTI
 2

	)

54 
	#NLM_F_ACK
 4

	)

55 
	#NLM_F_ECHO
 8

	)

58 
	#NLM_F_ROOT
 0x100

	)

59 
	#NLM_F_MATCH
 0x200

	)

60 
	#NLM_F_ATOMIC
 0x400

	)

61 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

64 
	#NLM_F_REPLACE
 0x100

	)

65 
	#NLM_F_EXCL
 0x200

	)

66 
	#NLM_F_CREATE
 0x400

	)

67 
	#NLM_F_APPEND
 0x800

	)

78 
	#NLMSG_ALIGNTO
 4

	)

79 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

80 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

81 
	#NLMSG_LENGTH
(
Àn
Ë(÷í)+
	`NLMSG_ALIGN
(
NLMSG_HDRLEN
))

	)

82 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

83 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

84 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

85 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

86 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

87 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

88 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

89 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

91 
	#NLMSG_NOOP
 0x1

	)

92 
	#NLMSG_ERROR
 0x2

	)

93 
	#NLMSG_DONE
 0x3

	)

94 
	#NLMSG_OVERRUN
 0x4

	)

96 
	#NLMSG_MIN_TYPE
 0x10

	)

98 
	s∆msgîr


100 
	mîr‹
;

101 
∆msghdr
 
	mmsg
;

104 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

105 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

106 
	#NETLINK_PKTINFO
 3

	)

107 
	#NETLINK_BROADCAST_ERROR
 4

	)

108 
	#NETLINK_NO_ENOBUFS
 5

	)

110 
	s∆_pktöfo


112 
__u32
 
	mgroup
;

115 
	#NET_MAJOR
 36

	)

118 
	mNETLINK_UNCONNECTED
 = 0,

119 
	mNETLINK_CONNECTED
,

131 
	s∆©å


133 
__u16
 
	m∆a_Àn
;

134 
__u16
 
	m∆a_ty≥
;

147 
	#NLA_F_NESTED
 (1 << 15)

	)

148 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

149 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

151 
	#NLA_ALIGNTO
 4

	)

152 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

153 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
158
2603
boot/apm.c
boot/apm_bios.h
boot/boot.h
boot/bootparam.h
boot/code16gcc.h
boot/csetup.c
boot/diskboot.c
boot/edd.c
boot/edd.h
boot/edid.h
boot/ioctl.h
boot/ist.h
boot/linux_param.c
boot/main.c
boot/mca.c
boot/mem.c
boot/memory.c
boot/printf.c
boot/screen_info.h
boot/string.c
boot/tty.c
boot/vesa.h
boot/video-bios.c
boot/video-vesa.c
boot/video-vga.c
boot/video.c
boot/video.h
boot/voyager.c
inc/acpi.h
inc/apic.h
inc/assert.h
inc/boot.h
inc/boot1.h
inc/cpu.h
inc/domain.h
inc/e820.h
inc/elf.h
inc/elf32.h
inc/elf64.h
inc/error.h
inc/guest_syscall.h
inc/guestos.h
inc/intmacro.h
inc/intr.h
inc/iommu.h
inc/irq.h
inc/kbdreg.h
inc/linux-header.h
inc/linuxdef.h
inc/malloc.h
inc/memlayout.h
inc/mmap.h
inc/mmu.h
inc/mp.h
inc/npt.h
inc/osv.h
inc/osv_vmm.h
inc/osvstd.h
inc/pci.h
inc/percpu.h
inc/pmap.h
inc/privacy.h
inc/queue.h
inc/sem.h
inc/socket.h
inc/stab.h
inc/stdio.h
inc/string.h
inc/svm.h
inc/types.h
inc/vmcb.h
inc/vmfile.h
inc/vmmcons.h
inc/vmpt.h
inc/x86.h
kern/acpi.c
kern/apic.c
kern/boot_linux.c
kern/console.c
kern/console.h
kern/detectmem.c
kern/domain.c
kern/gosmm.c
kern/guest_syscall.c
kern/init.c
kern/iommu.c
kern/irq.c
kern/mmap.c
kern/monitor.c
kern/monitor.h
kern/mp.c
kern/multiboot.h
kern/multiboot1.h
kern/nivmcall.c
kern/npt.c
kern/pci.c
kern/percpu.c
kern/pmap.c
kern/printf.c
kern/privacy.c
kern/svm.c
kern/vmcall.c
kern/vmfile.c
kern/vmmcons.c
kern/vmmsock.c
kern/vmpt.c
lib/memcmp.c
lib/memcpy.c
lib/printfmt.c
lib/readline.c
lib/string.c
osvmodul/lsn.c
osvmodul/osvstd.h
osvmodul/snull.c
osvmodul/snull.h
osvmodul/snull_osv.c
osvmodul/socket.c
osvmodul/tasklet.c
osvmodul/vmmsg.c
reset_domu.c
/usr/include/linux/errno.h
/usr/include/linux/ethtool.h
/usr/include/linux/fcntl.h
/usr/include/linux/fs.h
/usr/include/linux/if_arp.h
/usr/include/linux/if_ether.h
/usr/include/linux/in.h
/usr/include/linux/in6.h
/usr/include/linux/ip.h
/usr/include/linux/kernel.h
/usr/include/linux/netdevice.h
/usr/include/linux/sched.h
/usr/include/linux/socket.h
/usr/include/linux/string.h
/usr/include/linux/tcp.h
/usr/include/linux/types.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/if.h
/usr/include/linux/if_link.h
/usr/include/linux/if_packet.h
/usr/include/linux/ioctl.h
/usr/include/linux/limits.h
/usr/include/linux/posix_types.h
/usr/include/string.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/linux/hdlc/ioctl.h
/usr/include/linux/netlink.h
/usr/include/linux/stddef.h
/usr/include/xlocale.h
/usr/include/endian.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
